   1              		.file	"adc.c"
   3              		.text
   4              	.Ltext0:
  32              		.align	2
  34              		.global	adc_init
  36              	adc_init:
  38              	.Ltext1:
   1:adc_match.h   **** void adc_init()
   2:adc_match.h   **** {
  40              	.LM1:
  41              		@ args = 0, pretend = 0, frame = 0
  42              		@ frame_needed = 0, uses_anonymous_args = 0
  43              		@ link register save eliminated.
   3:adc_match.h   **** 	PINSEL1|=(1<<24);
  45              	.LM2:
  46 0000 2C209FE5 		ldr	r2, .L2
  47 0004 003092E5 		ldr	r3, [r2, #0]
  48 0008 013483E3 		orr	r3, r3, #16777216
  49 000c 003082E5 		str	r3, [r2, #0]
   4:adc_match.h   **** 	PINSEL1&=~(1<<25);//AD0.2 at P0.29
  51              	.LM3:
  52 0010 003092E5 		ldr	r3, [r2, #0]
  53 0014 0234C3E3 		bic	r3, r3, #33554432
  54 0018 003082E5 		str	r3, [r2, #0]
   5:adc_match.h   **** 	
   6:adc_match.h   **** 	AD0CR|=(1<<1)|(12<<8)|(1<<21)|(1<<27)|(5<<24);//AD0.2 ;VPB clock (PCLK) value=12;PDN=1;Start conve
  56              	.LM4:
  57 001c 14109FE5 		ldr	r1, .L2+4
  58 0020 14309FE5 		ldr	r3, .L2+8
  59 0024 002091E5 		ldr	r2, [r1, #0]
  60 0028 033082E1 		orr	r3, r2, r3
  62              	.LM5:
  63              		@ lr needed for prologue
  65              	.LM6:
  66 002c 003081E5 		str	r3, [r1, #0]
  67 0030 0EF0A0E1 		mov	pc, lr
  68              	.L3:
  69              		.align	2
  70              	.L2:
  71 0034 04C002E0 		.word	-536690684
  72 0038 004003E0 		.word	-536657920
  73 003c 020C200D 		.word	220204034
  75              		.align	2
  77              		.global	adc_read
  79              	adc_read:
   7:adc_match.h   **** 					      //(5<<24)=101->Start conversion when the edge selected by bit 27 occurs on MAT0.3.
   8:adc_match.h   **** 
   9:adc_match.h   **** }
  10:adc_match.h   **** 
  11:adc_match.h   **** unsigned int adc_read()
  12:adc_match.h   **** {
  81              	.LM7:
  82              		@ args = 0, pretend = 0, frame = 0
  83              		@ frame_needed = 0, uses_anonymous_args = 0
  84              		@ link register save eliminated.
  85              		@ lr needed for prologue
  13:adc_match.h   **** 	//AD0CR|=(1<<24);//001=Start conversion now.
  14:adc_match.h   **** 	
  15:adc_match.h   **** 	while(!(AD0DR1&(1<<31)));//This bit is set to 1 when an A/D conversion completes,hence poll till i
  87              	.LM8:
  88              	.L5:
  89 0040 1C209FE5 		ldr	r2, .L9
  90 0044 003092E5 		ldr	r3, [r2, #0]
  91 0048 000053E3 		cmp	r3, #0
  92 004c 0E0000AA 		bge	.L5
  16:adc_match.h   ****                                
  17:adc_match.h   **** 	return((AD0DR1 & 0x0000FFC0)>>6);//masking(refer notbk)
  94              	.LM9:
  95 0050 003092E5 		ldr	r3, [r2, #0]
  96 0054 0C009FE5 		ldr	r0, .L9+4
  97 0058 000003E0 		and	r0, r3, r0
  98 005c 2003A0E1 		mov	r0, r0, lsr #6
  18:adc_match.h   **** }
 100              	.LM10:
 101 0060 0EF0A0E1 		mov	pc, lr
 102              	.L10:
 103              		.align	2
 104              	.L9:
 105 0064 144003E0 		.word	-536657900
 106 0068 C0FF0000 		.word	65472
 108              		.align	2
 110              		.global	timer_init
 112              	timer_init:
  19:adc_match.h   **** 
  20:adc_match.h   **** 
  21:adc_match.h   **** void timer_init()
  22:adc_match.h   **** {
 114              	.LM11:
 115              		@ args = 0, pretend = 0, frame = 0
 116              		@ frame_needed = 0, uses_anonymous_args = 0
 117              		@ link register save eliminated.
  23:adc_match.h   **** 	T0EMR|=(3<<10);//set external match pin for adc start conversion
 119              	.LM12:
 120 006c 58209FE5 		ldr	r2, .L12
 121 0070 003092E5 		ldr	r3, [r2, #0]
 122 0074 033B83E3 		orr	r3, r3, #3072
 123 0078 003082E5 		str	r3, [r2, #0]
  24:adc_match.h   **** 	T0TCR|=(1<<1);//reset TC & PC
 125              	.LM13:
 126 007c 4C109FE5 		ldr	r1, .L12+4
 127 0080 003091E5 		ldr	r3, [r1, #0]
 128 0084 023083E3 		orr	r3, r3, #2
 129 0088 003081E5 		str	r3, [r1, #0]
  25:adc_match.h   **** 	T0CTCR=0X00;// select timer mode on positive rising edge
 131              	.LM14:
 132 008c 40309FE5 		ldr	r3, .L12+8
 133 0090 0020A0E3 		mov	r2, #0
 134 0094 002083E5 		str	r2, [r3, #0]
  26:adc_match.h   **** 	T0PR=60;// for 1 sec delay
 136              	.LM15:
 137 0098 38309FE5 		ldr	r3, .L12+12
 138 009c 3C20A0E3 		mov	r2, #60
 139 00a0 002083E5 		str	r2, [r3, #0]
  27:adc_match.h   **** 	T0MR3=1000000;
 141              	.LM16:
 142 00a4 30209FE5 		ldr	r2, .L12+16
 143 00a8 30309FE5 		ldr	r3, .L12+20
 144 00ac 002083E5 		str	r2, [r3, #0]
  28:adc_match.h   **** 	//T0MCR=0x3;//0X3 generate interrupt on match & reset the TC to 00
  29:adc_match.h   **** 	T0MCR|=(1<<9)|(1<<10);//Interrupt on MR3,Reset on MR3
 146              	.LM17:
 147 00b0 2C209FE5 		ldr	r2, .L12+24
 148 00b4 003092E5 		ldr	r3, [r2, #0]
 149 00b8 063C83E3 		orr	r3, r3, #1536
 150 00bc 003082E5 		str	r3, [r2, #0]
  30:adc_match.h   **** 	T0TCR=0x1;// start the timer.
 152              	.LM18:
 153 00c0 0130A0E3 		mov	r3, #1
 155              	.LM19:
 156              		@ lr needed for prologue
 158              	.LM20:
 159 00c4 003081E5 		str	r3, [r1, #0]
 160 00c8 0EF0A0E1 		mov	pc, lr
 161              	.L13:
 162              		.align	2
 163              	.L12:
 164 00cc 3C4000E0 		.word	-536854468
 165 00d0 044000E0 		.word	-536854524
 166 00d4 704000E0 		.word	-536854416
 167 00d8 0C4000E0 		.word	-536854516
 168 00dc 40420F00 		.word	1000000
 169 00e0 244000E0 		.word	-536854492
 170 00e4 144000E0 		.word	-536854508
 174              		.align	2
 176              		.global	uart0_init
 178              	uart0_init:
 180              	.Ltext2:
   1:uart.h        **** 
   2:uart.h        **** #define val 60000000/(16*baud)
   3:uart.h        **** #define baud 9600
   4:uart.h        **** void uart0_init()
   5:uart.h        **** {
 182              	.LM21:
 183              		@ args = 0, pretend = 0, frame = 0
 184              		@ frame_needed = 0, uses_anonymous_args = 0
 185              		@ link register save eliminated.
   6:uart.h        **** 	PINSEL0&=~(1<<1)|(1<<3);
 187              	.LM22:
 188 00e8 48209FE5 		ldr	r2, .L15
 189 00ec 003092E5 		ldr	r3, [r2, #0]
 190 00f0 0230C3E3 		bic	r3, r3, #2
 191 00f4 003082E5 		str	r3, [r2, #0]
   7:uart.h        **** 	PINSEL0|=(1<<0)|(1<<2);
 193              	.LM23:
 194 00f8 003092E5 		ldr	r3, [r2, #0]
 195 00fc 053083E3 		orr	r3, r3, #5
 196 0100 003082E5 		str	r3, [r2, #0]
   8:uart.h        **** 	
   9:uart.h        **** 	U0LCR|=(1<<7);// enable DLAB bit
 198              	.LM24:
 199 0104 30109FE5 		ldr	r1, .L15+4
 200 0108 003091E5 		ldr	r3, [r1, #0]
 201 010c 803083E3 		orr	r3, r3, #128
 202 0110 003081E5 		str	r3, [r1, #0]
  10:uart.h        **** 	U0DLL=val&(0xFF);
 204              	.LM25:
 205 0114 24309FE5 		ldr	r3, .L15+8
 206 0118 8620A0E3 		mov	r2, #134
 207 011c 002083E5 		str	r2, [r3, #0]
  11:uart.h        **** 	U0DLM=val>>8;
 209              	.LM26:
 210 0120 1C309FE5 		ldr	r3, .L15+12
 211 0124 0120A0E3 		mov	r2, #1
 212 0128 002083E5 		str	r2, [r3, #0]
  12:uart.h        **** 	U0LCR=0X03;//parity disable,1 stop bit,8 bit data
 214              	.LM27:
 215 012c 0330A0E3 		mov	r3, #3
 217              	.LM28:
 218              		@ lr needed for prologue
 220              	.LM29:
 221 0130 003081E5 		str	r3, [r1, #0]
 222 0134 0EF0A0E1 		mov	pc, lr
 223              	.L16:
 224              		.align	2
 225              	.L15:
 226 0138 00C002E0 		.word	-536690688
 227 013c 0CC000E0 		.word	-536821748
 228 0140 00C000E0 		.word	-536821760
 229 0144 04C000E0 		.word	-536821756
 231              		.align	2
 234              		.global	uart0_tx_char
 236              	uart0_tx_char:
  13:uart.h        **** }
  14:uart.h        **** 
  15:uart.h        **** void uart0_tx_char(unsigned char data)
  16:uart.h        **** {
 238              	.LM30:
 239              		@ args = 0, pretend = 0, frame = 0
 240              		@ frame_needed = 0, uses_anonymous_args = 0
 241              		@ link register save eliminated.
 242              		@ lr needed for prologue
 243 0148 FF0000E2 		and	r0, r0, #255
  17:uart.h        **** 	while(!(U0LSR&(1<<5)));  
 245              	.LM31:
 246              	.L18:
 247 014c 14309FE5 		ldr	r3, .L22
 248 0150 003093E5 		ldr	r3, [r3, #0]
 249 0154 200013E3 		tst	r3, #32
 250 0158 0C309F15 		ldrne	r3, .L22+4
 251 015c 00008315 		strne	r0, [r3, #0]
 252 0160 0EF0A011 		movne	pc, lr
 253 0164 510000EA 		b	.L18
 254              	.L23:
 255              		.align	2
 256              	.L22:
 257 0168 14C000E0 		.word	-536821740
 258 016c 00C000E0 		.word	-536821760
  18:uart.h        **** 	U0THR=data;
 260              	.LM32:
 262              		.align	2
 265              		.global	uart0_tx_str
 267              	uart0_tx_str:
  19:uart.h        **** }	
  20:uart.h        **** 
  21:uart.h        **** void uart0_tx_str(unsigned char *ptr) 
  22:uart.h        **** {
 269              	.LM33:
 270              		@ args = 0, pretend = 0, frame = 0
 271              		@ frame_needed = 1, uses_anonymous_args = 0
 272 0170 0DC0A0E1 		mov	ip, sp
 273 0174 10D82DE9 		stmfd	sp!, {r4, fp, ip, lr, pc}
 274 0178 0040A0E1 		mov	r4, r0
  23:uart.h        ****     while(*ptr !='\0')
 276              	.LM34:
 277 017c 0000D0E5 		ldrb	r0, [r0, #0]	@ zero_extendqisi2
 278 0180 000050E3 		cmp	r0, #0
 280              	.LM35:
 281 0184 04B04CE2 		sub	fp, ip, #4
 283              	.LM36:
 284 0188 10A81B09 		ldmeqea	fp, {r4, fp, sp, pc}
 285              	.L28:
  24:uart.h        **** 	{
  25:uart.h        **** 	uart0_tx_char(*ptr);
 287              	.LM37:
 288 018c FF0000E2 		and	r0, r0, #255
 289 0190 FEFFFFEB 		bl	uart0_tx_char
  26:uart.h        **** 	ptr ++; // uart1_tx_char(*(ptr++));
 291              	.LM38:
 292 0194 0100F4E5 		ldrb	r0, [r4, #1]!	@ zero_extendqisi2
 293 0198 000050E3 		cmp	r0, #0
 294 019c 10A81B09 		ldmeqea	fp, {r4, fp, sp, pc}
 295 01a0 610000EA 		b	.L28
 297              		.align	2
 300              		.global	uart0_tx_num
 302              	uart0_tx_num:
  27:uart.h        **** 	}
  28:uart.h        **** }
  29:uart.h        **** 
  30:uart.h        **** void uart0_tx_num(unsigned int num ) 
  31:uart.h        **** {
 304              	.LM39:
 305              		@ args = 0, pretend = 0, frame = 8
 306              		@ frame_needed = 1, uses_anonymous_args = 0
 307 01a4 0DC0A0E1 		mov	ip, sp
 308 01a8 10D82DE9 		stmfd	sp!, {r4, fp, ip, lr, pc}
 309 01ac 04B04CE2 		sub	fp, ip, #4
 310 01b0 08D04DE2 		sub	sp, sp, #8
  32:uart.h        **** 	unsigned char i,count[5];	
  33:uart.h        **** 	
  34:uart.h        **** 	for(i=1;i<=4;i++)
 312              	.LM40:
 313              	.LBB2:
 314 01b4 0140A0E3 		mov	r4, #1
 315              	.L36:
  35:uart.h        **** 	{
  36:uart.h        **** 	count[i] = num % 10;
 317              	.LM41:
 318 01b8 60309FE5 		ldr	r3, .L45
 319 01bc 931082E0 		umull	r1, r2, r3, r0
 320 01c0 10C04BE2 		sub	ip, fp, #16
 322              	.LM42:
 323 01c4 013084E2 		add	r3, r4, #1
 325              	.LM43:
 326 01c8 A221A0E1 		mov	r2, r2, lsr #3
 327 01cc 04108CE0 		add	r1, ip, r4
 329              	.LM44:
 330 01d0 FF4003E2 		and	r4, r3, #255
 332              	.LM45:
 333 01d4 023182E0 		add	r3, r2, r2, asl #2
 334 01d8 833040E0 		sub	r3, r0, r3, asl #1
 336              	.LM46:
 337 01dc 040054E3 		cmp	r4, #4
 339              	.LM47:
 340 01e0 083041E5 		strb	r3, [r1, #-8]
  37:uart.h        **** 	num = num / 10 ;
 342              	.LM48:
 343 01e4 0200A0E1 		mov	r0, r2
 345              	.LM49:
 346 01e8 6C00009A 		bls	.L36
  38:uart.h        **** 	}
  39:uart.h        **** 	i--;// At the time of exit from the 'for loop',its value is greater than 1 of max value,
 348              	.LM50:
 349 01ec 013044E2 		sub	r3, r4, #1
  40:uart.h        **** 		// in this case it is 6 which is greater than 5;hence to decrease by 1 i--. 
  41:uart.h        **** 	while(i!=0)
 351              	.LM51:
 352 01f0 FF4013E2 		ands	r4, r3, #255
 353 01f4 10A81B09 		ldmeqea	fp, {r4, fp, sp, pc}
 354              	.L40:
  42:uart.h        **** 	{
  43:uart.h        **** 	uart0_tx_char(count[i] + 0x30);
 356              	.LM52:
 357 01f8 10104BE2 		sub	r1, fp, #16
 358 01fc 043081E0 		add	r3, r1, r4
 359 0200 080053E5 		ldrb	r0, [r3, #-8]	@ zero_extendqisi2
 360 0204 300080E2 		add	r0, r0, #48
 361 0208 FF0000E2 		and	r0, r0, #255
 362 020c FEFFFFEB 		bl	uart0_tx_char
  44:uart.h        **** 	i--;
 364              	.LM53:
 365 0210 013044E2 		sub	r3, r4, #1
 366 0214 FF4013E2 		ands	r4, r3, #255
 367 0218 10A81B09 		ldmeqea	fp, {r4, fp, sp, pc}
 368 021c 7C0000EA 		b	.L40
 369              	.L46:
 370              		.align	2
 371              	.L45:
 372 0220 CDCCCCCC 		.word	-858993459
 373              	.LBE2:
 379              		.align	2
 381              		.global	uart0_rx_char
 383              	uart0_rx_char:
  45:uart.h        **** 	}
  46:uart.h        **** }
  47:uart.h        **** unsigned char uart0_rx_char(void)
  48:uart.h        **** {
 385              	.LM54:
 386              		@ args = 0, pretend = 0, frame = 0
 387              		@ frame_needed = 0, uses_anonymous_args = 0
 388              		@ link register save eliminated.
 389              		@ lr needed for prologue
  49:uart.h        **** 	while(!(U0LSR&(1<<0)));  
 391              	.LM55:
 392              	.L48:
 393 0224 18309FE5 		ldr	r3, .L52
 394 0228 003093E5 		ldr	r3, [r3, #0]
 395 022c 010013E3 		tst	r3, #1
 396 0230 10309F15 		ldrne	r3, .L52+4
 397 0234 00009315 		ldrne	r0, [r3, #0]
 398 0238 FF000012 		andne	r0, r0, #255
  50:uart.h        **** 	return U0RBR;
  51:uart.h        **** }
 400              	.LM56:
 401 023c 0EF0A011 		movne	pc, lr
 402 0240 870000EA 		b	.L48
 403              	.L53:
 404              		.align	2
 405              	.L52:
 406 0244 14C000E0 		.word	-536821740
 407 0248 00C000E0 		.word	-536821760
 409              		.align	2
 412              		.global	uart0_rx_str
 414              	uart0_rx_str:
  52:uart.h        **** 	
  53:uart.h        **** void uart0_rx_str(unsigned char *ptr)
  54:uart.h        **** {     unsigned int i;
 416              	.LM57:
 417              		@ args = 0, pretend = 0, frame = 0
 418              		@ frame_needed = 1, uses_anonymous_args = 0
 419 024c 0DC0A0E1 		mov	ip, sp
 420 0250 30D82DE9 		stmfd	sp!, {r4, r5, fp, ip, lr, pc}
 421 0254 04B04CE2 		sub	fp, ip, #4
 422 0258 0040A0E1 		mov	r4, r0
  55:uart.h        ****       for(i=0;i<100;i++)
 424              	.LM58:
 425              	.LBB3:
 426 025c 0050A0E3 		mov	r5, #0
 427              	.L60:
  56:uart.h        ****       {
  57:uart.h        ****        *(ptr+i)=uart0_rx_char();
 429              	.LM59:
 430 0260 FEFFFFEB 		bl	uart0_rx_char
 431 0264 0500C4E7 		strb	r0, [r4, r5]
  58:uart.h        ****         if(*(ptr+i)=='\r')
 433              	.LM60:
 434 0268 0530D4E7 		ldrb	r3, [r4, r5]	@ zero_extendqisi2
 435 026c 0D0053E3 		cmp	r3, #13
 436 0270 0030A003 		moveq	r3, #0
 437 0274 0530C407 		streqb	r3, [r4, r5]
  59:uart.h        ****         {
  60:uart.h        ****         *(ptr+i)='\0';
  61:uart.h        **** 		
  62:uart.h        ****         break;
 439              	.LM61:
 440 0278 30A81B09 		ldmeqea	fp, {r4, r5, fp, sp, pc}
 442              	.LM62:
 443 027c 015085E2 		add	r5, r5, #1
 444 0280 630055E3 		cmp	r5, #99
 445 0284 30A81B89 		ldmhiea	fp, {r4, r5, fp, sp, pc}
 446 0288 960000EA 		b	.L60
 447              	.LBE3:
 452              		.align	2
 454              		.global	uart0_rx_num
 456              	uart0_rx_num:
  63:uart.h        **** 		}
  64:uart.h        ****        }      
  65:uart.h        **** }	
  66:uart.h        **** 
  67:uart.h        **** // Receiving number
  68:uart.h        **** //For 1 digit no.
  69:uart.h        **** unsigned char uart0_rx_num(void)
  70:uart.h        **** {
 458              	.LM63:
 459              		@ args = 0, pretend = 0, frame = 0
 460              		@ frame_needed = 1, uses_anonymous_args = 0
 461 028c 0DC0A0E1 		mov	ip, sp
 462 0290 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 463 0294 04B04CE2 		sub	fp, ip, #4
  71:uart.h        **** 	unsigned char num;
  72:uart.h        **** 	while(1)
  73:uart.h        **** 	{
  74:uart.h        **** 	num = uart0_rx_char();
 465              	.LM64:
 466              	.LBB4:
 467 0298 FEFFFFEB 		bl	uart0_rx_char
  75:uart.h        **** 	num = num - 0x30;
 469              	.LM65:
 470 029c 300040E2 		sub	r0, r0, #48
 471 02a0 FF0000E2 		and	r0, r0, #255
  76:uart.h        **** 	return num;
  77:uart.h        **** 	}
  78:uart.h        **** }
 473              	.LM66:
 474 02a4 00A81BE9 		ldmea	fp, {fp, sp, pc}
 475              	.LBE4:
 478              		.section	.rodata.str1.4,"aMS",%progbits,1
 479              		.align	2
 480              	.LC0:
 481 0000 0A00     		.ascii	"\n\000"
 482 0002 0000     		.text
 483              		.align	2
 485              		.global	main
 487              	main:
 489              	.Ltext3:
   1:adc.c         **** #include"startup.h"
   2:adc.c         **** #include"LPC214x.h"
   3:adc.c         **** #include"adc_match.h"
   4:adc.c         **** #include"uart.h"
   5:adc.c         **** //#include"timer_poll.h"
   6:adc.c         **** int main()
   7:adc.c         **** {	unsigned int ad;
 491              	.LM67:
 492              		@ args = 0, pretend = 0, frame = 0
 493              		@ frame_needed = 1, uses_anonymous_args = 0
 494 02a8 0DC0A0E1 		mov	ip, sp
 495 02ac 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 496 02b0 04B04CE2 		sub	fp, ip, #4
   8:adc.c         **** 	sys_init();//for pll
 498              	.LM68:
 499              	.LBB5:
 500 02b4 FEFFFFEB 		bl	sys_init
   9:adc.c         **** 	adc_init();
 502              	.LM69:
 503 02b8 FEFFFFEB 		bl	adc_init
  10:adc.c         **** 	uart0_init();
 505              	.LM70:
 506 02bc FEFFFFEB 		bl	uart0_init
  11:adc.c         **** 	timer_init();
 508              	.LM71:
 509 02c0 FEFFFFEB 		bl	timer_init
 510              	.L71:
  12:adc.c         **** 
  13:adc.c         **** 	while(1)
  14:adc.c         **** 	{
  15:adc.c         **** 	ad=adc_read();
 512              	.LM72:
 513 02c4 FEFFFFEB 		bl	adc_read
  16:adc.c         **** 	uart0_tx_num(ad); 
 515              	.LM73:
 516 02c8 FEFFFFEB 		bl	uart0_tx_num
  17:adc.c         **** 	uart0_tx_str("\n");
 518              	.LM74:
 519 02cc 04009FE5 		ldr	r0, .L72
 520 02d0 FEFFFFEB 		bl	uart0_tx_str
 521 02d4 AF0000EA 		b	.L71
 522              	.L73:
 523              		.align	2
 524              	.L72:
 525 02d8 00000000 		.word	.LC0
  18:adc.c         **** 	}
  19:adc.c         **** }	
 527              	.LM75:
 528              	.LBE5:
 530              		.text
 532              	.Letext:
 533              		.ident	"GCC: (GNU) 3.3"
DEFINED SYMBOLS
                            *ABS*:00000000 adc.c
     /tmp/ccJffQLa.s:36     .text:00000000 adc_init
     /tmp/ccJffQLa.s:79     .text:00000040 adc_read
     /tmp/ccJffQLa.s:112    .text:0000006c timer_init
     /tmp/ccJffQLa.s:178    .text:000000e8 uart0_init
     /tmp/ccJffQLa.s:236    .text:00000148 uart0_tx_char
     /tmp/ccJffQLa.s:267    .text:00000170 uart0_tx_str
     /tmp/ccJffQLa.s:302    .text:000001a4 uart0_tx_num
     /tmp/ccJffQLa.s:383    .text:00000224 uart0_rx_char
     /tmp/ccJffQLa.s:414    .text:0000024c uart0_rx_str
     /tmp/ccJffQLa.s:456    .text:0000028c uart0_rx_num
     /tmp/ccJffQLa.s:487    .text:000002a8 main

UNDEFINED SYMBOLS
sys_init
