   1              		.file	"adc.c"
   3              		.text
   4              	.Ltext0:
  32              		.align	2
  34              		.global	adc_init
  36              	adc_init:
  38              	.Ltext1:
   1:adc_burst.h   **** void adc_init()
   2:adc_burst.h   **** {
  40              	.LM1:
  41              		@ args = 0, pretend = 0, frame = 0
  42              		@ frame_needed = 0, uses_anonymous_args = 0
  43              		@ link register save eliminated.
   3:adc_burst.h   **** 	PINSEL1|=(1<<24);
  45              	.LM2:
  46 0000 2C209FE5 		ldr	r2, .L2
  47 0004 003092E5 		ldr	r3, [r2, #0]
  48 0008 013483E3 		orr	r3, r3, #16777216
  49 000c 003082E5 		str	r3, [r2, #0]
   4:adc_burst.h   **** 	PINSEL1&=~(1<<25);//AD0.2 at P0.29
  51              	.LM3:
  52 0010 003092E5 		ldr	r3, [r2, #0]
  53 0014 0234C3E3 		bic	r3, r3, #33554432
  54 0018 003082E5 		str	r3, [r2, #0]
   5:adc_burst.h   **** 	
   6:adc_burst.h   **** 	AD0CR|=(1<<1)|(12<<8)|(1<<16)|(1<<21);//AD0.2 ;VPB clock (PCLK) value=12;burst mode;PDN=1
  56              	.LM4:
  57 001c 14109FE5 		ldr	r1, .L2+4
  58 0020 14309FE5 		ldr	r3, .L2+8
  59 0024 002091E5 		ldr	r2, [r1, #0]
  60 0028 033082E1 		orr	r3, r2, r3
  62              	.LM5:
  63              		@ lr needed for prologue
  65              	.LM6:
  66 002c 003081E5 		str	r3, [r1, #0]
  67 0030 0EF0A0E1 		mov	pc, lr
  68              	.L3:
  69              		.align	2
  70              	.L2:
  71 0034 04C002E0 		.word	-536690684
  72 0038 004003E0 		.word	-536657920
  73 003c 020C2100 		.word	2165762
  75              		.align	2
  77              		.global	adc_read
  79              	adc_read:
   7:adc_burst.h   **** }
   8:adc_burst.h   **** 
   9:adc_burst.h   **** unsigned int adc_read()
  10:adc_burst.h   **** {
  81              	.LM7:
  82              		@ args = 0, pretend = 0, frame = 0
  83              		@ frame_needed = 0, uses_anonymous_args = 0
  84              		@ link register save eliminated.
  85              		@ lr needed for prologue
  11:adc_burst.h   **** 	//AD0CR|=(1<<24);//001=Start conversion now.
  12:adc_burst.h   **** 	
  13:adc_burst.h   **** 	while(!(AD0DR1&(1<<31)));//This bit is set to 1 when an A/D conversion completes,hence poll till i
  87              	.LM8:
  88              	.L5:
  89 0040 1C209FE5 		ldr	r2, .L9
  90 0044 003092E5 		ldr	r3, [r2, #0]
  91 0048 000053E3 		cmp	r3, #0
  92 004c 0E0000AA 		bge	.L5
  14:adc_burst.h   ****                                
  15:adc_burst.h   **** 	return((AD0DR1 & 0x0000FFC0)>>6);//masking(refer notbk)
  94              	.LM9:
  95 0050 003092E5 		ldr	r3, [r2, #0]
  96 0054 0C009FE5 		ldr	r0, .L9+4
  97 0058 000003E0 		and	r0, r3, r0
  98 005c 2003A0E1 		mov	r0, r0, lsr #6
  16:adc_burst.h   **** }
 100              	.LM10:
 101 0060 0EF0A0E1 		mov	pc, lr
 102              	.L10:
 103              		.align	2
 104              	.L9:
 105 0064 144003E0 		.word	-536657900
 106 0068 C0FF0000 		.word	65472
 108              		.align	2
 111              		.global	delay
 113              	delay:
  17:adc_burst.h   **** 
  18:adc_burst.h   **** void delay(unsigned int i)
  19:adc_burst.h   **** {
 115              	.LM11:
 116              		@ args = 0, pretend = 0, frame = 8
 117              		@ frame_needed = 0, uses_anonymous_args = 0
 118              		@ link register save eliminated.
 119 006c 08D04DE2 		sub	sp, sp, #8
  20:adc_burst.h   **** 	volatile unsigned int j=0,k = 0;
 121              	.LM12:
 122              	.LBB2:
 123 0070 0030A0E3 		mov	r3, #0
 124 0074 04308DE5 		str	r3, [sp, #4]
 125 0078 00308DE5 		str	r3, [sp, #0]
  21:adc_burst.h   **** 	for (j=0;j<i;j++)
 127              	.LM13:
 128 007c 04308DE5 		str	r3, [sp, #4]
 129 0080 04309DE5 		ldr	r3, [sp, #4]
 130 0084 000053E1 		cmp	r3, r0
 132              	.LM14:
 133              		@ lr needed for prologue
 135              	.LM15:
 136 0088 3300002A 		bcs	.L23
 137              	.L21:
  22:adc_burst.h   **** 		for (k=0;k<6000;k++);	// 
 139              	.LM16:
 140 008c 0030A0E3 		mov	r3, #0
 141 0090 00308DE5 		str	r3, [sp, #0]
 142 0094 00309DE5 		ldr	r3, [sp, #0]
 143 0098 3C209FE5 		ldr	r2, .L26
 144 009c 020053E1 		cmp	r3, r2
 145 00a0 2D00008A 		bhi	.L25
 146              	.L20:
 147 00a4 00309DE5 		ldr	r3, [sp, #0]
 148 00a8 013083E2 		add	r3, r3, #1
 149 00ac 00308DE5 		str	r3, [sp, #0]
 150 00b0 00309DE5 		ldr	r3, [sp, #0]
 151 00b4 020053E1 		cmp	r3, r2
 152 00b8 2700009A 		bls	.L20
 153              	.L25:
 155              	.LM17:
 156 00bc 04309DE5 		ldr	r3, [sp, #4]
 157 00c0 013083E2 		add	r3, r3, #1
 158 00c4 04308DE5 		str	r3, [sp, #4]
 159 00c8 04309DE5 		ldr	r3, [sp, #4]
 160 00cc 000053E1 		cmp	r3, r0
 161 00d0 2100003A 		bcc	.L21
 162              	.L23:
 163 00d4 08D08DE2 		add	sp, sp, #8
 164 00d8 0EF0A0E1 		mov	pc, lr
 165              	.L27:
 166              		.align	2
 167              	.L26:
 168 00dc 6F170000 		.word	5999
 169              	.LBE2:
 177              		.align	2
 179              		.global	uart0_init
 181              	uart0_init:
 183              	.Ltext2:
   1:uart.h        **** 
   2:uart.h        **** #define val 60000000/(16*baud)
   3:uart.h        **** #define baud 9600
   4:uart.h        **** void uart0_init()
   5:uart.h        **** {
 185              	.LM18:
 186              		@ args = 0, pretend = 0, frame = 0
 187              		@ frame_needed = 0, uses_anonymous_args = 0
 188              		@ link register save eliminated.
   6:uart.h        **** 	PINSEL0&=~(1<<1)|(1<<3);
 190              	.LM19:
 191 00e0 48209FE5 		ldr	r2, .L29
 192 00e4 003092E5 		ldr	r3, [r2, #0]
 193 00e8 0230C3E3 		bic	r3, r3, #2
 194 00ec 003082E5 		str	r3, [r2, #0]
   7:uart.h        **** 	PINSEL0|=(1<<0)|(1<<2);
 196              	.LM20:
 197 00f0 003092E5 		ldr	r3, [r2, #0]
 198 00f4 053083E3 		orr	r3, r3, #5
 199 00f8 003082E5 		str	r3, [r2, #0]
   8:uart.h        **** 	
   9:uart.h        **** 	U0LCR|=(1<<7);// enable DLAB bit
 201              	.LM21:
 202 00fc 30109FE5 		ldr	r1, .L29+4
 203 0100 003091E5 		ldr	r3, [r1, #0]
 204 0104 803083E3 		orr	r3, r3, #128
 205 0108 003081E5 		str	r3, [r1, #0]
  10:uart.h        **** 	U0DLL=val&(0xFF);
 207              	.LM22:
 208 010c 24309FE5 		ldr	r3, .L29+8
 209 0110 8620A0E3 		mov	r2, #134
 210 0114 002083E5 		str	r2, [r3, #0]
  11:uart.h        **** 	U0DLM=val>>8;
 212              	.LM23:
 213 0118 1C309FE5 		ldr	r3, .L29+12
 214 011c 0120A0E3 		mov	r2, #1
 215 0120 002083E5 		str	r2, [r3, #0]
  12:uart.h        **** 	U0LCR=0X03;//parity disable,1 stop bit,8 bit data
 217              	.LM24:
 218 0124 0330A0E3 		mov	r3, #3
 220              	.LM25:
 221              		@ lr needed for prologue
 223              	.LM26:
 224 0128 003081E5 		str	r3, [r1, #0]
 225 012c 0EF0A0E1 		mov	pc, lr
 226              	.L30:
 227              		.align	2
 228              	.L29:
 229 0130 00C002E0 		.word	-536690688
 230 0134 0CC000E0 		.word	-536821748
 231 0138 00C000E0 		.word	-536821760
 232 013c 04C000E0 		.word	-536821756
 234              		.align	2
 237              		.global	uart0_tx_char
 239              	uart0_tx_char:
  13:uart.h        **** }
  14:uart.h        **** 
  15:uart.h        **** void uart0_tx_char(unsigned char data)
  16:uart.h        **** {
 241              	.LM27:
 242              		@ args = 0, pretend = 0, frame = 0
 243              		@ frame_needed = 0, uses_anonymous_args = 0
 244              		@ link register save eliminated.
 245              		@ lr needed for prologue
 246 0140 FF0000E2 		and	r0, r0, #255
  17:uart.h        **** 	while(!(U0LSR&(1<<5)));  
 248              	.LM28:
 249              	.L32:
 250 0144 14309FE5 		ldr	r3, .L36
 251 0148 003093E5 		ldr	r3, [r3, #0]
 252 014c 200013E3 		tst	r3, #32
 253 0150 0C309F15 		ldrne	r3, .L36+4
 254 0154 00008315 		strne	r0, [r3, #0]
 255 0158 0EF0A011 		movne	pc, lr
 256 015c 4F0000EA 		b	.L32
 257              	.L37:
 258              		.align	2
 259              	.L36:
 260 0160 14C000E0 		.word	-536821740
 261 0164 00C000E0 		.word	-536821760
  18:uart.h        **** 	U0THR=data;
 263              	.LM29:
 265              		.align	2
 268              		.global	uart0_tx_str
 270              	uart0_tx_str:
  19:uart.h        **** }	
  20:uart.h        **** 
  21:uart.h        **** void uart0_tx_str(unsigned char *ptr) 
  22:uart.h        **** {
 272              	.LM30:
 273              		@ args = 0, pretend = 0, frame = 0
 274              		@ frame_needed = 1, uses_anonymous_args = 0
 275 0168 0DC0A0E1 		mov	ip, sp
 276 016c 10D82DE9 		stmfd	sp!, {r4, fp, ip, lr, pc}
 277 0170 0040A0E1 		mov	r4, r0
  23:uart.h        ****     while(*ptr !='\0')
 279              	.LM31:
 280 0174 0000D0E5 		ldrb	r0, [r0, #0]	@ zero_extendqisi2
 281 0178 000050E3 		cmp	r0, #0
 283              	.LM32:
 284 017c 04B04CE2 		sub	fp, ip, #4
 286              	.LM33:
 287 0180 10A81B09 		ldmeqea	fp, {r4, fp, sp, pc}
 288              	.L42:
  24:uart.h        **** 	{
  25:uart.h        **** 	uart0_tx_char(*ptr);
 290              	.LM34:
 291 0184 FF0000E2 		and	r0, r0, #255
 292 0188 FEFFFFEB 		bl	uart0_tx_char
  26:uart.h        **** 	ptr ++; // uart1_tx_char(*(ptr++));
 294              	.LM35:
 295 018c 0100F4E5 		ldrb	r0, [r4, #1]!	@ zero_extendqisi2
 296 0190 000050E3 		cmp	r0, #0
 297 0194 10A81B09 		ldmeqea	fp, {r4, fp, sp, pc}
 298 0198 5F0000EA 		b	.L42
 300              		.align	2
 303              		.global	uart0_tx_num
 305              	uart0_tx_num:
  27:uart.h        **** 	}
  28:uart.h        **** }
  29:uart.h        **** 
  30:uart.h        **** void uart0_tx_num(unsigned int num ) 
  31:uart.h        **** {
 307              	.LM36:
 308              		@ args = 0, pretend = 0, frame = 8
 309              		@ frame_needed = 1, uses_anonymous_args = 0
 310 019c 0DC0A0E1 		mov	ip, sp
 311 01a0 10D82DE9 		stmfd	sp!, {r4, fp, ip, lr, pc}
 312 01a4 04B04CE2 		sub	fp, ip, #4
 313 01a8 08D04DE2 		sub	sp, sp, #8
  32:uart.h        **** 	unsigned char i,count[5];	
  33:uart.h        **** 	
  34:uart.h        **** 	for(i=1;i<=4;i++)
 315              	.LM37:
 316              	.LBB3:
 317 01ac 0140A0E3 		mov	r4, #1
 318              	.L50:
  35:uart.h        **** 	{
  36:uart.h        **** 	count[i] = num % 10;
 320              	.LM38:
 321 01b0 60309FE5 		ldr	r3, .L59
 322 01b4 931082E0 		umull	r1, r2, r3, r0
 323 01b8 10C04BE2 		sub	ip, fp, #16
 325              	.LM39:
 326 01bc 013084E2 		add	r3, r4, #1
 328              	.LM40:
 329 01c0 A221A0E1 		mov	r2, r2, lsr #3
 330 01c4 04108CE0 		add	r1, ip, r4
 332              	.LM41:
 333 01c8 FF4003E2 		and	r4, r3, #255
 335              	.LM42:
 336 01cc 023182E0 		add	r3, r2, r2, asl #2
 337 01d0 833040E0 		sub	r3, r0, r3, asl #1
 339              	.LM43:
 340 01d4 040054E3 		cmp	r4, #4
 342              	.LM44:
 343 01d8 083041E5 		strb	r3, [r1, #-8]
  37:uart.h        **** 	num = num / 10 ;
 345              	.LM45:
 346 01dc 0200A0E1 		mov	r0, r2
 348              	.LM46:
 349 01e0 6A00009A 		bls	.L50
  38:uart.h        **** 	}
  39:uart.h        **** 	i--;// At the time of exit from the 'for loop',its value is greater than 1 of max value,
 351              	.LM47:
 352 01e4 013044E2 		sub	r3, r4, #1
  40:uart.h        **** 		// in this case it is 6 which is greater than 5;hence to decrease by 1 i--. 
  41:uart.h        **** 	while(i!=0)
 354              	.LM48:
 355 01e8 FF4013E2 		ands	r4, r3, #255
 356 01ec 10A81B09 		ldmeqea	fp, {r4, fp, sp, pc}
 357              	.L54:
  42:uart.h        **** 	{
  43:uart.h        **** 	uart0_tx_char(count[i] + 0x30);
 359              	.LM49:
 360 01f0 10104BE2 		sub	r1, fp, #16
 361 01f4 043081E0 		add	r3, r1, r4
 362 01f8 080053E5 		ldrb	r0, [r3, #-8]	@ zero_extendqisi2
 363 01fc 300080E2 		add	r0, r0, #48
 364 0200 FF0000E2 		and	r0, r0, #255
 365 0204 FEFFFFEB 		bl	uart0_tx_char
  44:uart.h        **** 	i--;
 367              	.LM50:
 368 0208 013044E2 		sub	r3, r4, #1
 369 020c FF4013E2 		ands	r4, r3, #255
 370 0210 10A81B09 		ldmeqea	fp, {r4, fp, sp, pc}
 371 0214 7A0000EA 		b	.L54
 372              	.L60:
 373              		.align	2
 374              	.L59:
 375 0218 CDCCCCCC 		.word	-858993459
 376              	.LBE3:
 382              		.align	2
 384              		.global	uart0_rx_char
 386              	uart0_rx_char:
  45:uart.h        **** 	}
  46:uart.h        **** }
  47:uart.h        **** unsigned char uart0_rx_char(void)
  48:uart.h        **** {
 388              	.LM51:
 389              		@ args = 0, pretend = 0, frame = 0
 390              		@ frame_needed = 0, uses_anonymous_args = 0
 391              		@ link register save eliminated.
 392              		@ lr needed for prologue
  49:uart.h        **** 	while(!(U0LSR&(1<<0)));  
 394              	.LM52:
 395              	.L62:
 396 021c 18309FE5 		ldr	r3, .L66
 397 0220 003093E5 		ldr	r3, [r3, #0]
 398 0224 010013E3 		tst	r3, #1
 399 0228 10309F15 		ldrne	r3, .L66+4
 400 022c 00009315 		ldrne	r0, [r3, #0]
 401 0230 FF000012 		andne	r0, r0, #255
  50:uart.h        **** 	return U0RBR;
  51:uart.h        **** }
 403              	.LM53:
 404 0234 0EF0A011 		movne	pc, lr
 405 0238 850000EA 		b	.L62
 406              	.L67:
 407              		.align	2
 408              	.L66:
 409 023c 14C000E0 		.word	-536821740
 410 0240 00C000E0 		.word	-536821760
 412              		.align	2
 415              		.global	uart0_rx_str
 417              	uart0_rx_str:
  52:uart.h        **** 	
  53:uart.h        **** void uart0_rx_str(unsigned char *ptr)
  54:uart.h        **** {     unsigned int i;
 419              	.LM54:
 420              		@ args = 0, pretend = 0, frame = 0
 421              		@ frame_needed = 1, uses_anonymous_args = 0
 422 0244 0DC0A0E1 		mov	ip, sp
 423 0248 30D82DE9 		stmfd	sp!, {r4, r5, fp, ip, lr, pc}
 424 024c 04B04CE2 		sub	fp, ip, #4
 425 0250 0040A0E1 		mov	r4, r0
  55:uart.h        ****       for(i=0;i<100;i++)
 427              	.LM55:
 428              	.LBB4:
 429 0254 0050A0E3 		mov	r5, #0
 430              	.L74:
  56:uart.h        ****       {
  57:uart.h        ****        *(ptr+i)=uart0_rx_char();
 432              	.LM56:
 433 0258 FEFFFFEB 		bl	uart0_rx_char
 434 025c 0500C4E7 		strb	r0, [r4, r5]
  58:uart.h        ****         if(*(ptr+i)=='\r')
 436              	.LM57:
 437 0260 0530D4E7 		ldrb	r3, [r4, r5]	@ zero_extendqisi2
 438 0264 0D0053E3 		cmp	r3, #13
 439 0268 0030A003 		moveq	r3, #0
 440 026c 0530C407 		streqb	r3, [r4, r5]
  59:uart.h        ****         {
  60:uart.h        ****         *(ptr+i)='\0';
  61:uart.h        **** 		
  62:uart.h        ****         break;
 442              	.LM58:
 443 0270 30A81B09 		ldmeqea	fp, {r4, r5, fp, sp, pc}
 445              	.LM59:
 446 0274 015085E2 		add	r5, r5, #1
 447 0278 630055E3 		cmp	r5, #99
 448 027c 30A81B89 		ldmhiea	fp, {r4, r5, fp, sp, pc}
 449 0280 940000EA 		b	.L74
 450              	.LBE4:
 455              		.align	2
 457              		.global	uart0_rx_num
 459              	uart0_rx_num:
  63:uart.h        **** 		}
  64:uart.h        ****        }      
  65:uart.h        **** }	
  66:uart.h        **** 
  67:uart.h        **** // Receiving number
  68:uart.h        **** //For 1 digit no.
  69:uart.h        **** unsigned char uart0_rx_num(void)
  70:uart.h        **** {
 461              	.LM60:
 462              		@ args = 0, pretend = 0, frame = 0
 463              		@ frame_needed = 1, uses_anonymous_args = 0
 464 0284 0DC0A0E1 		mov	ip, sp
 465 0288 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 466 028c 04B04CE2 		sub	fp, ip, #4
  71:uart.h        **** 	unsigned char num;
  72:uart.h        **** 	while(1)
  73:uart.h        **** 	{
  74:uart.h        **** 	num = uart0_rx_char();
 468              	.LM61:
 469              	.LBB5:
 470 0290 FEFFFFEB 		bl	uart0_rx_char
  75:uart.h        **** 	num = num - 0x30;
 472              	.LM62:
 473 0294 300040E2 		sub	r0, r0, #48
 474 0298 FF0000E2 		and	r0, r0, #255
  76:uart.h        **** 	return num;
  77:uart.h        **** 	}
  78:uart.h        **** }
 476              	.LM63:
 477 029c 00A81BE9 		ldmea	fp, {fp, sp, pc}
 478              	.LBE5:
 481              		.section	.rodata.str1.4,"aMS",%progbits,1
 482              		.align	2
 483              	.LC0:
 484 0000 0A00     		.ascii	"\n\000"
 485 0002 0000     		.align	2
 486              	.LC1:
 487 0004 41766572 		.ascii	"Average value = \000"
 487      61676520 
 487      76616C75 
 487      65203D20 
 487      00
 488 0015 000000   		.text
 489              		.align	2
 491              		.global	main
 493              	main:
 495              	.Ltext3:
   1:adc.c         **** #include"startup.h"
   2:adc.c         **** #include"LPC214x.h"
   3:adc.c         **** #include"adc_burst.h"
   4:adc.c         **** #include"uart.h"
   5:adc.c         **** int main()
   6:adc.c         **** {	unsigned int a=0,c=0,z;
 497              	.LM64:
 498              		@ args = 0, pretend = 0, frame = 0
 499              		@ frame_needed = 1, uses_anonymous_args = 0
 500 02a0 0DC0A0E1 		mov	ip, sp
 501 02a4 70D82DE9 		stmfd	sp!, {r4, r5, r6, fp, ip, lr, pc}
 502 02a8 04B04CE2 		sub	fp, ip, #4
   7:adc.c         **** 	sys_init();//for pll
 504              	.LM65:
 505              	.LBB6:
 506 02ac FEFFFFEB 		bl	sys_init
   8:adc.c         **** 	adc_init();
 508              	.LM66:
 509 02b0 FEFFFFEB 		bl	adc_init
   9:adc.c         **** 	uart0_init();
 511              	.LM67:
 512 02b4 FEFFFFEB 		bl	uart0_init
 514              	.LM68:
 515 02b8 0050A0E3 		mov	r5, #0
  10:adc.c         **** 
  11:adc.c         **** 	//while(1)
  12:adc.c         **** 	//{
  13:adc.c         **** 		for(z=0;z<=9;z++)
 517              	.LM69:
 518 02bc 0560A0E1 		mov	r6, r5
 519              	.L86:
  14:adc.c         **** 		{
  15:adc.c         **** 			a=adc_read();
 521              	.LM70:
 522 02c0 FEFFFFEB 		bl	adc_read
 523 02c4 0040A0E1 		mov	r4, r0
  16:adc.c         **** 			uart0_tx_num(a); 
 525              	.LM71:
 526 02c8 FEFFFFEB 		bl	uart0_tx_num
  17:adc.c         **** 			c=c+a;
  18:adc.c         **** 			delay(2000);
 528              	.LM72:
 529 02cc 7D0EA0E3 		mov	r0, #2000
 530 02d0 FEFFFFEB 		bl	delay
 532              	.LM73:
 533 02d4 016086E2 		add	r6, r6, #1
  19:adc.c         **** 			//uart0_tx_num(c); 
  20:adc.c         **** 			uart0_tx_str("\n");
 535              	.LM74:
 536 02d8 38009FE5 		ldr	r0, .L89
 537 02dc FEFFFFEB 		bl	uart0_tx_str
 539              	.LM75:
 540 02e0 090056E3 		cmp	r6, #9
 542              	.LM76:
 543 02e4 045085E0 		add	r5, r5, r4
 545              	.LM77:
 546 02e8 AE00009A 		bls	.L86
  21:adc.c         **** 		}
  22:adc.c         **** 		
  23:adc.c         **** 		uart0_tx_str("Average value = ");
 548              	.LM78:
 549 02ec 28009FE5 		ldr	r0, .L89+4
 550 02f0 FEFFFFEB 		bl	uart0_tx_str
  24:adc.c         **** 		c=c/10;
 552              	.LM79:
 553 02f4 24309FE5 		ldr	r3, .L89+8
 554 02f8 952383E0 		umull	r2, r3, r5, r3
 555 02fc A351A0E1 		mov	r5, r3, lsr #3
  25:adc.c         **** 		uart0_tx_num(c); 
 557              	.LM80:
 558 0300 0500A0E1 		mov	r0, r5
 559 0304 FEFFFFEB 		bl	uart0_tx_num
  26:adc.c         **** 		uart0_tx_str("\n");
 561              	.LM81:
 562 0308 08009FE5 		ldr	r0, .L89
 563 030c FEFFFFEB 		bl	uart0_tx_str
  27:adc.c         **** 	
  28:adc.c         **** 		
  29:adc.c         **** 	//}
  30:adc.c         **** 	
  31:adc.c         **** }	
 565              	.LM82:
 566              	.LBE6:
 567 0310 0000A0E3 		mov	r0, #0
 568 0314 70A81BE9 		ldmea	fp, {r4, r5, r6, fp, sp, pc}
 569              	.L90:
 570              		.align	2
 571              	.L89:
 572 0318 00000000 		.word	.LC0
 573 031c 04000000 		.word	.LC1
 574 0320 CDCCCCCC 		.word	-858993459
 581              		.text
 583              	.Letext:
 584              		.ident	"GCC: (GNU) 3.3"
DEFINED SYMBOLS
                            *ABS*:00000000 adc.c
     /tmp/cck7Zf0n.s:36     .text:00000000 adc_init
     /tmp/cck7Zf0n.s:79     .text:00000040 adc_read
     /tmp/cck7Zf0n.s:113    .text:0000006c delay
     /tmp/cck7Zf0n.s:181    .text:000000e0 uart0_init
     /tmp/cck7Zf0n.s:239    .text:00000140 uart0_tx_char
     /tmp/cck7Zf0n.s:270    .text:00000168 uart0_tx_str
     /tmp/cck7Zf0n.s:305    .text:0000019c uart0_tx_num
     /tmp/cck7Zf0n.s:386    .text:0000021c uart0_rx_char
     /tmp/cck7Zf0n.s:417    .text:00000244 uart0_rx_str
     /tmp/cck7Zf0n.s:459    .text:00000284 uart0_rx_num
     /tmp/cck7Zf0n.s:493    .text:000002a0 main

UNDEFINED SYMBOLS
sys_init
