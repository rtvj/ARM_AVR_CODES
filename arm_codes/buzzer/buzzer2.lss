
buzzer2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002e8  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ctors        00000000  000002e8  000002e8  00010000  2**0
                  CONTENTS
  2 .dtors        00000000  000002e8  000002e8  00010000  2**0
                  CONTENTS
  3 .data         00000000  40000000  000002e8  00010000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000004  40000000  40000000  00010000  2**2
                  ALLOC
  5 .stack        00000400  40000100  40000100  00010000  2**0
                  CONTENTS
  6 .stab         00000e04  00000000  00000000  00010400  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .stabstr      00001962  00000000  00000000  00011204  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .comment      00000020  00000000  00000000  00012b66  2**0
                  CONTENTS, READONLY
Disassembly of section .text:

00000000 <_boot>:

// Runtime Interrupt Vectors
// -------------------------
Vectors:
        b     _start                    // reset - _start
   0:	ea000012 	b	50 <_mainCRTStartup>
        ldr   pc,_undf                  // undefined - _undf
   4:	e59ff014 	ldr	pc, [pc, #20]	; 20 <_undf>
        ldr   pc,_swi                   // SWI - _swi
   8:	e59ff014 	ldr	pc, [pc, #20]	; 24 <_swi>
        ldr   pc,_pabt                  // program abort - _pabt
   c:	e59ff014 	ldr	pc, [pc, #20]	; 28 <_pabt>
        ldr   pc,_dabt                  // data abort - _dabt
  10:	e59ff014 	ldr	pc, [pc, #20]	; 2c <_dabt>
        nop                             // reserved
  14:	e1a00000 	nop			(mov r0,r0)
        ldr   pc,[pc,#-0xFF0]           // IRQ - read the VIC
  18:	e51ffff0 	ldr	pc, [pc, #-4080]	; fffff030 <_end+0xbfffeb30>
        ldr   pc,_fiq                   // FIQ - _fiq
  1c:	e59ff010 	ldr	pc, [pc, #16]	; 34 <_fiq>

00000020 <_undf>:
  20:	00000038 	andeq	r0, r0, r8, lsr r0

00000024 <_swi>:
  24:	0000003c 	andeq	r0, r0, ip, lsr r0

00000028 <_pabt>:
  28:	00000040 	andeq	r0, r0, r0, asr #32

0000002c <_dabt>:
  2c:	00000044 	andeq	r0, r0, r4, asr #32

00000030 <_irq>:
  30:	00000048 	andeq	r0, r0, r8, asr #32

00000034 <_fiq>:
  34:	0000004c 	andeq	r0, r0, ip, asr #32

00000038 <__undf>:

#if 0
// Use this group for production
_undf:  .word _reset                    // undefined - _reset
_swi:   .word _reset                    // SWI - _reset
_pabt:  .word _reset                    // program abort - _reset
_dabt:  .word _reset                    // data abort - _reset
_irq:   .word _reset                    // IRQ - _reset
_fiq:   .word _reset                    // FIQ - _reset

#else
// Use this group for development
_undf:  .word __undf                    // undefined
_swi:   .word __swi                     // SWI
_pabt:  .word __pabt                    // program abort
_dabt:  .word __dabt                    // data abort
_irq:   .word __irq                     // IRQ
_fiq:   .word __fiq                     // FIQ

__undf: b     .                         // undefined
  38:	eafffffe 	b	38 <__undf>

0000003c <__swi>:
__swi:  b     .                         // SWI
  3c:	eafffffe 	b	3c <__swi>

00000040 <__pabt>:
__pabt: b     .                         // program abort
  40:	eafffffe 	b	40 <F_BIT>

00000044 <__dabt>:
__dabt: b     .                         // data abort
  44:	eafffffe 	b	44 <__dabt>

00000048 <__irq>:
__irq:  b     .                         // IRQ
  48:	eafffffe 	b	48 <__irq>

0000004c <__fiq>:
__fiq:  b     .                         // FIQ
  4c:	eafffffe 	b	4c <__fiq>

00000050 <_mainCRTStartup>:
#endif
        .size _boot, . - _boot
        .endfunc


// Setup the operating mode & stack.
// ---------------------------------
        .global _start, start, _mainCRTStartup
        .func   _start

_start:
start:
_mainCRTStartup:

// Initialize Interrupt System
// - Set stack location for each mode
// - Leave in System Mode with Interrupts Disabled
// -----------------------------------------------
        ldr   r0,=_stack
  50:	e59f00c0 	ldr	r0, [pc, #192]	; 118 <_reset+0x4>
        msr   CPSR_c,#MODE_UND|I_BIT|F_BIT // Undefined Instruction Mode
  54:	e321f0db 	msr	CPSR_c, #219	; 0xdb
        mov   sp,r0
  58:	e1a0d000 	mov	sp, r0
        sub   r0,r0,#UND_STACK_SIZE
  5c:	e2400004 	sub	r0, r0, #4	; 0x4
        msr   CPSR_c,#MODE_ABT|I_BIT|F_BIT // Abort Mode
  60:	e321f0d7 	msr	CPSR_c, #215	; 0xd7
        mov   sp,r0
  64:	e1a0d000 	mov	sp, r0
        sub   r0,r0,#ABT_STACK_SIZE
  68:	e2400004 	sub	r0, r0, #4	; 0x4
        msr   CPSR_c,#MODE_FIQ|I_BIT|F_BIT // FIQ Mode
  6c:	e321f0d1 	msr	CPSR_c, #209	; 0xd1
        mov   sp,r0
  70:	e1a0d000 	mov	sp, r0
        sub   r0,r0,#FIQ_STACK_SIZE
  74:	e2400004 	sub	r0, r0, #4	; 0x4
        msr   CPSR_c,#MODE_IRQ|I_BIT|F_BIT // IRQ Mode
  78:	e321f0d2 	msr	CPSR_c, #210	; 0xd2
        mov   sp,r0
  7c:	e1a0d000 	mov	sp, r0
        sub   r0,r0,#IRQ_STACK_SIZE
  80:	e2400080 	sub	r0, r0, #128	; 0x80
        msr   CPSR_c,#MODE_SVC|I_BIT|F_BIT // Supervisor Mode
  84:	e321f0d3 	msr	CPSR_c, #211	; 0xd3
        mov   sp,r0
  88:	e1a0d000 	mov	sp, r0
        sub   r0,r0,#SVC_STACK_SIZE
  8c:	e2400004 	sub	r0, r0, #4	; 0x4
        msr   CPSR_c,#MODE_SYS|I_BIT|F_BIT // System Mode
  90:	e321f0df 	msr	CPSR_c, #223	; 0xdf
        mov   sp,r0
  94:	e1a0d000 	mov	sp, r0

// Copy initialized data to its execution address in RAM
// -----------------------------------------------------
#ifdef ROM_RUN
        ldr   r1,=_etext                // -> ROM data start
  98:	e59f107c 	ldr	r1, [pc, #124]	; 11c <_reset+0x8>
        ldr   r2,=_data                 // -> data start
  9c:	e59f207c 	ldr	r2, [pc, #124]	; 120 <_reset+0xc>
        ldr   r3,=_edata                // -> end of data
  a0:	e59f307c 	ldr	r3, [pc, #124]	; 124 <_reset+0x10>
1:      cmp   r2,r3                     // check if data to move
  a4:	e1520003 	cmp	r2, r3
        ldrlo r0,[r1],#4                // copy it
  a8:	34910004 	ldrcc	r0, [r1], #4
        strlo r0,[r2],#4
  ac:	34820004 	strcc	r0, [r2], #4
        blo   1b                        // loop until done
  b0:	3afffffb 	bcc	a4 <IRQ_STACK_SIZE+0x24>
#endif
// Clear .bss
// ----------
        mov   r0,#0                     // get a zero
  b4:	e3a00000 	mov	r0, #0	; 0x0
        ldr   r1,=__bss_start           // -> bss start
  b8:	e59f1068 	ldr	r1, [pc, #104]	; 128 <_reset+0x14>
        ldr   r2,=__bss_end__           // -> bss end
  bc:	e59f2068 	ldr	r2, [pc, #104]	; 12c <_reset+0x18>
2:      cmp   r1,r2                     // check if data to clear
  c0:	e1510002 	cmp	r1, r2
        strlo r0,[r1],#4                // clear 4 bytes
  c4:	34810004 	strcc	r0, [r1], #4
        blo   2b                        // loop until done
  c8:	3afffffc 	bcc	c0 <IRQ_STACK_SIZE+0x40>
		
/*
   Call C++ constructors (for objects in "global scope")
   ctor loop added by Martin Thomas 4/2005 
   based on a Anglia Design example-application for ST ARM
*/

		LDR 	r0, =__ctors_start__
  cc:	e59f005c 	ldr	r0, [pc, #92]	; 130 <_reset+0x1c>
		LDR 	r1, =__ctors_end__
  d0:	e59f105c 	ldr	r1, [pc, #92]	; 134 <_reset+0x20>

000000d4 <ctor_loop>:
ctor_loop:
		CMP 	r0, r1
  d4:	e1500001 	cmp	r0, r1
		BEQ 	ctor_end
  d8:	0a000005 	beq	f4 <ctor_end>
		LDR 	r2, [r0], #4
  dc:	e4902004 	ldr	r2, [r0], #4
		STMFD 	sp!, {r0-r1}
  e0:	e92d0003 	stmdb	sp!, {r0, r1}
		MOV 	lr, pc
  e4:	e1a0e00f 	mov	lr, pc
		MOV 	pc, r2
  e8:	e1a0f002 	mov	pc, r2
		LDMFD 	sp!, {r0-r1}
  ec:	e8bd0003 	ldmia	sp!, {r0, r1}
		B 		ctor_loop
  f0:	eafffff7 	b	d4 <ctor_loop>

000000f4 <ctor_end>:
ctor_end:

// Call main program: main(0)
// --------------------------
        mov   r0,#0                     // no arguments (argc = 0)
  f4:	e3a00000 	mov	r0, #0	; 0x0
        mov   r1,r0
  f8:	e1a01000 	mov	r1, r0
        mov   r2,r0
  fc:	e1a02000 	mov	r2, r0
        mov   fp,r0                     // null frame pointer
 100:	e1a0b000 	mov	fp, r0
        mov   r7,r0                     // null frame pointer for thumb
 104:	e1a07000 	mov	r7, r0
        ldr   r10,=main
 108:	e59fa028 	ldr	sl, [pc, #40]	; 138 <_reset+0x24>
        mov   lr,pc
 10c:	e1a0e00f 	mov	lr, pc

/* Enter the C code, use BX instruction so as to never return */
/* use BLX (?) main if you want to use c++ destructors below */

        bx    r10                       // enter main()
 110:	e12fff1a 	bx	sl

00000114 <_reset>:

/* "global object"-dtors are never called and it should not be 
   needed since there is no OS to exit to. */
/* Call destructors */
#		LDR		r0, =__dtors_start__
#		LDR		r1, =__dtors_end__
dtor_loop:
#		CMP		r0, r1
#		BEQ		dtor_end
#		LDR		r2, [r0], #4
#		STMFD	sp!, {r0-r1}
#		MOV		lr, pc
#		MOV		pc, r2
#		LDMFD	sp!, {r0-r1}
#		B		dtor_loop
dtor_end:
   
        .size   _start, . - _start
        .endfunc

        .global _reset, reset, exit, abort
        .func   _reset
_reset:
reset:
exit:
abort:
#if 0
// Disable interrupts, then force a hardware reset by driving P23 low
// -------------------------------------------------------------------
        mrs   r0,cpsr                   // get PSR
        orr   r0,r0,#I_BIT|F_BIT        // disable IRQ and FIQ
        msr   cpsr,r0                   // set up status register

        ldr   r1,=(PS_BASE)             // PS Base Address
        ldr   r0,=(PS_PIO)              // PIO Module
        str   r0,[r1,#PS_PCER_OFF]      // enable its clock
        ldr   r1,=(PIO_BASE)            // PIO Base Address
        ldr   r0,=(1<<23)               // P23
        str   r0,[r1,#PIO_PER_OFF]      // make sure pin is contolled by PIO
        str   r0,[r1,#PIO_CODR_OFF]     // set the pin low
        str   r0,[r1,#PIO_OER_OFF]      // make it an output
#endif
        b     .                         // loop until reset
 114:	eafffffe 	b	114 <_reset>
 118:	40000500 	andmi	r0, r0, r0, lsl #10
 11c:	000002e8 	andeq	r0, r0, r8, ror #5
 120:	40000000 	andmi	r0, r0, r0
 124:	40000000 	andmi	r0, r0, r0
 128:	40000000 	andmi	r0, r0, r0
 12c:	40000004 	andmi	r0, r0, r4
 130:	000002e8 	andeq	r0, r0, r8, ror #5
 134:	000002e8 	andeq	r0, r0, r8, ror #5
 138:	00000220 	andeq	r0, r0, r0, lsr #4

0000013c <IRQ_Routine>:
/*  ----------------------------------------------------  */
void IRQ_Routine(void)
{

    while (1);
 13c:	eafffffe 	b	13c <IRQ_Routine>

00000140 <FIQ_Routine>:
}
void FIQ_Routine(void)
{
    while (1);
 140:	eafffffe 	b	140 <FIQ_Routine>

00000144 <SWI_Routine>:
}
void SWI_Routine(void)
{
    while (1);
 144:	eafffffe 	b	144 <SWI_Routine>

00000148 <UNDEF_Routine>:
}
void UNDEF_Routine(void)
{
    while (1);
 148:	eafffffe 	b	148 <UNDEF_Routine>

0000014c <feed>:
}


/**********************************************************
                      Initialize
**********************************************************/

#define PLOCK 0x400
static void feed(void)
{
    PLLFEED = 0xAA;
 14c:	e59f3010 	ldr	r3, [pc, #16]	; 164 <feed+0x18>
 150:	e3a020aa 	mov	r2, #170	; 0xaa
 154:	e5832000 	str	r2, [r3]
    PLLFEED = 0x55;
 158:	e3a02055 	mov	r2, #85	; 0x55
 15c:	e5832000 	str	r2, [r3]
 160:	e1a0f00e 	mov	pc, lr
 164:	e01fc08c 	ands	ip, pc, ip, lsl #1

00000168 <sys_init>:
} void sys_init(void)
{

    //                              Setting the Phased Lock Loop (PLL)
    //               ----------------------------------
    //
    // LPC-P2148 has a 12.0000 mhz crystal
    //
    // We'd like the LPC2148 to run at 60 mhz (has to be an even multiple of crystal)
    // 
    // According to the Philips LPC2148 manual:   M = cclk / Fosc   where:  M    = PLL multiplier (bits 0-4 of PLLCFG)
    //                                                                                                                                              cclk = 60000000 hz
    //                                                                                                                                              Fosc = 12000000 hz
    //
    // Solving:     M = 60000000 / 12000000 = 5           
    //
    //                      Note: M - 1 must be entered into bits 0-4 of PLLCFG (assign 4 to these bits)
    //
    //
    // The Current Controlled Oscilator (CCO) must operate in the range 156 mhz to 320 mhz
    //
    // According to the Philips LPC2148 manual:     Fcco = cclk * 2 * P    where:   Fcco = CCO frequency 
    //                                                                                                                                                      cclk = 60000000 hz
    //                                                                                                                                                      P = PLL divisor (bits 5-6 of PLLCFG)
    //
    // Solving:     Fcco = 60000000 * 2 * P
    //                      P = 2  (trial value)
    //                      Fcco = 60000000 * 2 * 2
    //                      Fcc0 = 240000000 hz    (good choice for P since it's within the 156 mhz to 320 mhz range)
    //
    // From Table 22 (page 34) of Philips LPC2148 manual    P = 2, PLLCFG bits 5-6 = 1  (assign 1 to these bits)
    //
    // Finally:      PLLCFG = 0  01  00100  =  0x24
    //
    // Final note: to load PLLCFG register, we must use the 0xAA followed 0x55 write sequence to the PLLFEED register
    //             this is done in the short function feed() below
    //

    // Setting Multiplier and Divider values
    PLLCFG = 0x24;
 168:	e59f3068 	ldr	r3, [pc, #104]	; 1d8 <sys_init+0x70>
 16c:	e1a0c00d 	mov	ip, sp
 170:	e3a02024 	mov	r2, #36	; 0x24
 174:	e92dd810 	stmdb	sp!, {r4, fp, ip, lr, pc}
 178:	e5832000 	str	r2, [r3]
 17c:	e24cb004 	sub	fp, ip, #4	; 0x4
    feed();
 180:	ebfffff1 	bl	14c <feed>

    // Enabling the PLL */  
    PLLCON = 0x1;
 184:	e59f3050 	ldr	r3, [pc, #80]	; 1dc <sys_init+0x74>
 188:	e3a02001 	mov	r2, #1	; 0x1
 18c:	e5832000 	str	r2, [r3]
    feed();
 190:	ebffffed 	bl	14c <feed>

    // Wait for the PLL to lock to set frequency
    while (!(PLLSTAT & PLOCK));
 194:	e59f3044 	ldr	r3, [pc, #68]	; 1e0 <sys_init+0x78>
 198:	e5933000 	ldr	r3, [r3]
 19c:	e3130b01 	tst	r3, #1024	; 0x400
 1a0:	0afffffb 	beq	194 <sys_init+0x2c>

    // Connect the PLL as the clock source
    PLLCON = 0x3;
 1a4:	e59f3030 	ldr	r3, [pc, #48]	; 1dc <sys_init+0x74>
 1a8:	e3a04003 	mov	r4, #3	; 0x3
 1ac:	e5834000 	str	r4, [r3]
    feed();
 1b0:	ebffffe5 	bl	14c <feed>

    // Enabling MAM and setting number of clocks used for Flash memory fetch
    MAMTIM = 0x3;
 1b4:	e59f3028 	ldr	r3, [pc, #40]	; 1e4 <sys_init+0x7c>
 1b8:	e5834000 	str	r4, [r3]
    MAMCR = 0x2;
 1bc:	e59f3024 	ldr	r3, [pc, #36]	; 1e8 <sys_init+0x80>
 1c0:	e3a02002 	mov	r2, #2	; 0x2
 1c4:	e5832000 	str	r2, [r3]

    // Setting peripheral Clock (pclk) to System Clock (cclk)
    VPBDIV = 0x1;
 1c8:	e59f301c 	ldr	r3, [pc, #28]	; 1ec <sys_init+0x84>
 1cc:	e3a02001 	mov	r2, #1	; 0x1
 1d0:	e5832000 	str	r2, [r3]
 1d4:	e91ba810 	ldmdb	fp, {r4, fp, sp, pc}
 1d8:	e01fc084 	ands	ip, pc, r4, lsl #1
 1dc:	e01fc080 	ands	ip, pc, r0, lsl #1
 1e0:	e01fc088 	ands	ip, pc, r8, lsl #1
 1e4:	e01fc004 	ands	ip, pc, r4
 1e8:	e01fc000 	ands	ip, pc, r0
 1ec:	e01fc100 	ands	ip, pc, r0, lsl #2

000001f0 <_sbrk_r>:
}





/* "malloc clue function" */

	/**** Locally used variables. ****/
extern char end[];              /*  end is set in the linker command 	*/
				/* file and is the end of statically 	*/
				/* allocated data (thus start of heap).	*/

static char *heap_ptr;		/* Points to current end of the heap.	*/

/************************** _sbrk_r *************************************/
/*  Support function.  Adjusts end of heap to provide more memory to	*/
/* memory allocator. Simple and dumb with no sanity checks.		*/
/*  struct _reent *r	-- re-entrancy structure, used by newlib to 	*/
/*			support multiple threads of operation.		*/
/*  ptrdiff_t nbytes	-- number of bytes to add.			*/
/*  Returns pointer to start of new heap area.				*/
/*  Note:  This implementation is not thread safe (despite taking a	*/
/* _reent structure as a parameter).  					*/
/*  Since _s_r is not used in the current implementation, the following	*/
/* messages must be suppressed.						*/

void * _sbrk_r(
    struct _reent *_s_r, 
    ptrdiff_t nbytes)
{
	char  *base;		/*  errno should be set to  ENOMEM on error	*/

	if (!heap_ptr) {	/*  Initialize if first time through.		*/
 1f0:	e59f2020 	ldr	r2, [pc, #32]	; 218 <_sbrk_r+0x28>
 1f4:	e5923000 	ldr	r3, [r2]
 1f8:	e3530000 	cmp	r3, #0	; 0x0
		heap_ptr = end;
 1fc:	059f3018 	ldreq	r3, [pc, #24]	; 21c <_sbrk_r+0x2c>
 200:	05823000 	streq	r3, [r2]
	}
	base = heap_ptr;	/*  Point to end of heap.			*/
 204:	e5923000 	ldr	r3, [r2]
	heap_ptr += nbytes;	/*  Increase heap.				*/
	
	return base;		/*  Return pointer to start of new heap area.	*/
}
 208:	e1a00003 	mov	r0, r3
 20c:	e0833001 	add	r3, r3, r1
 210:	e5823000 	str	r3, [r2]
 214:	e1a0f00e 	mov	pc, lr
 218:	40000000 	andmi	r0, r0, r0
 21c:	40000500 	andmi	r0, r0, r0, lsl #10

00000220 <main>:
#include"startup.h"
#include"LPC214x.h"

int main()
{	unsigned int i,j;
 220:	e1a0c00d 	mov	ip, sp
 224:	e92dd800 	stmdb	sp!, {fp, ip, lr, pc}
 228:	e24cb004 	sub	fp, ip, #4	; 0x4
	sys_init();//for pll
 22c:	ebffffcd 	bl	168 <sys_init>
	PINSEL0&=~(1<<22);// Pins P1.25-16 are used as GPIO pins.
 230:	e59f209c 	ldr	r2, [pc, #156]	; 2d4 <main+0xb4>
 234:	e5923000 	ldr	r3, [r2]
 238:	e3c33501 	bic	r3, r3, #4194304	; 0x400000
 23c:	e5823000 	str	r3, [r2]
	PINSEL0&=~(1<<23);
 240:	e5923000 	ldr	r3, [r2]
 244:	e3c33502 	bic	r3, r3, #8388608	; 0x800000
 248:	e5823000 	str	r3, [r2]
	IODIR0|=(1<<11);//AS O/P
 24c:	e59f2084 	ldr	r2, [pc, #132]	; 2d8 <main+0xb8>
 250:	e5923000 	ldr	r3, [r2]
 254:	e3833b02 	orr	r3, r3, #2048	; 0x800
 258:	e5823000 	str	r3, [r2]
	while(1)
	{
	IOSET0|=(1<<11);
 25c:	e59f2078 	ldr	r2, [pc, #120]	; 2dc <main+0xbc>
 260:	e5923000 	ldr	r3, [r2]
	for(i=0;i<5500;i++){
 264:	e59f1074 	ldr	r1, [pc, #116]	; 2e0 <main+0xc0>
 268:	e3833b02 	orr	r3, r3, #2048	; 0x800
 26c:	e5823000 	str	r3, [r2]
 270:	e3a02000 	mov	r2, #0	; 0x0
		for(j=0;j<5500;j++);}
 274:	e3a03000 	mov	r3, #0	; 0x0
 278:	e2833001 	add	r3, r3, #1	; 0x1
 27c:	e1530001 	cmp	r3, r1
 280:	9afffffc 	bls	278 <main+0x58>
 284:	e59f1054 	ldr	r1, [pc, #84]	; 2e0 <main+0xc0>
 288:	e2822001 	add	r2, r2, #1	; 0x1
 28c:	e1520001 	cmp	r2, r1
 290:	9afffff7 	bls	274 <main+0x54>
	IOCLR0|=(1<<11);
 294:	e59f2048 	ldr	r2, [pc, #72]	; 2e4 <main+0xc4>
 298:	e5923000 	ldr	r3, [r2]
 29c:	e3833b02 	orr	r3, r3, #2048	; 0x800
 2a0:	e5823000 	str	r3, [r2]
	for(i=0;i<5500;i++){
 2a4:	e1a03001 	mov	r3, r1
 2a8:	e3a02000 	mov	r2, #0	; 0x0
		for(j=0;j<5500;j++);}	
 2ac:	e1a01003 	mov	r1, r3
 2b0:	e3a03000 	mov	r3, #0	; 0x0
 2b4:	e2833001 	add	r3, r3, #1	; 0x1
 2b8:	e1530001 	cmp	r3, r1
 2bc:	9afffffc 	bls	2b4 <main+0x94>
 2c0:	e59f3018 	ldr	r3, [pc, #24]	; 2e0 <main+0xc0>
 2c4:	e2822001 	add	r2, r2, #1	; 0x1
 2c8:	e1520003 	cmp	r2, r3
 2cc:	9afffff6 	bls	2ac <main+0x8c>
 2d0:	eaffffe1 	b	25c <main+0x3c>
 2d4:	e002c000 	and	ip, r2, r0
 2d8:	e0028008 	and	r8, r2, r8
 2dc:	e0028004 	and	r8, r2, r4
 2e0:	0000157b 	andeq	r1, r0, fp, ror r5
 2e4:	e002800c 	and	r8, r2, ip
