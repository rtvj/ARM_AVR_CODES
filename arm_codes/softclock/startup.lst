   1              		.file	"startup.c"
   3              		.text
   4              	.Ltext0:
  31              		.align	2
  33              		.global	IRQ_Routine
  35              	IRQ_Routine:
   1:startup.c     **** /*
   2:startup.c     **** 	Initialisation functions for exception handlers, PLL and MAM
   3:startup.c     **** 	
   4:startup.c     **** 	Partially copied from Jim Lynch's tutorial
   5:startup.c     **** */
   6:startup.c     **** 
   7:startup.c     **** /**********************************************************
   8:startup.c     ****                   Header files
   9:startup.c     ****  **********************************************************/
  10:startup.c     **** 
  11:startup.c     **** #include "startup.h"
  12:startup.c     **** 
  13:startup.c     **** void IRQ_Routine(void) __attribute__ ((interrupt("IRQ")));
  14:startup.c     **** void FIQ_Routine(void) __attribute__ ((interrupt("FIQ")));
  15:startup.c     **** void SWI_Routine(void) __attribute__ ((interrupt("SWI")));
  16:startup.c     **** void UNDEF_Routine(void) __attribute__ ((interrupt("UNDEF")));
  17:startup.c     **** 
  18:startup.c     **** /*  Stubs for various interrupts (may be replaced later)  */
  19:startup.c     **** /*  ----------------------------------------------------  */
  20:startup.c     **** void IRQ_Routine(void)
  21:startup.c     **** {
  37              	.LM1:
  38              		@ Interrupt Service Routine.
  39              		@ args = 0, pretend = 0, frame = 0
  40              		@ frame_needed = 0, uses_anonymous_args = 0
  41              		@ link register save eliminated.
  42              		@ lr needed for prologue
  22:startup.c     **** 
  23:startup.c     ****     while (1);
  44              	.LM2:
  45              	.L5:
  46 0000 FEFFFFEA 		b	.L5
  48              		.align	2
  50              		.global	FIQ_Routine
  52              	FIQ_Routine:
  24:startup.c     **** }
  25:startup.c     **** void FIQ_Routine(void)
  26:startup.c     **** {
  54              	.LM3:
  55              		@ Fast Interrupt Service Routine.
  56              		@ args = 0, pretend = 0, frame = 0
  57              		@ frame_needed = 0, uses_anonymous_args = 0
  58              		@ link register save eliminated.
  59              		@ lr needed for prologue
  27:startup.c     ****     while (1);
  61              	.LM4:
  62              	.L11:
  63 0004 FFFFFFEA 		b	.L11
  65              		.align	2
  67              		.global	SWI_Routine
  69              	SWI_Routine:
  28:startup.c     **** }
  29:startup.c     **** void SWI_Routine(void)
  30:startup.c     **** {
  71              	.LM5:
  72              		@ ARM Exception Handler.
  73              		@ args = 0, pretend = 0, frame = 0
  74              		@ frame_needed = 0, uses_anonymous_args = 0
  75              		@ link register save eliminated.
  76              		@ lr needed for prologue
  31:startup.c     ****     while (1);
  78              	.LM6:
  79              	.L17:
  80 0008 000000EA 		b	.L17
  82              		.align	2
  84              		.global	UNDEF_Routine
  86              	UNDEF_Routine:
  32:startup.c     **** }
  33:startup.c     **** void UNDEF_Routine(void)
  34:startup.c     **** {
  88              	.LM7:
  89              		@ ARM Exception Handler.
  90              		@ args = 0, pretend = 0, frame = 0
  91              		@ frame_needed = 0, uses_anonymous_args = 0
  92              		@ link register save eliminated.
  93              		@ lr needed for prologue
  35:startup.c     ****     while (1);
  95              	.LM8:
  96              	.L23:
  97 000c 010000EA 		b	.L23
  99              		.align	2
 102              	feed:
  36:startup.c     **** }
  37:startup.c     **** 
  38:startup.c     **** 
  39:startup.c     **** /**********************************************************
  40:startup.c     ****                       Initialize
  41:startup.c     **** **********************************************************/
  42:startup.c     **** 
  43:startup.c     **** #define PLOCK 0x400
  44:startup.c     **** static void feed(void)
  45:startup.c     **** {
 104              	.LM9:
 105              		@ args = 0, pretend = 0, frame = 0
 106              		@ frame_needed = 0, uses_anonymous_args = 0
 107              		@ link register save eliminated.
  46:startup.c     ****     PLLFEED = 0xAA;
 109              	.LM10:
 110 0010 10309FE5 		ldr	r3, .L26
 111 0014 AA20A0E3 		mov	r2, #170
 112 0018 002083E5 		str	r2, [r3, #0]
  47:startup.c     ****     PLLFEED = 0x55;
 114              	.LM11:
 115 001c 5520A0E3 		mov	r2, #85
 117              	.LM12:
 118              		@ lr needed for prologue
 120              	.LM13:
 121 0020 002083E5 		str	r2, [r3, #0]
 122 0024 0EF0A0E1 		mov	pc, lr
 123              	.L27:
 124              		.align	2
 125              	.L26:
 126 0028 8CC01FE0 		.word	-534790004
 128              		.align	2
 130              		.global	sys_init
 132              	sys_init:
  48:startup.c     **** } void sys_init(void)
  49:startup.c     **** {
 134              	.LM14:
 135              		@ args = 0, pretend = 0, frame = 0
 136              		@ frame_needed = 1, uses_anonymous_args = 0
  50:startup.c     **** 
  51:startup.c     ****     //                              Setting the Phased Lock Loop (PLL)
  52:startup.c     ****     //               ----------------------------------
  53:startup.c     ****     //
  54:startup.c     ****     // LPC-P2148 has a 12.0000 mhz crystal
  55:startup.c     ****     //
  56:startup.c     ****     // We'd like the LPC2148 to run at 60 mhz (has to be an even multiple of crystal)
  57:startup.c     ****     // 
  58:startup.c     ****     // According to the Philips LPC2148 manual:   M = cclk / Fosc   where:  M    = PLL multiplier (
  59:startup.c     ****     //                                                                                             
  60:startup.c     ****     //                                                                                             
  61:startup.c     ****     //
  62:startup.c     ****     // Solving:     M = 60000000 / 12000000 = 5           
  63:startup.c     ****     //
  64:startup.c     ****     //                      Note: M - 1 must be entered into bits 0-4 of PLLCFG (assign 4 to these 
  65:startup.c     ****     //
  66:startup.c     ****     //
  67:startup.c     ****     // The Current Controlled Oscilator (CCO) must operate in the range 156 mhz to 320 mhz
  68:startup.c     ****     //
  69:startup.c     ****     // According to the Philips LPC2148 manual:     Fcco = cclk * 2 * P    where:   Fcco = CCO freq
  70:startup.c     ****     //                                                                                             
  71:startup.c     ****     //                                                                                             
  72:startup.c     ****     //
  73:startup.c     ****     // Solving:     Fcco = 60000000 * 2 * P
  74:startup.c     ****     //                      P = 2  (trial value)
  75:startup.c     ****     //                      Fcco = 60000000 * 2 * 2
  76:startup.c     ****     //                      Fcc0 = 240000000 hz    (good choice for P since it's within the 156 mhz
  77:startup.c     ****     //
  78:startup.c     ****     // From Table 22 (page 34) of Philips LPC2148 manual    P = 2, PLLCFG bits 5-6 = 1  (assign 1 t
  79:startup.c     ****     //
  80:startup.c     ****     // Finally:      PLLCFG = 0  01  00100  =  0x24
  81:startup.c     ****     //
  82:startup.c     ****     // Final note: to load PLLCFG register, we must use the 0xAA followed 0x55 write sequence to th
  83:startup.c     ****     //             this is done in the short function feed() below
  84:startup.c     ****     //
  85:startup.c     **** 
  86:startup.c     ****     // Setting Multiplier and Divider values
  87:startup.c     ****     PLLCFG = 0x24;
 138              	.LM15:
 139 002c 68309FE5 		ldr	r3, .L33
 141              	.LM16:
 142 0030 0DC0A0E1 		mov	ip, sp
 144              	.LM17:
 145 0034 2420A0E3 		mov	r2, #36
 147              	.LM18:
 148 0038 10D82DE9 		stmfd	sp!, {r4, fp, ip, lr, pc}
 150              	.LM19:
 151 003c 002083E5 		str	r2, [r3, #0]
 153              	.LM20:
 154 0040 04B04CE2 		sub	fp, ip, #4
  88:startup.c     ****     feed();
 156              	.LM21:
 157 0044 020000EB 		bl	feed
  89:startup.c     **** 
  90:startup.c     ****     // Enabling the PLL */  
  91:startup.c     ****     PLLCON = 0x1;
 159              	.LM22:
 160 0048 50309FE5 		ldr	r3, .L33+4
 161 004c 0120A0E3 		mov	r2, #1
 162 0050 002083E5 		str	r2, [r3, #0]
  92:startup.c     ****     feed();
 164              	.LM23:
 165 0054 020000EB 		bl	feed
  93:startup.c     **** 
  94:startup.c     ****     // Wait for the PLL to lock to set frequency
  95:startup.c     ****     while (!(PLLSTAT & PLOCK));
 167              	.LM24:
 168              	.L29:
 169 0058 44309FE5 		ldr	r3, .L33+8
 170 005c 003093E5 		ldr	r3, [r3, #0]
 171 0060 010B13E3 		tst	r3, #1024
 172 0064 1400000A 		beq	.L29
  96:startup.c     **** 
  97:startup.c     ****     // Connect the PLL as the clock source
  98:startup.c     ****     PLLCON = 0x3;
 174              	.LM25:
 175 0068 30309FE5 		ldr	r3, .L33+4
 176 006c 0340A0E3 		mov	r4, #3
 177 0070 004083E5 		str	r4, [r3, #0]
  99:startup.c     ****     feed();
 179              	.LM26:
 180 0074 020000EB 		bl	feed
 100:startup.c     **** 
 101:startup.c     ****     // Enabling MAM and setting number of clocks used for Flash memory fetch
 102:startup.c     ****     MAMTIM = 0x3;
 182              	.LM27:
 183 0078 28309FE5 		ldr	r3, .L33+12
 184 007c 004083E5 		str	r4, [r3, #0]
 103:startup.c     ****     MAMCR = 0x2;
 186              	.LM28:
 187 0080 24309FE5 		ldr	r3, .L33+16
 188 0084 0220A0E3 		mov	r2, #2
 189 0088 002083E5 		str	r2, [r3, #0]
 104:startup.c     **** 
 105:startup.c     ****     // Setting peripheral Clock (pclk) to System Clock (cclk)
 106:startup.c     ****     VPBDIV = 0x1;
 191              	.LM29:
 192 008c 1C309FE5 		ldr	r3, .L33+20
 193 0090 0120A0E3 		mov	r2, #1
 194 0094 002083E5 		str	r2, [r3, #0]
 195 0098 10A81BE9 		ldmea	fp, {r4, fp, sp, pc}
 196              	.L34:
 197              		.align	2
 198              	.L33:
 199 009c 84C01FE0 		.word	-534790012
 200 00a0 80C01FE0 		.word	-534790016
 201 00a4 88C01FE0 		.word	-534790008
 202 00a8 04C01FE0 		.word	-534790140
 203 00ac 00C01FE0 		.word	-534790144
 204 00b0 00C11FE0 		.word	-534789888
 206              		.text
 208              	.Letext:
 209              		.ident	"GCC: (GNU) 3.3"
DEFINED SYMBOLS
                            *ABS*:00000000 startup.c
     /tmp/ccc5mJg1.s:35     .text:00000000 IRQ_Routine
     /tmp/ccc5mJg1.s:52     .text:00000004 FIQ_Routine
     /tmp/ccc5mJg1.s:69     .text:00000008 SWI_Routine
     /tmp/ccc5mJg1.s:86     .text:0000000c UNDEF_Routine
     /tmp/ccc5mJg1.s:102    .text:00000010 feed
     /tmp/ccc5mJg1.s:132    .text:0000002c sys_init

NO UNDEFINED SYMBOLS
