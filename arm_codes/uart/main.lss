
main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000420  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ctors        00000000  00000420  00000420  00010000  2**0
                  CONTENTS
  2 .dtors        00000000  00000420  00000420  00010000  2**0
                  CONTENTS
  3 .data         00000000  40000000  00000420  00010000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000004  40000000  40000000  00010000  2**2
                  ALLOC
  5 .stack        00000400  40000100  40000100  00010000  2**0
                  CONTENTS
  6 .stab         000010e0  00000000  00000000  00010400  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .stabstr      00001a87  00000000  00000000  000114e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .comment      00000020  00000000  00000000  00012f67  2**0
                  CONTENTS, READONLY
Disassembly of section .text:

00000000 <_boot>:

// Runtime Interrupt Vectors
// -------------------------
Vectors:
        b     _start                    // reset - _start
   0:	ea000012 	b	50 <_mainCRTStartup>
        ldr   pc,_undf                  // undefined - _undf
   4:	e59ff014 	ldr	pc, [pc, #20]	; 20 <_undf>
        ldr   pc,_swi                   // SWI - _swi
   8:	e59ff014 	ldr	pc, [pc, #20]	; 24 <_swi>
        ldr   pc,_pabt                  // program abort - _pabt
   c:	e59ff014 	ldr	pc, [pc, #20]	; 28 <_pabt>
        ldr   pc,_dabt                  // data abort - _dabt
  10:	e59ff014 	ldr	pc, [pc, #20]	; 2c <_dabt>
        nop                             // reserved
  14:	e1a00000 	nop			(mov r0,r0)
        ldr   pc,[pc,#-0xFF0]           // IRQ - read the VIC
  18:	e51ffff0 	ldr	pc, [pc, #-4080]	; fffff030 <_end+0xbfffeb30>
        ldr   pc,_fiq                   // FIQ - _fiq
  1c:	e59ff010 	ldr	pc, [pc, #16]	; 34 <_fiq>

00000020 <_undf>:
  20:	00000038 	andeq	r0, r0, r8, lsr r0

00000024 <_swi>:
  24:	0000003c 	andeq	r0, r0, ip, lsr r0

00000028 <_pabt>:
  28:	00000040 	andeq	r0, r0, r0, asr #32

0000002c <_dabt>:
  2c:	00000044 	andeq	r0, r0, r4, asr #32

00000030 <_irq>:
  30:	00000048 	andeq	r0, r0, r8, asr #32

00000034 <_fiq>:
  34:	0000004c 	andeq	r0, r0, ip, asr #32

00000038 <__undf>:

#if 0
// Use this group for production
_undf:  .word _reset                    // undefined - _reset
_swi:   .word _reset                    // SWI - _reset
_pabt:  .word _reset                    // program abort - _reset
_dabt:  .word _reset                    // data abort - _reset
_irq:   .word _reset                    // IRQ - _reset
_fiq:   .word _reset                    // FIQ - _reset

#else
// Use this group for development
_undf:  .word __undf                    // undefined
_swi:   .word __swi                     // SWI
_pabt:  .word __pabt                    // program abort
_dabt:  .word __dabt                    // data abort
_irq:   .word __irq                     // IRQ
_fiq:   .word __fiq                     // FIQ

__undf: b     .                         // undefined
  38:	eafffffe 	b	38 <__undf>

0000003c <__swi>:
__swi:  b     .                         // SWI
  3c:	eafffffe 	b	3c <__swi>

00000040 <__pabt>:
__pabt: b     .                         // program abort
  40:	eafffffe 	b	40 <F_BIT>

00000044 <__dabt>:
__dabt: b     .                         // data abort
  44:	eafffffe 	b	44 <__dabt>

00000048 <__irq>:
__irq:  b     .                         // IRQ
  48:	eafffffe 	b	48 <__irq>

0000004c <__fiq>:
__fiq:  b     .                         // FIQ
  4c:	eafffffe 	b	4c <__fiq>

00000050 <_mainCRTStartup>:
#endif
        .size _boot, . - _boot
        .endfunc


// Setup the operating mode & stack.
// ---------------------------------
        .global _start, start, _mainCRTStartup
        .func   _start

_start:
start:
_mainCRTStartup:

// Initialize Interrupt System
// - Set stack location for each mode
// - Leave in System Mode with Interrupts Disabled
// -----------------------------------------------
        ldr   r0,=_stack
  50:	e59f00c0 	ldr	r0, [pc, #192]	; 118 <_reset+0x4>
        msr   CPSR_c,#MODE_UND|I_BIT|F_BIT // Undefined Instruction Mode
  54:	e321f0db 	msr	CPSR_c, #219	; 0xdb
        mov   sp,r0
  58:	e1a0d000 	mov	sp, r0
        sub   r0,r0,#UND_STACK_SIZE
  5c:	e2400004 	sub	r0, r0, #4	; 0x4
        msr   CPSR_c,#MODE_ABT|I_BIT|F_BIT // Abort Mode
  60:	e321f0d7 	msr	CPSR_c, #215	; 0xd7
        mov   sp,r0
  64:	e1a0d000 	mov	sp, r0
        sub   r0,r0,#ABT_STACK_SIZE
  68:	e2400004 	sub	r0, r0, #4	; 0x4
        msr   CPSR_c,#MODE_FIQ|I_BIT|F_BIT // FIQ Mode
  6c:	e321f0d1 	msr	CPSR_c, #209	; 0xd1
        mov   sp,r0
  70:	e1a0d000 	mov	sp, r0
        sub   r0,r0,#FIQ_STACK_SIZE
  74:	e2400004 	sub	r0, r0, #4	; 0x4
        msr   CPSR_c,#MODE_IRQ|I_BIT|F_BIT // IRQ Mode
  78:	e321f0d2 	msr	CPSR_c, #210	; 0xd2
        mov   sp,r0
  7c:	e1a0d000 	mov	sp, r0
        sub   r0,r0,#IRQ_STACK_SIZE
  80:	e2400080 	sub	r0, r0, #128	; 0x80
        msr   CPSR_c,#MODE_SVC|I_BIT|F_BIT // Supervisor Mode
  84:	e321f0d3 	msr	CPSR_c, #211	; 0xd3
        mov   sp,r0
  88:	e1a0d000 	mov	sp, r0
        sub   r0,r0,#SVC_STACK_SIZE
  8c:	e2400004 	sub	r0, r0, #4	; 0x4
        msr   CPSR_c,#MODE_SYS|I_BIT|F_BIT // System Mode
  90:	e321f0df 	msr	CPSR_c, #223	; 0xdf
        mov   sp,r0
  94:	e1a0d000 	mov	sp, r0

// Copy initialized data to its execution address in RAM
// -----------------------------------------------------
#ifdef ROM_RUN
        ldr   r1,=_etext                // -> ROM data start
  98:	e59f107c 	ldr	r1, [pc, #124]	; 11c <_reset+0x8>
        ldr   r2,=_data                 // -> data start
  9c:	e59f207c 	ldr	r2, [pc, #124]	; 120 <_reset+0xc>
        ldr   r3,=_edata                // -> end of data
  a0:	e59f307c 	ldr	r3, [pc, #124]	; 124 <_reset+0x10>
1:      cmp   r2,r3                     // check if data to move
  a4:	e1520003 	cmp	r2, r3
        ldrlo r0,[r1],#4                // copy it
  a8:	34910004 	ldrcc	r0, [r1], #4
        strlo r0,[r2],#4
  ac:	34820004 	strcc	r0, [r2], #4
        blo   1b                        // loop until done
  b0:	3afffffb 	bcc	a4 <IRQ_STACK_SIZE+0x24>
#endif
// Clear .bss
// ----------
        mov   r0,#0                     // get a zero
  b4:	e3a00000 	mov	r0, #0	; 0x0
        ldr   r1,=__bss_start           // -> bss start
  b8:	e59f1068 	ldr	r1, [pc, #104]	; 128 <_reset+0x14>
        ldr   r2,=__bss_end__           // -> bss end
  bc:	e59f2068 	ldr	r2, [pc, #104]	; 12c <_reset+0x18>
2:      cmp   r1,r2                     // check if data to clear
  c0:	e1510002 	cmp	r1, r2
        strlo r0,[r1],#4                // clear 4 bytes
  c4:	34810004 	strcc	r0, [r1], #4
        blo   2b                        // loop until done
  c8:	3afffffc 	bcc	c0 <IRQ_STACK_SIZE+0x40>
		
/*
   Call C++ constructors (for objects in "global scope")
   ctor loop added by Martin Thomas 4/2005 
   based on a Anglia Design example-application for ST ARM
*/

		LDR 	r0, =__ctors_start__
  cc:	e59f005c 	ldr	r0, [pc, #92]	; 130 <_reset+0x1c>
		LDR 	r1, =__ctors_end__
  d0:	e59f105c 	ldr	r1, [pc, #92]	; 134 <_reset+0x20>

000000d4 <ctor_loop>:
ctor_loop:
		CMP 	r0, r1
  d4:	e1500001 	cmp	r0, r1
		BEQ 	ctor_end
  d8:	0a000005 	beq	f4 <ctor_end>
		LDR 	r2, [r0], #4
  dc:	e4902004 	ldr	r2, [r0], #4
		STMFD 	sp!, {r0-r1}
  e0:	e92d0003 	stmdb	sp!, {r0, r1}
		MOV 	lr, pc
  e4:	e1a0e00f 	mov	lr, pc
		MOV 	pc, r2
  e8:	e1a0f002 	mov	pc, r2
		LDMFD 	sp!, {r0-r1}
  ec:	e8bd0003 	ldmia	sp!, {r0, r1}
		B 		ctor_loop
  f0:	eafffff7 	b	d4 <ctor_loop>

000000f4 <ctor_end>:
ctor_end:

// Call main program: main(0)
// --------------------------
        mov   r0,#0                     // no arguments (argc = 0)
  f4:	e3a00000 	mov	r0, #0	; 0x0
        mov   r1,r0
  f8:	e1a01000 	mov	r1, r0
        mov   r2,r0
  fc:	e1a02000 	mov	r2, r0
        mov   fp,r0                     // null frame pointer
 100:	e1a0b000 	mov	fp, r0
        mov   r7,r0                     // null frame pointer for thumb
 104:	e1a07000 	mov	r7, r0
        ldr   r10,=main
 108:	e59fa028 	ldr	sl, [pc, #40]	; 138 <_reset+0x24>
        mov   lr,pc
 10c:	e1a0e00f 	mov	lr, pc

/* Enter the C code, use BX instruction so as to never return */
/* use BLX (?) main if you want to use c++ destructors below */

        bx    r10                       // enter main()
 110:	e12fff1a 	bx	sl

00000114 <_reset>:

/* "global object"-dtors are never called and it should not be 
   needed since there is no OS to exit to. */
/* Call destructors */
#		LDR		r0, =__dtors_start__
#		LDR		r1, =__dtors_end__
dtor_loop:
#		CMP		r0, r1
#		BEQ		dtor_end
#		LDR		r2, [r0], #4
#		STMFD	sp!, {r0-r1}
#		MOV		lr, pc
#		MOV		pc, r2
#		LDMFD	sp!, {r0-r1}
#		B		dtor_loop
dtor_end:
   
        .size   _start, . - _start
        .endfunc

        .global _reset, reset, exit, abort
        .func   _reset
_reset:
reset:
exit:
abort:
#if 0
// Disable interrupts, then force a hardware reset by driving P23 low
// -------------------------------------------------------------------
        mrs   r0,cpsr                   // get PSR
        orr   r0,r0,#I_BIT|F_BIT        // disable IRQ and FIQ
        msr   cpsr,r0                   // set up status register

        ldr   r1,=(PS_BASE)             // PS Base Address
        ldr   r0,=(PS_PIO)              // PIO Module
        str   r0,[r1,#PS_PCER_OFF]      // enable its clock
        ldr   r1,=(PIO_BASE)            // PIO Base Address
        ldr   r0,=(1<<23)               // P23
        str   r0,[r1,#PIO_PER_OFF]      // make sure pin is contolled by PIO
        str   r0,[r1,#PIO_CODR_OFF]     // set the pin low
        str   r0,[r1,#PIO_OER_OFF]      // make it an output
#endif
        b     .                         // loop until reset
 114:	eafffffe 	b	114 <_reset>
 118:	40000500 	andmi	r0, r0, r0, lsl #10
 11c:	00000420 	andeq	r0, r0, r0, lsr #8
 120:	40000000 	andmi	r0, r0, r0
 124:	40000000 	andmi	r0, r0, r0
 128:	40000000 	andmi	r0, r0, r0
 12c:	40000004 	andmi	r0, r0, r4
 130:	00000420 	andeq	r0, r0, r0, lsr #8
 134:	00000420 	andeq	r0, r0, r0, lsr #8
 138:	000003e4 	andeq	r0, r0, r4, ror #7

0000013c <IRQ_Routine>:
/*  ----------------------------------------------------  */
void IRQ_Routine(void)
{

    while (1);
 13c:	eafffffe 	b	13c <IRQ_Routine>

00000140 <FIQ_Routine>:
}
void FIQ_Routine(void)
{
    while (1);
 140:	eafffffe 	b	140 <FIQ_Routine>

00000144 <SWI_Routine>:
}
void SWI_Routine(void)
{
    while (1);
 144:	eafffffe 	b	144 <SWI_Routine>

00000148 <UNDEF_Routine>:
}
void UNDEF_Routine(void)
{
    while (1);
 148:	eafffffe 	b	148 <UNDEF_Routine>

0000014c <feed>:
}


/**********************************************************
                      Initialize
**********************************************************/

#define PLOCK 0x400
static void feed(void)
{
    PLLFEED = 0xAA;
 14c:	e59f3010 	ldr	r3, [pc, #16]	; 164 <feed+0x18>
 150:	e3a020aa 	mov	r2, #170	; 0xaa
 154:	e5832000 	str	r2, [r3]
    PLLFEED = 0x55;
 158:	e3a02055 	mov	r2, #85	; 0x55
 15c:	e5832000 	str	r2, [r3]
 160:	e1a0f00e 	mov	pc, lr
 164:	e01fc08c 	ands	ip, pc, ip, lsl #1

00000168 <sys_init>:
} void sys_init(void)
{

    //                              Setting the Phased Lock Loop (PLL)
    //               ----------------------------------
    //
    // LPC-P2148 has a 12.0000 mhz crystal
    //
    // We'd like the LPC2148 to run at 60 mhz (has to be an even multiple of crystal)
    // 
    // According to the Philips LPC2148 manual:   M = cclk / Fosc   where:  M    = PLL multiplier (bits 0-4 of PLLCFG)
    //                                                                                                                                              cclk = 60000000 hz
    //                                                                                                                                              Fosc = 12000000 hz
    //
    // Solving:     M = 60000000 / 12000000 = 5           
    //
    //                      Note: M - 1 must be entered into bits 0-4 of PLLCFG (assign 4 to these bits)
    //
    //
    // The Current Controlled Oscilator (CCO) must operate in the range 156 mhz to 320 mhz
    //
    // According to the Philips LPC2148 manual:     Fcco = cclk * 2 * P    where:   Fcco = CCO frequency 
    //                                                                                                                                                      cclk = 60000000 hz
    //                                                                                                                                                      P = PLL divisor (bits 5-6 of PLLCFG)
    //
    // Solving:     Fcco = 60000000 * 2 * P
    //                      P = 2  (trial value)
    //                      Fcco = 60000000 * 2 * 2
    //                      Fcc0 = 240000000 hz    (good choice for P since it's within the 156 mhz to 320 mhz range)
    //
    // From Table 22 (page 34) of Philips LPC2148 manual    P = 2, PLLCFG bits 5-6 = 1  (assign 1 to these bits)
    //
    // Finally:      PLLCFG = 0  01  00100  =  0x24
    //
    // Final note: to load PLLCFG register, we must use the 0xAA followed 0x55 write sequence to the PLLFEED register
    //             this is done in the short function feed() below
    //

    // Setting Multiplier and Divider values
    PLLCFG = 0x24;
 168:	e59f3068 	ldr	r3, [pc, #104]	; 1d8 <sys_init+0x70>
 16c:	e1a0c00d 	mov	ip, sp
 170:	e3a02024 	mov	r2, #36	; 0x24
 174:	e92dd810 	stmdb	sp!, {r4, fp, ip, lr, pc}
 178:	e5832000 	str	r2, [r3]
 17c:	e24cb004 	sub	fp, ip, #4	; 0x4
    feed();
 180:	ebfffff1 	bl	14c <feed>

    // Enabling the PLL */  
    PLLCON = 0x1;
 184:	e59f3050 	ldr	r3, [pc, #80]	; 1dc <sys_init+0x74>
 188:	e3a02001 	mov	r2, #1	; 0x1
 18c:	e5832000 	str	r2, [r3]
    feed();
 190:	ebffffed 	bl	14c <feed>

    // Wait for the PLL to lock to set frequency
    while (!(PLLSTAT & PLOCK));
 194:	e59f3044 	ldr	r3, [pc, #68]	; 1e0 <sys_init+0x78>
 198:	e5933000 	ldr	r3, [r3]
 19c:	e3130b01 	tst	r3, #1024	; 0x400
 1a0:	0afffffb 	beq	194 <sys_init+0x2c>

    // Connect the PLL as the clock source
    PLLCON = 0x3;
 1a4:	e59f3030 	ldr	r3, [pc, #48]	; 1dc <sys_init+0x74>
 1a8:	e3a04003 	mov	r4, #3	; 0x3
 1ac:	e5834000 	str	r4, [r3]
    feed();
 1b0:	ebffffe5 	bl	14c <feed>

    // Enabling MAM and setting number of clocks used for Flash memory fetch
    MAMTIM = 0x3;
 1b4:	e59f3028 	ldr	r3, [pc, #40]	; 1e4 <sys_init+0x7c>
 1b8:	e5834000 	str	r4, [r3]
    MAMCR = 0x2;
 1bc:	e59f3024 	ldr	r3, [pc, #36]	; 1e8 <sys_init+0x80>
 1c0:	e3a02002 	mov	r2, #2	; 0x2
 1c4:	e5832000 	str	r2, [r3]

    // Setting peripheral Clock (pclk) to System Clock (cclk)
    VPBDIV = 0x1;
 1c8:	e59f301c 	ldr	r3, [pc, #28]	; 1ec <sys_init+0x84>
 1cc:	e3a02001 	mov	r2, #1	; 0x1
 1d0:	e5832000 	str	r2, [r3]
 1d4:	e91ba810 	ldmdb	fp, {r4, fp, sp, pc}
 1d8:	e01fc084 	ands	ip, pc, r4, lsl #1
 1dc:	e01fc080 	ands	ip, pc, r0, lsl #1
 1e0:	e01fc088 	ands	ip, pc, r8, lsl #1
 1e4:	e01fc004 	ands	ip, pc, r4
 1e8:	e01fc000 	ands	ip, pc, r0
 1ec:	e01fc100 	ands	ip, pc, r0, lsl #2

000001f0 <_sbrk_r>:
}





/* "malloc clue function" */

	/**** Locally used variables. ****/
extern char end[];              /*  end is set in the linker command 	*/
				/* file and is the end of statically 	*/
				/* allocated data (thus start of heap).	*/

static char *heap_ptr;		/* Points to current end of the heap.	*/

/************************** _sbrk_r *************************************/
/*  Support function.  Adjusts end of heap to provide more memory to	*/
/* memory allocator. Simple and dumb with no sanity checks.		*/
/*  struct _reent *r	-- re-entrancy structure, used by newlib to 	*/
/*			support multiple threads of operation.		*/
/*  ptrdiff_t nbytes	-- number of bytes to add.			*/
/*  Returns pointer to start of new heap area.				*/
/*  Note:  This implementation is not thread safe (despite taking a	*/
/* _reent structure as a parameter).  					*/
/*  Since _s_r is not used in the current implementation, the following	*/
/* messages must be suppressed.						*/

void * _sbrk_r(
    struct _reent *_s_r, 
    ptrdiff_t nbytes)
{
	char  *base;		/*  errno should be set to  ENOMEM on error	*/

	if (!heap_ptr) {	/*  Initialize if first time through.		*/
 1f0:	e59f2020 	ldr	r2, [pc, #32]	; 218 <_sbrk_r+0x28>
 1f4:	e5923000 	ldr	r3, [r2]
 1f8:	e3530000 	cmp	r3, #0	; 0x0
		heap_ptr = end;
 1fc:	059f3018 	ldreq	r3, [pc, #24]	; 21c <_sbrk_r+0x2c>
 200:	05823000 	streq	r3, [r2]
	}
	base = heap_ptr;	/*  Point to end of heap.			*/
 204:	e5923000 	ldr	r3, [r2]
	heap_ptr += nbytes;	/*  Increase heap.				*/
	
	return base;		/*  Return pointer to start of new heap area.	*/
}
 208:	e1a00003 	mov	r0, r3
 20c:	e0833001 	add	r3, r3, r1
 210:	e5823000 	str	r3, [r2]
 214:	e1a0f00e 	mov	pc, lr
 218:	40000000 	andmi	r0, r0, r0
 21c:	40000500 	andmi	r0, r0, r0, lsl #10

00000220 <uart0_init>:
#define val 60000000/(16*baud)

void uart0_init()
{
	PINSEL0&=~(1<<1)|(1<<3);
 220:	e59f2044 	ldr	r2, [pc, #68]	; 26c <uart0_init+0x4c>
 224:	e5923000 	ldr	r3, [r2]
 228:	e3c33002 	bic	r3, r3, #2	; 0x2
 22c:	e5823000 	str	r3, [r2]
	PINSEL0|=(1<<0)|(1<<2);
 230:	e5923000 	ldr	r3, [r2]
	
	//U0LCR|=(1<<7);// enable DLAB bit 83
	U0LCR = 0x83 ;
 234:	e59f1034 	ldr	r1, [pc, #52]	; 270 <uart0_init+0x50>
 238:	e3833005 	orr	r3, r3, #5	; 0x5
 23c:	e5823000 	str	r3, [r2]
 240:	e3a03083 	mov	r3, #131	; 0x83
 244:	e5813000 	str	r3, [r1]
	U0DLL=val&0xFF;
 248:	e59f3024 	ldr	r3, [pc, #36]	; 274 <uart0_init+0x54>
 24c:	e3a02086 	mov	r2, #134	; 0x86
 250:	e5832000 	str	r2, [r3]
	U0DLM=val>>8;
 254:	e59f301c 	ldr	r3, [pc, #28]	; 278 <uart0_init+0x58>
 258:	e3a02001 	mov	r2, #1	; 0x1
 25c:	e5832000 	str	r2, [r3]
	U0LCR=0X03;//parity disable,1 stop bit,8 bit data
 260:	e3a03003 	mov	r3, #3	; 0x3
 264:	e5813000 	str	r3, [r1]
 268:	e1a0f00e 	mov	pc, lr
 26c:	e002c000 	and	ip, r2, r0
 270:	e000c00c 	and	ip, r0, ip
 274:	e000c000 	and	ip, r0, r0
 278:	e000c004 	and	ip, r0, r4

0000027c <uart0_tx_char>:
}

void uart0_tx_char(unsigned char data)
{
 27c:	e20000ff 	and	r0, r0, #255	; 0xff
	while(!(U0LSR&(1<<5)));  
 280:	e59f3014 	ldr	r3, [pc, #20]	; 29c <uart0_tx_char+0x20>
 284:	e5933000 	ldr	r3, [r3]
 288:	e3130020 	tst	r3, #32	; 0x20
 28c:	159f300c 	ldrne	r3, [pc, #12]	; 2a0 <uart0_tx_char+0x24>
 290:	15830000 	strne	r0, [r3]
 294:	11a0f00e 	movne	pc, lr
 298:	eafffff8 	b	280 <uart0_tx_char+0x4>
 29c:	e000c014 	and	ip, r0, r4, lsl r0
 2a0:	e000c000 	and	ip, r0, r0

000002a4 <uart0_tx_str>:
	U0THR=data;
}	

void uart0_tx_str(unsigned char *ptr) 
{
 2a4:	e1a0c00d 	mov	ip, sp
 2a8:	e92dd810 	stmdb	sp!, {r4, fp, ip, lr, pc}
 2ac:	e1a04000 	mov	r4, r0
    while(*ptr !='\0')
 2b0:	e5d00000 	ldrb	r0, [r0]
 2b4:	e3500000 	cmp	r0, #0	; 0x0
 2b8:	e24cb004 	sub	fp, ip, #4	; 0x4
 2bc:	091ba810 	ldmeqdb	fp, {r4, fp, sp, pc}
	{
	uart0_tx_char(*ptr);
 2c0:	e20000ff 	and	r0, r0, #255	; 0xff
 2c4:	ebffffec 	bl	27c <uart0_tx_char>
	ptr ++; // uart1_tx_char(*(ptr++));
 2c8:	e5f40001 	ldrb	r0, [r4, #1]!
 2cc:	e3500000 	cmp	r0, #0	; 0x0
 2d0:	091ba810 	ldmeqdb	fp, {r4, fp, sp, pc}
 2d4:	eafffff9 	b	2c0 <uart0_tx_str+0x1c>

000002d8 <uart0_tx_num>:
	}
}

void uart0_tx_num(unsigned int num ) 
{
 2d8:	e1a0c00d 	mov	ip, sp
 2dc:	e92dd810 	stmdb	sp!, {r4, fp, ip, lr, pc}
	unsigned char i=1,count[10];	
	
	while(num!=0)
 2e0:	e3500000 	cmp	r0, #0	; 0x0
 2e4:	e24cb004 	sub	fp, ip, #4	; 0x4
 2e8:	e24dd00c 	sub	sp, sp, #12	; 0xc
 2ec:	e3a04001 	mov	r4, #1	; 0x1
 2f0:	0a00000c 	beq	328 <uart0_tx_num+0x50>
	{
	count[i] = num % 10;
 2f4:	e59f3060 	ldr	r3, [pc, #96]	; 35c <uart0_tx_num+0x84>
 2f8:	e0832390 	umull	r2, r3, r0, r3
 2fc:	e1a031a3 	mov	r3, r3, lsr #3
 300:	e0832103 	add	r2, r3, r3, lsl #2
 304:	e24bc010 	sub	ip, fp, #16	; 0x10
 308:	e0402082 	sub	r2, r0, r2, lsl #1
	num = num / 10 ;
	i++;
 30c:	e2841001 	add	r1, r4, #1	; 0x1
 310:	e1a00003 	mov	r0, r3
 314:	e3530000 	cmp	r3, #0	; 0x0
 318:	e08c3004 	add	r3, ip, r4
 31c:	e543200c 	strb	r2, [r3, -#12]
 320:	e20140ff 	and	r4, r1, #255	; 0xff
 324:	1afffff2 	bne	2f4 <uart0_tx_num+0x1c>
	}
	i--;// At the time of exit from the 'for loop',its value is greater than 1 of max value,
 328:	e2443001 	sub	r3, r4, #1	; 0x1
		// in this case it is 6 which is greater than 5;hence to decrease by 1 i--. 
	while(i!=0)
 32c:	e21340ff 	ands	r4, r3, #255	; 0xff
 330:	091ba810 	ldmeqdb	fp, {r4, fp, sp, pc}
	{
	uart0_tx_char(count[i] + 0x30);
 334:	e24b2010 	sub	r2, fp, #16	; 0x10
 338:	e0823004 	add	r3, r2, r4
 33c:	e553000c 	ldrb	r0, [r3, -#12]
 340:	e2800030 	add	r0, r0, #48	; 0x30
 344:	e20000ff 	and	r0, r0, #255	; 0xff
 348:	ebffffcb 	bl	27c <uart0_tx_char>
	i--;
 34c:	e2443001 	sub	r3, r4, #1	; 0x1
 350:	e21340ff 	ands	r4, r3, #255	; 0xff
 354:	091ba810 	ldmeqdb	fp, {r4, fp, sp, pc}
 358:	eafffff5 	b	334 <uart0_tx_num+0x5c>
 35c:	cccccccd 	stcgtl	12, cr12, [ip], #820

00000360 <uart0_rx_char>:
	}
}
unsigned char uart0_rx_char(void)
{
	while(!(U0LSR&(1<<0)));  
 360:	e59f3018 	ldr	r3, [pc, #24]	; 380 <uart0_rx_char+0x20>
 364:	e5933000 	ldr	r3, [r3]
 368:	e3130001 	tst	r3, #1	; 0x1
 36c:	159f3010 	ldrne	r3, [pc, #16]	; 384 <uart0_rx_char+0x24>
 370:	15930000 	ldrne	r0, [r3]
 374:	120000ff 	andne	r0, r0, #255	; 0xff
	return U0RBR;
}
 378:	11a0f00e 	movne	pc, lr
 37c:	eafffff7 	b	360 <uart0_rx_char>
 380:	e000c014 	and	ip, r0, r4, lsl r0
 384:	e000c000 	and	ip, r0, r0

00000388 <uart0_rx_str>:
	
void uart0_rx_str(unsigned char *ptr)
{     unsigned int i;
 388:	e1a0c00d 	mov	ip, sp
 38c:	e92dd830 	stmdb	sp!, {r4, r5, fp, ip, lr, pc}
 390:	e24cb004 	sub	fp, ip, #4	; 0x4
 394:	e1a04000 	mov	r4, r0
      for(i=0;i<100;i++)
 398:	e3a05000 	mov	r5, #0	; 0x0
      {
       *(ptr+i)=uart0_rx_char();
 39c:	ebffffef 	bl	360 <uart0_rx_char>
 3a0:	e7c40005 	strb	r0, [r4, r5]
        if(*(ptr+i)=='\r')
 3a4:	e7d43005 	ldrb	r3, [r4, r5]
 3a8:	e353000d 	cmp	r3, #13	; 0xd
 3ac:	03a03000 	moveq	r3, #0	; 0x0
 3b0:	07c43005 	streqb	r3, [r4, r5]
        {
        *(ptr+i)='\0';
		
        break;
 3b4:	091ba830 	ldmeqdb	fp, {r4, r5, fp, sp, pc}
 3b8:	e2855001 	add	r5, r5, #1	; 0x1
 3bc:	e3550063 	cmp	r5, #99	; 0x63
 3c0:	891ba830 	ldmhidb	fp, {r4, r5, fp, sp, pc}
 3c4:	eafffff4 	b	39c <uart0_rx_str+0x14>

000003c8 <uart0_rx_num>:
		}
       }      
}	

// Receiving number
//For 1 digit no.
unsigned int uart0_rx_num(void)
{
 3c8:	e1a0c00d 	mov	ip, sp
 3cc:	e92dd800 	stmdb	sp!, {fp, ip, lr, pc}
 3d0:	e24cb004 	sub	fp, ip, #4	; 0x4
	unsigned int num;
	
	num = uart0_rx_char();
 3d4:	ebffffe1 	bl	360 <uart0_rx_char>
 3d8:	e20000ff 	and	r0, r0, #255	; 0xff
	num = num - 0x30;
 3dc:	e2400030 	sub	r0, r0, #48	; 0x30
	return num;

	
}
 3e0:	e91ba800 	ldmdb	fp, {fp, sp, pc}

000003e4 <main>:
#include"uart.h"
void main()
{
 3e4:	e1a0c00d 	mov	ip, sp
 3e8:	e92dd810 	stmdb	sp!, {r4, fp, ip, lr, pc}
 3ec:	e24cb004 	sub	fp, ip, #4	; 0x4
 3f0:	e24dd064 	sub	sp, sp, #100	; 0x64
	sys_init();//for pll
 3f4:	ebffff5b 	bl	168 <sys_init>
	uart0_init();
 3f8:	ebffff88 	bl	220 <uart0_init>
	while(1) {
	//uart0_tx_char('A');
	/*unsigned char ch;
	while(1)
	{
	ch=uart0_rx_char();
	uart0_tx_char(ch);
	}
	*/
	
	unsigned char mystr[100];
	uart0_rx_str(mystr); 
 3fc:	e24b4074 	sub	r4, fp, #116	; 0x74
 400:	e1a00004 	mov	r0, r4
 404:	ebffffdf 	bl	388 <uart0_rx_str>
	uart0_tx_str(mystr); 
 408:	e1a00004 	mov	r0, r4
 40c:	ebffffa4 	bl	2a4 <uart0_tx_str>
	
	
	uart0_tx_num(1234);
 410:	e59f0004 	ldr	r0, [pc, #4]	; 41c <STACK_SIZE+0x1c>
 414:	ebffffaf 	bl	2d8 <uart0_tx_num>
 418:	eafffff7 	b	3fc <main+0x18>
 41c:	000004d2 	ldreqd	r0, [r0], -r2
