
lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  00000478  0000050c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000478  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  0080011a  0080011a  00000526  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000526  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000014d  00000000  00000000  00000546  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000409  00000000  00000000  00000693  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000197  00000000  00000000  00000a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004b0  00000000  00000000  00000c33  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000150  00000000  00000000  000010e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000175  00000000  00000000  00001234  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001b5  00000000  00000000  000013a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  0000155e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
   8:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
   c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  14:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  1c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  24:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  2c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  48:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  54:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  58:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  5c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  60:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  68:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  6c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  70:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  74:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  78:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  7c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  80:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  84:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  88:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e7       	ldi	r30, 0x78	; 120
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <.do_copy_data_start>

000000a4 <.do_copy_data_loop>:
  a4:	05 90       	lpm	r0, Z+
  a6:	0d 92       	st	X+, r0

000000a8 <.do_copy_data_start>:
  a8:	aa 31       	cpi	r26, 0x1A	; 26
  aa:	b1 07       	cpc	r27, r17
  ac:	d9 f7       	brne	.-10     	; 0xa4 <.do_copy_data_loop>

000000ae <__do_clear_bss>:
  ae:	11 e0       	ldi	r17, 0x01	; 1
  b0:	aa e1       	ldi	r26, 0x1A	; 26
  b2:	b1 e0       	ldi	r27, 0x01	; 1
  b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
  b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
  b8:	ad 31       	cpi	r26, 0x1D	; 29
  ba:	b1 07       	cpc	r27, r17
  bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
  be:	0e 94 f5 01 	call	0x3ea	; 0x3ea <main>
  c2:	0c 94 3a 02 	jmp	0x474	; 0x474 <_exit>

000000c6 <__bad_interrupt>:
  c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <uart1_init>:
#include<avr/io.h>

void uart1_init(void)
{
    UBRR1H=0;        //set baud rate 
  ca:	10 92 98 00 	sts	0x0098, r1
    UBRR1L=103;        //frame format,8 bit transmission,no parity,1 stop bit
  ce:	87 e6       	ldi	r24, 0x67	; 103
  d0:	80 93 99 00 	sts	0x0099, r24
    UCSR1C|=(1<<UCSZ1)|(1<<UCSZ0);
  d4:	ed e9       	ldi	r30, 0x9D	; 157
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	86 60       	ori	r24, 0x06	; 6
  dc:	80 83       	st	Z, r24
   // UCSR1B|=(1<<RXEN)|(1<<TXEN);         //enable Receiver and Transmitter
    UCSR1B|=(1<<RXEN)|(1<<TXEN);
  de:	ea e9       	ldi	r30, 0x9A	; 154
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	88 61       	ori	r24, 0x18	; 24
  e6:	80 83       	st	Z, r24
}
  e8:	08 95       	ret

000000ea <uart0_init>:

void uart0_init(void)
{
    UBRR0H=0;        //set baud rate 
  ea:	10 92 90 00 	sts	0x0090, r1
    UBRR0L=103;        //frame format,8 bit transmission,no parity,1 stop bit
  ee:	87 e6       	ldi	r24, 0x67	; 103
  f0:	89 b9       	out	0x09, r24	; 9
    UCSR0C|=(1<<UCSZ1)|(1<<UCSZ0);
  f2:	e5 e9       	ldi	r30, 0x95	; 149
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	86 60       	ori	r24, 0x06	; 6
  fa:	80 83       	st	Z, r24
   // UCSR1B|=(1<<RXEN)|(1<<TXEN);         //enable Receiver and Transmitter
    UCSR0B|=(1<<RXEN)|(1<<TXEN);
  fc:	8a b1       	in	r24, 0x0a	; 10
  fe:	88 61       	ori	r24, 0x18	; 24
 100:	8a b9       	out	0x0a, r24	; 10
}
 102:	08 95       	ret

00000104 <uart1_tx_char>:
void uart1_tx_char(unsigned char data)
{
 104:	98 2f       	mov	r25, r24
    while(!(UCSR1A&(1<<UDRE)));                //poll the flags
 106:	80 91 9b 00 	lds	r24, 0x009B
 10a:	85 ff       	sbrs	r24, 5
 10c:	fc cf       	rjmp	.-8      	; 0x106 <uart1_tx_char+0x2>
    UDR1=data;           //load value in data register
 10e:	90 93 9c 00 	sts	0x009C, r25

}
 112:	08 95       	ret

00000114 <uart1_tx_str>:

void uart1_tx_str(unsigned char *ptr)
{
 114:	fc 01       	movw	r30, r24
 116:	07 c0       	rjmp	.+14     	; 0x126 <uart1_tx_str+0x12>
   // UCSR1B|=(1<<RXEN)|(1<<TXEN);         //enable Receiver and Transmitter
    UCSR0B|=(1<<RXEN)|(1<<TXEN);
}
void uart1_tx_char(unsigned char data)
{
    while(!(UCSR1A&(1<<UDRE)));                //poll the flags
 118:	80 91 9b 00 	lds	r24, 0x009B
 11c:	85 ff       	sbrs	r24, 5
 11e:	fc cf       	rjmp	.-8      	; 0x118 <uart1_tx_str+0x4>

void uart1_tx_str(unsigned char *ptr)
{
    while(*ptr!='\0')
    {
          uart1_tx_char(*(ptr++));  //one by one char transmission
 120:	31 96       	adiw	r30, 0x01	; 1
    UCSR0B|=(1<<RXEN)|(1<<TXEN);
}
void uart1_tx_char(unsigned char data)
{
    while(!(UCSR1A&(1<<UDRE)));                //poll the flags
    UDR1=data;           //load value in data register
 122:	90 93 9c 00 	sts	0x009C, r25

}

void uart1_tx_str(unsigned char *ptr)
{
    while(*ptr!='\0')
 126:	90 81       	ld	r25, Z
 128:	99 23       	and	r25, r25
 12a:	b1 f7       	brne	.-20     	; 0x118 <uart1_tx_str+0x4>
    {
          uart1_tx_char(*(ptr++));  //one by one char transmission
          //ptr++
     }
}
 12c:	08 95       	ret

0000012e <uart1_tx_num>:

void uart1_tx_num(unsigned int num)
{
 12e:	df 93       	push	r29
 130:	cf 93       	push	r28
 132:	00 d0       	rcall	.+0      	; 0x134 <uart1_tx_num+0x6>
 134:	00 d0       	rcall	.+0      	; 0x136 <uart1_tx_num+0x8>
 136:	0f 92       	push	r0
 138:	cd b7       	in	r28, 0x3d	; 61
 13a:	de b7       	in	r29, 0x3e	; 62
 13c:	9c 01       	movw	r18, r24
        unsigned char count[5],i;
        for(i=1;i<5;i++)
        {   
             count[i]=num%10;
 13e:	6a e0       	ldi	r22, 0x0A	; 10
 140:	70 e0       	ldi	r23, 0x00	; 0
 142:	0e 94 13 02 	call	0x426	; 0x426 <__udivmodhi4>
 146:	8a 83       	std	Y+2, r24	; 0x02
             num=num/10;
 148:	c9 01       	movw	r24, r18
 14a:	6a e0       	ldi	r22, 0x0A	; 10
 14c:	70 e0       	ldi	r23, 0x00	; 0
 14e:	0e 94 13 02 	call	0x426	; 0x426 <__udivmodhi4>
 152:	9b 01       	movw	r18, r22
void uart1_tx_num(unsigned int num)
{
        unsigned char count[5],i;
        for(i=1;i<5;i++)
        {   
             count[i]=num%10;
 154:	cb 01       	movw	r24, r22
 156:	6a e0       	ldi	r22, 0x0A	; 10
 158:	70 e0       	ldi	r23, 0x00	; 0
 15a:	0e 94 13 02 	call	0x426	; 0x426 <__udivmodhi4>
 15e:	8b 83       	std	Y+3, r24	; 0x03
             num=num/10;
 160:	c9 01       	movw	r24, r18
 162:	6a e0       	ldi	r22, 0x0A	; 10
 164:	70 e0       	ldi	r23, 0x00	; 0
 166:	0e 94 13 02 	call	0x426	; 0x426 <__udivmodhi4>
 16a:	9b 01       	movw	r18, r22
void uart1_tx_num(unsigned int num)
{
        unsigned char count[5],i;
        for(i=1;i<5;i++)
        {   
             count[i]=num%10;
 16c:	cb 01       	movw	r24, r22
 16e:	6a e0       	ldi	r22, 0x0A	; 10
 170:	70 e0       	ldi	r23, 0x00	; 0
 172:	0e 94 13 02 	call	0x426	; 0x426 <__udivmodhi4>
 176:	8c 83       	std	Y+4, r24	; 0x04
 178:	c9 01       	movw	r24, r18
 17a:	6a e0       	ldi	r22, 0x0A	; 10
 17c:	70 e0       	ldi	r23, 0x00	; 0
 17e:	0e 94 13 02 	call	0x426	; 0x426 <__udivmodhi4>
 182:	cb 01       	movw	r24, r22
 184:	6a e0       	ldi	r22, 0x0A	; 10
 186:	70 e0       	ldi	r23, 0x00	; 0
 188:	0e 94 13 02 	call	0x426	; 0x426 <__udivmodhi4>
 18c:	8d 83       	std	Y+5, r24	; 0x05
 18e:	fe 01       	movw	r30, r28
 190:	35 96       	adiw	r30, 0x05	; 5
             num=num/10;
        }
        i--;
        while(i!=0)
 192:	9e 01       	movw	r18, r28
 194:	2f 5f       	subi	r18, 0xFF	; 255
 196:	3f 4f       	sbci	r19, 0xFF	; 255
       {
         uart1_tx_char(count[i]+0x30);
 198:	90 81       	ld	r25, Z
   // UCSR1B|=(1<<RXEN)|(1<<TXEN);         //enable Receiver and Transmitter
    UCSR0B|=(1<<RXEN)|(1<<TXEN);
}
void uart1_tx_char(unsigned char data)
{
    while(!(UCSR1A&(1<<UDRE)));                //poll the flags
 19a:	80 91 9b 00 	lds	r24, 0x009B
 19e:	85 ff       	sbrs	r24, 5
 1a0:	fc cf       	rjmp	.-8      	; 0x19a <uart1_tx_num+0x6c>
             num=num/10;
        }
        i--;
        while(i!=0)
       {
         uart1_tx_char(count[i]+0x30);
 1a2:	90 5d       	subi	r25, 0xD0	; 208
    UCSR0B|=(1<<RXEN)|(1<<TXEN);
}
void uart1_tx_char(unsigned char data)
{
    while(!(UCSR1A&(1<<UDRE)));                //poll the flags
    UDR1=data;           //load value in data register
 1a4:	90 93 9c 00 	sts	0x009C, r25
 1a8:	31 97       	sbiw	r30, 0x01	; 1
        {   
             count[i]=num%10;
             num=num/10;
        }
        i--;
        while(i!=0)
 1aa:	2e 17       	cp	r18, r30
 1ac:	3f 07       	cpc	r19, r31
 1ae:	a1 f7       	brne	.-24     	; 0x198 <uart1_tx_num+0x6a>
       {
         uart1_tx_char(count[i]+0x30);
         i--;
       }     
}
 1b0:	0f 90       	pop	r0
 1b2:	0f 90       	pop	r0
 1b4:	0f 90       	pop	r0
 1b6:	0f 90       	pop	r0
 1b8:	0f 90       	pop	r0
 1ba:	cf 91       	pop	r28
 1bc:	df 91       	pop	r29
 1be:	08 95       	ret

000001c0 <uart1_rx_char>:


unsigned char uart1_rx_char(void)
{
       while(!(UCSR1A & (1<<RXC)));//poll Rxc flag wait till RXC becomes 1
 1c0:	80 91 9b 00 	lds	r24, 0x009B
 1c4:	87 ff       	sbrs	r24, 7
 1c6:	fc cf       	rjmp	.-8      	; 0x1c0 <uart1_rx_char>
        return UDR1;
 1c8:	80 91 9c 00 	lds	r24, 0x009C
}
 1cc:	08 95       	ret

000001ce <uart1_rx_str>:

void uart1_rx_str(unsigned char *ptr)
{     unsigned char i;
 1ce:	fc 01       	movw	r30, r24
 1d0:	90 e0       	ldi	r25, 0x00	; 0
}


unsigned char uart1_rx_char(void)
{
       while(!(UCSR1A & (1<<RXC)));//poll Rxc flag wait till RXC becomes 1
 1d2:	80 91 9b 00 	lds	r24, 0x009B
 1d6:	87 ff       	sbrs	r24, 7
 1d8:	fc cf       	rjmp	.-8      	; 0x1d2 <uart1_rx_str+0x4>
        return UDR1;
 1da:	80 91 9c 00 	lds	r24, 0x009C

void uart1_rx_str(unsigned char *ptr)
{     unsigned char i;
      for(i=0;i<100;i++)
      {
       *(ptr+i)=uart1_rx_char();
 1de:	80 83       	st	Z, r24
        if(*(ptr+i)=='\r')
 1e0:	8d 30       	cpi	r24, 0x0D	; 13
 1e2:	11 f4       	brne	.+4      	; 0x1e8 <uart1_rx_str+0x1a>
        {
        *(ptr+i)='\0';
 1e4:	10 82       	st	Z, r1
 1e6:	08 95       	ret
        return UDR1;
}

void uart1_rx_str(unsigned char *ptr)
{     unsigned char i;
      for(i=0;i<100;i++)
 1e8:	9f 5f       	subi	r25, 0xFF	; 255
 1ea:	31 96       	adiw	r30, 0x01	; 1
 1ec:	94 36       	cpi	r25, 0x64	; 100
 1ee:	89 f7       	brne	.-30     	; 0x1d2 <uart1_rx_str+0x4>
 1f0:	08 95       	ret

000001f2 <delay_us>:
void lcd_gotoxy2(unsigned char pos);
void lcd_exit(void);
void WaitMs(unsigned int ms);

void delay_us(unsigned int time)
{
 1f2:	ac 01       	movw	r20, r24
 1f4:	30 91 1a 01 	lds	r19, 0x011A
 1f8:	20 e0       	ldi	r18, 0x00	; 0
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <delay_us+0xe>
	for(j=0;j<time;j++)
 1fc:	2f 5f       	subi	r18, 0xFF	; 255
 1fe:	3a e0       	ldi	r19, 0x0A	; 10
 200:	82 2f       	mov	r24, r18
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	84 17       	cp	r24, r20
 206:	95 07       	cpc	r25, r21
 208:	c8 f3       	brcs	.-14     	; 0x1fc <delay_us+0xa>
 20a:	30 93 1a 01 	sts	0x011A, r19
 20e:	20 93 1b 01 	sts	0x011B, r18
	{
		for(k=0;k<10;k++)
		{};
	}
}
 212:	08 95       	ret

00000214 <toggleE>:

void toggleE(void)
{
//WaitMs(1);
delay_us(100);
 214:	84 e6       	ldi	r24, 0x64	; 100
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <delay_us>
SETBIT(PORTUSED,2);
 21c:	da 9a       	sbi	0x1b, 2	; 27
//WaitMs(1);
delay_us(100);
 21e:	84 e6       	ldi	r24, 0x64	; 100
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <delay_us>
CLEARBIT(PORTUSED,2);
 226:	da 98       	cbi	0x1b, 2	; 27
}
 228:	08 95       	ret

0000022a <lcd_cmd>:

void lcd_cmd(unsigned char cmd)
{
 22a:	1f 93       	push	r17
 22c:	18 2f       	mov	r17, r24
	CLEARBIT(PORTUSED,0+2); // RS to 0 means select COmmand register, E to 0 ..
 22e:	da 98       	cbi	0x1b, 2	; 27
	PORTUSED=(cmd&0xF0)|(PORTUSED&(1<<3));			
 230:	8b b3       	in	r24, 0x1b	; 27
 232:	91 2f       	mov	r25, r17
 234:	90 7f       	andi	r25, 0xF0	; 240
 236:	88 70       	andi	r24, 0x08	; 8
 238:	98 2b       	or	r25, r24
 23a:	9b bb       	out	0x1b, r25	; 27
	toggleE();
 23c:	0e 94 0a 01 	call	0x214	; 0x214 <toggleE>
	PORTUSED=((cmd&(0x0F))*16)|(PORTUSED&(1<<3));	
 240:	8b b3       	in	r24, 0x1b	; 27
 242:	12 95       	swap	r17
 244:	10 7f       	andi	r17, 0xF0	; 240
 246:	88 70       	andi	r24, 0x08	; 8
 248:	81 2b       	or	r24, r17
 24a:	8b bb       	out	0x1b, r24	; 27
	toggleE();
 24c:	0e 94 0a 01 	call	0x214	; 0x214 <toggleE>
}
 250:	1f 91       	pop	r17
 252:	08 95       	ret

00000254 <lcd_putchar>:
	lcd_cmd(LINE1);		// selects the cursor to first line first location...
	WaitMs(15);			
}

void lcd_putchar(unsigned char sig)
{
 254:	1f 93       	push	r17
 256:	18 2f       	mov	r17, r24
	PORTUSED=(sig&0xF0)|(PORTUSED&(1<<3));						
 258:	8b b3       	in	r24, 0x1b	; 27
 25a:	91 2f       	mov	r25, r17
 25c:	90 7f       	andi	r25, 0xF0	; 240
 25e:	88 70       	andi	r24, 0x08	; 8
 260:	98 2b       	or	r25, r24
 262:	9b bb       	out	0x1b, r25	; 27
	SETBIT(PORTA,0);		// selects dat register RS=1
 264:	d8 9a       	sbi	0x1b, 0	; 27
	toggleE();
 266:	0e 94 0a 01 	call	0x214	; 0x214 <toggleE>
	PORTUSED=((sig&(0x0F))*16)|(PORTUSED&(1<<3));
 26a:	8b b3       	in	r24, 0x1b	; 27
 26c:	12 95       	swap	r17
 26e:	10 7f       	andi	r17, 0xF0	; 240
 270:	88 70       	andi	r24, 0x08	; 8
 272:	81 2b       	or	r24, r17
 274:	8b bb       	out	0x1b, r24	; 27
	SETBIT(PORTA,0);		// selects dat register RS=1
 276:	d8 9a       	sbi	0x1b, 0	; 27
	toggleE();
 278:	0e 94 0a 01 	call	0x214	; 0x214 <toggleE>
}
 27c:	1f 91       	pop	r17
 27e:	08 95       	ret

00000280 <lcd_string>:
		lcd_putchar(single);
	}
}

void lcd_string(unsigned char str[32])
{
 280:	ef 92       	push	r14
 282:	ff 92       	push	r15
 284:	1f 93       	push	r17
 286:	cf 93       	push	r28
 288:	df 93       	push	r29
 28a:	7c 01       	movw	r14, r24
	unsigned char k=0;
	CLEARBIT(PORTUSED,2);
 28c:	da 98       	cbi	0x1b, 2	; 27
 28e:	10 e0       	ldi	r17, 0x00	; 0
 290:	19 c0       	rjmp	.+50     	; 0x2c4 <lcd_string+0x44>
	while(str[k]!='\0')	//Till null character is encountered
		{
			if(k==16)
 292:	10 31       	cpi	r17, 0x10	; 16
 294:	19 f4       	brne	.+6      	; 0x29c <lcd_string+0x1c>
			{
			lcd_cmd(LINE2);
 296:	80 ec       	ldi	r24, 0xC0	; 192
 298:	0e 94 15 01 	call	0x22a	; 0x22a <lcd_cmd>
			}
			PORTUSED=((str[k])&0xF0)|(PORTUSED&(1<<3));
 29c:	9b b3       	in	r25, 0x1b	; 27
 29e:	88 81       	ld	r24, Y
 2a0:	80 7f       	andi	r24, 0xF0	; 240
 2a2:	98 70       	andi	r25, 0x08	; 8
 2a4:	89 2b       	or	r24, r25
 2a6:	8b bb       	out	0x1b, r24	; 27
			SETBIT(PORTA,0);			// selects dat register RS=1
 2a8:	d8 9a       	sbi	0x1b, 0	; 27
			toggleE();
 2aa:	0e 94 0a 01 	call	0x214	; 0x214 <toggleE>
			PORTUSED=((str[k]&(0x0F))*16)|(PORTUSED&(1<<3));
 2ae:	9b b3       	in	r25, 0x1b	; 27
 2b0:	88 81       	ld	r24, Y
 2b2:	82 95       	swap	r24
 2b4:	80 7f       	andi	r24, 0xF0	; 240
 2b6:	98 70       	andi	r25, 0x08	; 8
 2b8:	89 2b       	or	r24, r25
 2ba:	8b bb       	out	0x1b, r24	; 27
			SETBIT(PORTA,0);			// selects dat register RS=1
 2bc:	d8 9a       	sbi	0x1b, 0	; 27
			toggleE();
 2be:	0e 94 0a 01 	call	0x214	; 0x214 <toggleE>
			k++;
 2c2:	1f 5f       	subi	r17, 0xFF	; 255

void lcd_string(unsigned char str[32])
{
	unsigned char k=0;
	CLEARBIT(PORTUSED,2);
	while(str[k]!='\0')	//Till null character is encountered
 2c4:	e7 01       	movw	r28, r14
 2c6:	c1 0f       	add	r28, r17
 2c8:	d1 1d       	adc	r29, r1
 2ca:	88 81       	ld	r24, Y
 2cc:	88 23       	and	r24, r24
 2ce:	09 f7       	brne	.-62     	; 0x292 <lcd_string+0x12>
			PORTUSED=((str[k]&(0x0F))*16)|(PORTUSED&(1<<3));
			SETBIT(PORTA,0);			// selects dat register RS=1
			toggleE();
			k++;
		}
}
 2d0:	df 91       	pop	r29
 2d2:	cf 91       	pop	r28
 2d4:	1f 91       	pop	r17
 2d6:	ff 90       	pop	r15
 2d8:	ef 90       	pop	r14
 2da:	08 95       	ret

000002dc <lcd_gotoxy1>:
	lcd_char(O+0x30);
}

void lcd_gotoxy1(unsigned char pos)
{
	lcd_cmd(LINE1+pos);     // write pos=0 if u want to select 1st location
 2dc:	80 58       	subi	r24, 0x80	; 128
 2de:	0e 94 15 01 	call	0x22a	; 0x22a <lcd_cmd>
}
 2e2:	08 95       	ret

000002e4 <lcd_gotoxy2>:

void lcd_gotoxy2(unsigned char pos)
{
	lcd_cmd(LINE2+pos);		 // write pos=0 if u want to select 1st location
 2e4:	80 54       	subi	r24, 0x40	; 64
 2e6:	0e 94 15 01 	call	0x22a	; 0x22a <lcd_cmd>
}
 2ea:	08 95       	ret

000002ec <lcd_char>:
}

void lcd_char(unsigned char single)
{
	int i;
	if(single =='\t')
 2ec:	89 30       	cpi	r24, 0x09	; 9
 2ee:	29 f4       	brne	.+10     	; 0x2fa <lcd_char+0xe>
	{
		for(i =0 ; i<2 ; i++)
		{	
		lcd_putchar(' ');
 2f0:	80 e2       	ldi	r24, 0x20	; 32
 2f2:	0e 94 2a 01 	call	0x254	; 0x254 <lcd_putchar>
 2f6:	80 e2       	ldi	r24, 0x20	; 32
 2f8:	06 c0       	rjmp	.+12     	; 0x306 <lcd_char+0x1a>
		}
	}
	else if(single=='\n')
 2fa:	8a 30       	cpi	r24, 0x0A	; 10
 2fc:	21 f4       	brne	.+8      	; 0x306 <lcd_char+0x1a>
	{
		lcd_gotoxy2(0);	
 2fe:	80 e0       	ldi	r24, 0x00	; 0
 300:	0e 94 72 01 	call	0x2e4	; 0x2e4 <lcd_gotoxy2>
 304:	08 95       	ret
	}
	else 
	{
		lcd_putchar(single);
 306:	0e 94 2a 01 	call	0x254	; 0x254 <lcd_putchar>
 30a:	08 95       	ret

0000030c <lcd_showvalue>:
		}
}


void lcd_showvalue(unsigned char num)	//prints the decimal 3digit value of num
{
 30c:	ef 92       	push	r14
 30e:	ff 92       	push	r15
 310:	0f 93       	push	r16
 312:	1f 93       	push	r17
 314:	18 2f       	mov	r17, r24
	unsigned char H=0,T=0,O=0;
	H=num/100;
 316:	64 e6       	ldi	r22, 0x64	; 100
 318:	0e 94 07 02 	call	0x40e	; 0x40e <__udivmodqi4>
 31c:	48 2f       	mov	r20, r24
	T=(num - (H*100))/10;
 31e:	28 2f       	mov	r18, r24
 320:	30 e0       	ldi	r19, 0x00	; 0
 322:	8c e9       	ldi	r24, 0x9C	; 156
 324:	9f ef       	ldi	r25, 0xFF	; 255
 326:	28 9f       	mul	r18, r24
 328:	70 01       	movw	r14, r0
 32a:	29 9f       	mul	r18, r25
 32c:	f0 0c       	add	r15, r0
 32e:	38 9f       	mul	r19, r24
 330:	f0 0c       	add	r15, r0
 332:	11 24       	eor	r1, r1
 334:	c7 01       	movw	r24, r14
 336:	81 0f       	add	r24, r17
 338:	91 1d       	adc	r25, r1
 33a:	6a e0       	ldi	r22, 0x0A	; 10
 33c:	70 e0       	ldi	r23, 0x00	; 0
 33e:	0e 94 27 02 	call	0x44e	; 0x44e <__divmodhi4>
 342:	06 2f       	mov	r16, r22
	O=(num - (H*100) - (T*10));
	
	lcd_char(H+0x30);
 344:	84 2f       	mov	r24, r20
 346:	80 5d       	subi	r24, 0xD0	; 208
 348:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_char>
	lcd_char(T+0x30);
 34c:	80 2f       	mov	r24, r16
 34e:	80 5d       	subi	r24, 0xD0	; 208
 350:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_char>
	lcd_char(O+0x30);
 354:	10 5d       	subi	r17, 0xD0	; 208
 356:	1e 0d       	add	r17, r14
 358:	86 ef       	ldi	r24, 0xF6	; 246
 35a:	9f ef       	ldi	r25, 0xFF	; 255
 35c:	08 9f       	mul	r16, r24
 35e:	00 2d       	mov	r16, r0
 360:	11 24       	eor	r1, r1
 362:	80 2f       	mov	r24, r16
 364:	81 0f       	add	r24, r17
 366:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_char>
}
 36a:	1f 91       	pop	r17
 36c:	0f 91       	pop	r16
 36e:	ff 90       	pop	r15
 370:	ef 90       	pop	r14
 372:	08 95       	ret

00000374 <lcd_exit>:
}


void lcd_exit(void)
{
	PORTUSED=save;
 374:	80 91 1c 01 	lds	r24, 0x011C
 378:	8b bb       	out	0x1b, r24	; 27
}
 37a:	08 95       	ret

0000037c <WaitMs>:

/* waits (pauses) for ms milliseconds (assumes clock at 16MHz) */
void WaitMs(unsigned int ms)
{
 37c:	0a c0       	rjmp	.+20     	; 0x392 <WaitMs+0x16>
	int i;

	while (ms-- > 0)
 37e:	20 e0       	ldi	r18, 0x00	; 0
 380:	30 e0       	ldi	r19, 0x00	; 0
	{
		/* 16384 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
			asm("nop");
 382:	00 00       	nop

	while (ms-- > 0)
	{
		/* 16384 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
 384:	2f 5f       	subi	r18, 0xFF	; 255
 386:	3f 4f       	sbci	r19, 0xFF	; 255
 388:	4c e0       	ldi	r20, 0x0C	; 12
 38a:	2c 3c       	cpi	r18, 0xCC	; 204
 38c:	34 07       	cpc	r19, r20
 38e:	c9 f7       	brne	.-14     	; 0x382 <WaitMs+0x6>
 390:	01 97       	sbiw	r24, 0x01	; 1
/* waits (pauses) for ms milliseconds (assumes clock at 16MHz) */
void WaitMs(unsigned int ms)
{
	int i;

	while (ms-- > 0)
 392:	00 97       	sbiw	r24, 0x00	; 0
 394:	a1 f7       	brne	.-24     	; 0x37e <WaitMs+0x2>
		/* 16384 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
			asm("nop");
	}
}
 396:	08 95       	ret

00000398 <lcd_init>:
	toggleE();
}

void lcd_init(void)	//init the lcd 
{	
	save=PORTUSED;
 398:	8b b3       	in	r24, 0x1b	; 27
 39a:	80 93 1c 01 	sts	0x011C, r24
	DDRUSED=0xFF;		// declare it as an o/p port
 39e:	8f ef       	ldi	r24, 0xFF	; 255
 3a0:	8a bb       	out	0x1a, r24	; 26
	WaitMs(15);		// Given in datasheet ( Cmd for selecting 4 bit mode )
 3a2:	8f e0       	ldi	r24, 0x0F	; 15
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	0e 94 be 01 	call	0x37c	; 0x37c <WaitMs>
	lcd_cmd(0x03);
 3aa:	83 e0       	ldi	r24, 0x03	; 3
 3ac:	0e 94 15 01 	call	0x22a	; 0x22a <lcd_cmd>
	WaitMs(45);
 3b0:	8d e2       	ldi	r24, 0x2D	; 45
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	0e 94 be 01 	call	0x37c	; 0x37c <WaitMs>
	lcd_cmd(0x02);
 3b8:	82 e0       	ldi	r24, 0x02	; 2
 3ba:	0e 94 15 01 	call	0x22a	; 0x22a <lcd_cmd>
	WaitMs(15);
 3be:	8f e0       	ldi	r24, 0x0F	; 15
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	0e 94 be 01 	call	0x37c	; 0x37c <WaitMs>
	CLEARBIT(PORTUSED,0+2);   // RS to 0 means select COmmand register, E to 0 ..
 3c6:	da 98       	cbi	0x1b, 2	; 27
	lcd_cmd(0x01);     // Cmd for clear display
 3c8:	81 e0       	ldi	r24, 0x01	; 1
 3ca:	0e 94 15 01 	call	0x22a	; 0x22a <lcd_cmd>
	lcd_cmd(0x0F);		// Cmd for display ON and cursor blinking
 3ce:	8f e0       	ldi	r24, 0x0F	; 15
 3d0:	0e 94 15 01 	call	0x22a	; 0x22a <lcd_cmd>
	lcd_cmd(0x02);		// Cmd for returning home
 3d4:	82 e0       	ldi	r24, 0x02	; 2
 3d6:	0e 94 15 01 	call	0x22a	; 0x22a <lcd_cmd>
	lcd_cmd(LINE1);		// selects the cursor to first line first location...
 3da:	80 e8       	ldi	r24, 0x80	; 128
 3dc:	0e 94 15 01 	call	0x22a	; 0x22a <lcd_cmd>
	WaitMs(15);			
 3e0:	8f e0       	ldi	r24, 0x0F	; 15
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	0e 94 be 01 	call	0x37c	; 0x37c <WaitMs>
}
 3e8:	08 95       	ret

000003ea <main>:
#include"uart.h"
#include"LCD_mega128.h"

int main (void)
{
uart1_init();//
 3ea:	0e 94 65 00 	call	0xca	; 0xca <uart1_init>
uart1_tx_str("uart has initialised....\n");
 3ee:	80 e0       	ldi	r24, 0x00	; 0
 3f0:	91 e0       	ldi	r25, 0x01	; 1
 3f2:	0e 94 8a 00 	call	0x114	; 0x114 <uart1_tx_str>
lcd_init();
 3f6:	0e 94 cc 01 	call	0x398	; 0x398 <lcd_init>
lcd_putchar('A');
 3fa:	81 e4       	ldi	r24, 0x41	; 65
 3fc:	0e 94 2a 01 	call	0x254	; 0x254 <lcd_putchar>
}


unsigned char uart1_rx_char(void)
{
       while(!(UCSR1A & (1<<RXC)));//poll Rxc flag wait till RXC becomes 1
 400:	80 91 9b 00 	lds	r24, 0x009B
 404:	87 ff       	sbrs	r24, 7
 406:	fc cf       	rjmp	.-8      	; 0x400 <main+0x16>
        return UDR1;
 408:	80 91 9c 00 	lds	r24, 0x009C
 40c:	f7 cf       	rjmp	.-18     	; 0x3fc <main+0x12>

0000040e <__udivmodqi4>:
 40e:	99 1b       	sub	r25, r25
 410:	79 e0       	ldi	r23, 0x09	; 9
 412:	04 c0       	rjmp	.+8      	; 0x41c <__udivmodqi4_ep>

00000414 <__udivmodqi4_loop>:
 414:	99 1f       	adc	r25, r25
 416:	96 17       	cp	r25, r22
 418:	08 f0       	brcs	.+2      	; 0x41c <__udivmodqi4_ep>
 41a:	96 1b       	sub	r25, r22

0000041c <__udivmodqi4_ep>:
 41c:	88 1f       	adc	r24, r24
 41e:	7a 95       	dec	r23
 420:	c9 f7       	brne	.-14     	; 0x414 <__udivmodqi4_loop>
 422:	80 95       	com	r24
 424:	08 95       	ret

00000426 <__udivmodhi4>:
 426:	aa 1b       	sub	r26, r26
 428:	bb 1b       	sub	r27, r27
 42a:	51 e1       	ldi	r21, 0x11	; 17
 42c:	07 c0       	rjmp	.+14     	; 0x43c <__udivmodhi4_ep>

0000042e <__udivmodhi4_loop>:
 42e:	aa 1f       	adc	r26, r26
 430:	bb 1f       	adc	r27, r27
 432:	a6 17       	cp	r26, r22
 434:	b7 07       	cpc	r27, r23
 436:	10 f0       	brcs	.+4      	; 0x43c <__udivmodhi4_ep>
 438:	a6 1b       	sub	r26, r22
 43a:	b7 0b       	sbc	r27, r23

0000043c <__udivmodhi4_ep>:
 43c:	88 1f       	adc	r24, r24
 43e:	99 1f       	adc	r25, r25
 440:	5a 95       	dec	r21
 442:	a9 f7       	brne	.-22     	; 0x42e <__udivmodhi4_loop>
 444:	80 95       	com	r24
 446:	90 95       	com	r25
 448:	bc 01       	movw	r22, r24
 44a:	cd 01       	movw	r24, r26
 44c:	08 95       	ret

0000044e <__divmodhi4>:
 44e:	97 fb       	bst	r25, 7
 450:	09 2e       	mov	r0, r25
 452:	07 26       	eor	r0, r23
 454:	0a d0       	rcall	.+20     	; 0x46a <__divmodhi4_neg1>
 456:	77 fd       	sbrc	r23, 7
 458:	04 d0       	rcall	.+8      	; 0x462 <__divmodhi4_neg2>
 45a:	e5 df       	rcall	.-54     	; 0x426 <__udivmodhi4>
 45c:	06 d0       	rcall	.+12     	; 0x46a <__divmodhi4_neg1>
 45e:	00 20       	and	r0, r0
 460:	1a f4       	brpl	.+6      	; 0x468 <__divmodhi4_exit>

00000462 <__divmodhi4_neg2>:
 462:	70 95       	com	r23
 464:	61 95       	neg	r22
 466:	7f 4f       	sbci	r23, 0xFF	; 255

00000468 <__divmodhi4_exit>:
 468:	08 95       	ret

0000046a <__divmodhi4_neg1>:
 46a:	f6 f7       	brtc	.-4      	; 0x468 <__divmodhi4_exit>
 46c:	90 95       	com	r25
 46e:	81 95       	neg	r24
 470:	9f 4f       	sbci	r25, 0xFF	; 255
 472:	08 95       	ret

00000474 <_exit>:
 474:	f8 94       	cli

00000476 <__stop_program>:
 476:	ff cf       	rjmp	.-2      	; 0x476 <__stop_program>
