
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  000004d6  0000056a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  0080011a  0080011a  00000584  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000584  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000169  00000000  00000000  000005a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000578  00000000  00000000  0000070d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000223  00000000  00000000  00000c85  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005f6  00000000  00000000  00000ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000170  00000000  00000000  000014a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001b3  00000000  00000000  00001610  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000223  00000000  00000000  000017c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000019e6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
   8:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
   c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  14:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  1c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  24:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  2c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  48:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  54:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  58:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  5c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  60:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  68:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  6c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  70:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  74:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  78:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  7c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  80:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  84:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  88:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 ed       	ldi	r30, 0xD6	; 214
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <.do_copy_data_start>

000000a4 <.do_copy_data_loop>:
  a4:	05 90       	lpm	r0, Z+
  a6:	0d 92       	st	X+, r0

000000a8 <.do_copy_data_start>:
  a8:	aa 31       	cpi	r26, 0x1A	; 26
  aa:	b1 07       	cpc	r27, r17
  ac:	d9 f7       	brne	.-10     	; 0xa4 <.do_copy_data_loop>

000000ae <__do_clear_bss>:
  ae:	11 e0       	ldi	r17, 0x01	; 1
  b0:	aa e1       	ldi	r26, 0x1A	; 26
  b2:	b1 e0       	ldi	r27, 0x01	; 1
  b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
  b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
  b8:	ad 31       	cpi	r26, 0x1D	; 29
  ba:	b1 07       	cpc	r27, r17
  bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
  be:	0e 94 22 02 	call	0x444	; 0x444 <main>
  c2:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <_exit>

000000c6 <__bad_interrupt>:
  c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <uart1_init>:
#include<avr/io.h>

// uart1 initialization
void uart1_init(void) 
{
	UBRR1H = 0;    // USART Baud Rate Registers: High & Low
  ca:	10 92 98 00 	sts	0x0098, r1
	UBRR1L = 103; //0X67; BAUDRATE = 9600
  ce:	87 e6       	ldi	r24, 0x67	; 103
  d0:	80 93 99 00 	sts	0x0099, r24
	
	//UCSR : USART Control and Status Register A,B or C. 
	UCSR1C |= (1<<UCSZ1) | (1<<UCSZ0);// frame : 8 bit data ,no parity ,1 stop bit
  d4:	ed e9       	ldi	r30, 0x9D	; 157
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	86 60       	ori	r24, 0x06	; 6
  dc:	80 83       	st	Z, r24

	UCSR1B |= (1<<RXEN) | (1<<TXEN);// ENABLE TRANSMITTER & RECEIVER
  de:	ea e9       	ldi	r30, 0x9A	; 154
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	88 61       	ori	r24, 0x18	; 24
  e6:	80 83       	st	Z, r24
}
  e8:	08 95       	ret

000000ea <uart1_tx_char>:

// Trannitting Char
void uart1_tx_char(unsigned char data)
{
  ea:	98 2f       	mov	r25, r24
	/*The UDREn(USART Data Register Empty) flag indicates if the transmit buffer (UDR) is ready to receive new data. 
If UDREn is one, the buffer is empty, and therefore ready to be written*/

	while(!(UCSR1A &(1<<UDRE)));//Hence poll UDRE flag till UDRE becomes 1
  ec:	80 91 9b 00 	lds	r24, 0x009B
  f0:	85 ff       	sbrs	r24, 5
  f2:	fc cf       	rjmp	.-8      	; 0xec <uart1_tx_char+0x2>
	UDR1 = data;                //As soon as UDRE flag becomes 1,load value in data register.
  f4:	90 93 9c 00 	sts	0x009C, r25
}
  f8:	08 95       	ret

000000fa <uart1_tx_str>:

//Transmitting string
void uart1_tx_str(unsigned char *ptr) 
{
  fa:	fc 01       	movw	r30, r24
  fc:	07 c0       	rjmp	.+14     	; 0x10c <uart1_tx_str+0x12>
void uart1_tx_char(unsigned char data)
{
	/*The UDREn(USART Data Register Empty) flag indicates if the transmit buffer (UDR) is ready to receive new data. 
If UDREn is one, the buffer is empty, and therefore ready to be written*/

	while(!(UCSR1A &(1<<UDRE)));//Hence poll UDRE flag till UDRE becomes 1
  fe:	80 91 9b 00 	lds	r24, 0x009B
 102:	85 ff       	sbrs	r24, 5
 104:	fc cf       	rjmp	.-8      	; 0xfe <uart1_tx_str+0x4>
	UDR1 = data;                //As soon as UDRE flag becomes 1,load value in data register.
 106:	90 93 9c 00 	sts	0x009C, r25
void uart1_tx_str(unsigned char *ptr) 
{
    while(*ptr !='\0')
	{
	uart1_tx_char(*ptr);
	ptr ++; // uart1_tx_char(*(ptr++));
 10a:	31 96       	adiw	r30, 0x01	; 1
}

//Transmitting string
void uart1_tx_str(unsigned char *ptr) 
{
    while(*ptr !='\0')
 10c:	90 81       	ld	r25, Z
 10e:	99 23       	and	r25, r25
 110:	b1 f7       	brne	.-20     	; 0xfe <uart1_tx_str+0x4>
	{
	uart1_tx_char(*ptr);
	ptr ++; // uart1_tx_char(*(ptr++));
	}
}
 112:	08 95       	ret

00000114 <uart1_tx_num>:

// Transmitting number
void uart1_tx_num(unsigned int num ) 
{
 114:	df 93       	push	r29
 116:	cf 93       	push	r28
 118:	00 d0       	rcall	.+0      	; 0x11a <uart1_tx_num+0x6>
 11a:	00 d0       	rcall	.+0      	; 0x11c <uart1_tx_num+0x8>
 11c:	0f 92       	push	r0
 11e:	cd b7       	in	r28, 0x3d	; 61
 120:	de b7       	in	r29, 0x3e	; 62
 122:	9c 01       	movw	r18, r24
	unsigned char i,count[5];	
	
	for(i=1;i<=4;i++)
	{
	count[i] = num % 10;
 124:	6a e0       	ldi	r22, 0x0A	; 10
 126:	70 e0       	ldi	r23, 0x00	; 0
 128:	0e 94 42 02 	call	0x484	; 0x484 <__udivmodhi4>
 12c:	8a 83       	std	Y+2, r24	; 0x02
	num = num / 10 ;
 12e:	c9 01       	movw	r24, r18
 130:	6a e0       	ldi	r22, 0x0A	; 10
 132:	70 e0       	ldi	r23, 0x00	; 0
 134:	0e 94 42 02 	call	0x484	; 0x484 <__udivmodhi4>
 138:	9b 01       	movw	r18, r22
{
	unsigned char i,count[5];	
	
	for(i=1;i<=4;i++)
	{
	count[i] = num % 10;
 13a:	cb 01       	movw	r24, r22
 13c:	6a e0       	ldi	r22, 0x0A	; 10
 13e:	70 e0       	ldi	r23, 0x00	; 0
 140:	0e 94 42 02 	call	0x484	; 0x484 <__udivmodhi4>
 144:	8b 83       	std	Y+3, r24	; 0x03
	num = num / 10 ;
 146:	c9 01       	movw	r24, r18
 148:	6a e0       	ldi	r22, 0x0A	; 10
 14a:	70 e0       	ldi	r23, 0x00	; 0
 14c:	0e 94 42 02 	call	0x484	; 0x484 <__udivmodhi4>
 150:	9b 01       	movw	r18, r22
{
	unsigned char i,count[5];	
	
	for(i=1;i<=4;i++)
	{
	count[i] = num % 10;
 152:	cb 01       	movw	r24, r22
 154:	6a e0       	ldi	r22, 0x0A	; 10
 156:	70 e0       	ldi	r23, 0x00	; 0
 158:	0e 94 42 02 	call	0x484	; 0x484 <__udivmodhi4>
 15c:	8c 83       	std	Y+4, r24	; 0x04
 15e:	c9 01       	movw	r24, r18
 160:	6a e0       	ldi	r22, 0x0A	; 10
 162:	70 e0       	ldi	r23, 0x00	; 0
 164:	0e 94 42 02 	call	0x484	; 0x484 <__udivmodhi4>
 168:	cb 01       	movw	r24, r22
 16a:	6a e0       	ldi	r22, 0x0A	; 10
 16c:	70 e0       	ldi	r23, 0x00	; 0
 16e:	0e 94 42 02 	call	0x484	; 0x484 <__udivmodhi4>
 172:	8d 83       	std	Y+5, r24	; 0x05
 174:	fe 01       	movw	r30, r28
 176:	35 96       	adiw	r30, 0x05	; 5
	num = num / 10 ;
	}
	i--;// At the time of exit from the 'for loop',its value is greater than 1 of max value,
		// in this case it is 6 which is greater than 5;hence to decrease by 1 i--. 
	while(i!=0)
 178:	9e 01       	movw	r18, r28
 17a:	2f 5f       	subi	r18, 0xFF	; 255
 17c:	3f 4f       	sbci	r19, 0xFF	; 255
	{
	uart1_tx_char(count[i] + 0x30);
 17e:	90 81       	ld	r25, Z
void uart1_tx_char(unsigned char data)
{
	/*The UDREn(USART Data Register Empty) flag indicates if the transmit buffer (UDR) is ready to receive new data. 
If UDREn is one, the buffer is empty, and therefore ready to be written*/

	while(!(UCSR1A &(1<<UDRE)));//Hence poll UDRE flag till UDRE becomes 1
 180:	80 91 9b 00 	lds	r24, 0x009B
 184:	85 ff       	sbrs	r24, 5
 186:	fc cf       	rjmp	.-8      	; 0x180 <uart1_tx_num+0x6c>
	}
	i--;// At the time of exit from the 'for loop',its value is greater than 1 of max value,
		// in this case it is 6 which is greater than 5;hence to decrease by 1 i--. 
	while(i!=0)
	{
	uart1_tx_char(count[i] + 0x30);
 188:	90 5d       	subi	r25, 0xD0	; 208
{
	/*The UDREn(USART Data Register Empty) flag indicates if the transmit buffer (UDR) is ready to receive new data. 
If UDREn is one, the buffer is empty, and therefore ready to be written*/

	while(!(UCSR1A &(1<<UDRE)));//Hence poll UDRE flag till UDRE becomes 1
	UDR1 = data;                //As soon as UDRE flag becomes 1,load value in data register.
 18a:	90 93 9c 00 	sts	0x009C, r25
 18e:	31 97       	sbiw	r30, 0x01	; 1
	count[i] = num % 10;
	num = num / 10 ;
	}
	i--;// At the time of exit from the 'for loop',its value is greater than 1 of max value,
		// in this case it is 6 which is greater than 5;hence to decrease by 1 i--. 
	while(i!=0)
 190:	2e 17       	cp	r18, r30
 192:	3f 07       	cpc	r19, r31
 194:	a1 f7       	brne	.-24     	; 0x17e <uart1_tx_num+0x6a>
	{
	uart1_tx_char(count[i] + 0x30);
	i--;
	}
}
 196:	0f 90       	pop	r0
 198:	0f 90       	pop	r0
 19a:	0f 90       	pop	r0
 19c:	0f 90       	pop	r0
 19e:	0f 90       	pop	r0
 1a0:	cf 91       	pop	r28
 1a2:	df 91       	pop	r29
 1a4:	08 95       	ret

000001a6 <uart1_rx_char>:
unsigned char uart1_rx_char(void) 
{
	/*RXC flag bit is set when there are unread(NEW) data in the receive buffer
and cleared when the receive buffer is empty (i.e., does not contain any unread data).*/
	
	while(!(UCSR1A &(1<<RXC))); //Hence poll Rxc flag wait till RXC becomes 1
 1a6:	80 91 9b 00 	lds	r24, 0x009B
 1aa:	87 ff       	sbrs	r24, 7
 1ac:	fc cf       	rjmp	.-8      	; 0x1a6 <uart1_rx_char>
	return UDR1;
 1ae:	80 91 9c 00 	lds	r24, 0x009C
}
 1b2:	08 95       	ret

000001b4 <uart1_rx_str>:

// Receiving string
void uart1_rx_str(unsigned char *ptr)
{     unsigned int i;
 1b4:	fc 01       	movw	r30, r24
 1b6:	20 e0       	ldi	r18, 0x00	; 0
 1b8:	30 e0       	ldi	r19, 0x00	; 0
unsigned char uart1_rx_char(void) 
{
	/*RXC flag bit is set when there are unread(NEW) data in the receive buffer
and cleared when the receive buffer is empty (i.e., does not contain any unread data).*/
	
	while(!(UCSR1A &(1<<RXC))); //Hence poll Rxc flag wait till RXC becomes 1
 1ba:	80 91 9b 00 	lds	r24, 0x009B
 1be:	87 ff       	sbrs	r24, 7
 1c0:	fc cf       	rjmp	.-8      	; 0x1ba <uart1_rx_str+0x6>
	return UDR1;
 1c2:	80 91 9c 00 	lds	r24, 0x009C
// Receiving string
void uart1_rx_str(unsigned char *ptr)
{     unsigned int i;
      for(i=0;i<100;i++)
      {
       *(ptr+i)=uart1_rx_char();
 1c6:	80 83       	st	Z, r24
        if(*(ptr+i)=='\r')
 1c8:	8d 30       	cpi	r24, 0x0D	; 13
 1ca:	11 f4       	brne	.+4      	; 0x1d0 <uart1_rx_str+0x1c>
        {
        *(ptr+i)='\0';
 1cc:	10 82       	st	Z, r1
 1ce:	08 95       	ret
}

// Receiving string
void uart1_rx_str(unsigned char *ptr)
{     unsigned int i;
      for(i=0;i<100;i++)
 1d0:	2f 5f       	subi	r18, 0xFF	; 255
 1d2:	3f 4f       	sbci	r19, 0xFF	; 255
 1d4:	31 96       	adiw	r30, 0x01	; 1
 1d6:	24 36       	cpi	r18, 0x64	; 100
 1d8:	31 05       	cpc	r19, r1
 1da:	79 f7       	brne	.-34     	; 0x1ba <uart1_rx_str+0x6>
 1dc:	08 95       	ret

000001de <uart1_rx_num>:
unsigned char uart1_rx_char(void) 
{
	/*RXC flag bit is set when there are unread(NEW) data in the receive buffer
and cleared when the receive buffer is empty (i.e., does not contain any unread data).*/
	
	while(!(UCSR1A &(1<<RXC))); //Hence poll Rxc flag wait till RXC becomes 1
 1de:	80 91 9b 00 	lds	r24, 0x009B
 1e2:	87 ff       	sbrs	r24, 7
 1e4:	fc cf       	rjmp	.-8      	; 0x1de <uart1_rx_num>
	return UDR1;
 1e6:	80 91 9c 00 	lds	r24, 0x009C
	{
	num = uart1_rx_char();
	num = num - 0x30;
	return num;
	}
}
 1ea:	80 53       	subi	r24, 0x30	; 48
 1ec:	08 95       	ret

000001ee <delay_us>:
void lcd_gotoxy2(unsigned char pos);
void lcd_exit(void);
void WaitMs(unsigned int ms);

void delay_us(unsigned int time)
{
 1ee:	ac 01       	movw	r20, r24
 1f0:	30 91 1a 01 	lds	r19, 0x011A
 1f4:	20 e0       	ldi	r18, 0x00	; 0
 1f6:	02 c0       	rjmp	.+4      	; 0x1fc <delay_us+0xe>
	for(j=0;j<time;j++)
 1f8:	2f 5f       	subi	r18, 0xFF	; 255
 1fa:	3a e0       	ldi	r19, 0x0A	; 10
 1fc:	82 2f       	mov	r24, r18
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	84 17       	cp	r24, r20
 202:	95 07       	cpc	r25, r21
 204:	c8 f3       	brcs	.-14     	; 0x1f8 <delay_us+0xa>
 206:	30 93 1a 01 	sts	0x011A, r19
 20a:	20 93 1b 01 	sts	0x011B, r18
	{
		for(k=0;k<10;k++)
		{};
	}
}
 20e:	08 95       	ret

00000210 <toggleE>:

void toggleE(void)
{
//WaitMs(1);
delay_us(100);
 210:	84 e6       	ldi	r24, 0x64	; 100
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	0e 94 f7 00 	call	0x1ee	; 0x1ee <delay_us>
SETBIT(PORTUSED,2);
 218:	da 9a       	sbi	0x1b, 2	; 27
//WaitMs(1);
delay_us(100);
 21a:	84 e6       	ldi	r24, 0x64	; 100
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	0e 94 f7 00 	call	0x1ee	; 0x1ee <delay_us>
CLEARBIT(PORTUSED,2);
 222:	da 98       	cbi	0x1b, 2	; 27
}
 224:	08 95       	ret

00000226 <lcd_cmd>:

void lcd_cmd(unsigned char cmd)
{
 226:	1f 93       	push	r17
 228:	18 2f       	mov	r17, r24
	CLEARBIT(PORTUSED,0+2); // RS to 0 means select COmmand register, E to 0 ..
 22a:	da 98       	cbi	0x1b, 2	; 27
	PORTUSED=(cmd&0xF0)|(PORTUSED&(1<<3));			
 22c:	8b b3       	in	r24, 0x1b	; 27
 22e:	91 2f       	mov	r25, r17
 230:	90 7f       	andi	r25, 0xF0	; 240
 232:	88 70       	andi	r24, 0x08	; 8
 234:	98 2b       	or	r25, r24
 236:	9b bb       	out	0x1b, r25	; 27
	toggleE();
 238:	0e 94 08 01 	call	0x210	; 0x210 <toggleE>
	PORTUSED=((cmd&(0x0F))*16)|(PORTUSED&(1<<3));	
 23c:	8b b3       	in	r24, 0x1b	; 27
 23e:	12 95       	swap	r17
 240:	10 7f       	andi	r17, 0xF0	; 240
 242:	88 70       	andi	r24, 0x08	; 8
 244:	81 2b       	or	r24, r17
 246:	8b bb       	out	0x1b, r24	; 27
	toggleE();
 248:	0e 94 08 01 	call	0x210	; 0x210 <toggleE>
}
 24c:	1f 91       	pop	r17
 24e:	08 95       	ret

00000250 <lcd_putchar>:
	lcd_cmd(LINE1);		// selects the cursor to first line first location...
	WaitMs(15);			
}

void lcd_putchar(unsigned char sig)
{
 250:	1f 93       	push	r17
 252:	18 2f       	mov	r17, r24
	PORTUSED=(sig&0xF0)|(PORTUSED&(1<<3));						
 254:	8b b3       	in	r24, 0x1b	; 27
 256:	91 2f       	mov	r25, r17
 258:	90 7f       	andi	r25, 0xF0	; 240
 25a:	88 70       	andi	r24, 0x08	; 8
 25c:	98 2b       	or	r25, r24
 25e:	9b bb       	out	0x1b, r25	; 27
	SETBIT(PORTA,0);		// selects dat register RS=1
 260:	d8 9a       	sbi	0x1b, 0	; 27
	toggleE();
 262:	0e 94 08 01 	call	0x210	; 0x210 <toggleE>
	PORTUSED=((sig&(0x0F))*16)|(PORTUSED&(1<<3));
 266:	8b b3       	in	r24, 0x1b	; 27
 268:	12 95       	swap	r17
 26a:	10 7f       	andi	r17, 0xF0	; 240
 26c:	88 70       	andi	r24, 0x08	; 8
 26e:	81 2b       	or	r24, r17
 270:	8b bb       	out	0x1b, r24	; 27
	SETBIT(PORTA,0);		// selects dat register RS=1
 272:	d8 9a       	sbi	0x1b, 0	; 27
	toggleE();
 274:	0e 94 08 01 	call	0x210	; 0x210 <toggleE>
}
 278:	1f 91       	pop	r17
 27a:	08 95       	ret

0000027c <lcd_string>:
		lcd_putchar(single);
	}
}

void lcd_string(unsigned char str[32])
{
 27c:	ef 92       	push	r14
 27e:	ff 92       	push	r15
 280:	1f 93       	push	r17
 282:	cf 93       	push	r28
 284:	df 93       	push	r29
 286:	7c 01       	movw	r14, r24
	unsigned char k=0;
	CLEARBIT(PORTUSED,2);
 288:	da 98       	cbi	0x1b, 2	; 27
 28a:	10 e0       	ldi	r17, 0x00	; 0
 28c:	19 c0       	rjmp	.+50     	; 0x2c0 <lcd_string+0x44>
	while(str[k]!='\0')	//Till null character is encountered
		{
			if(k==16)
 28e:	10 31       	cpi	r17, 0x10	; 16
 290:	19 f4       	brne	.+6      	; 0x298 <lcd_string+0x1c>
			{
			lcd_cmd(LINE2);
 292:	80 ec       	ldi	r24, 0xC0	; 192
 294:	0e 94 13 01 	call	0x226	; 0x226 <lcd_cmd>
			}
			PORTUSED=((str[k])&0xF0)|(PORTUSED&(1<<3));
 298:	9b b3       	in	r25, 0x1b	; 27
 29a:	88 81       	ld	r24, Y
 29c:	80 7f       	andi	r24, 0xF0	; 240
 29e:	98 70       	andi	r25, 0x08	; 8
 2a0:	89 2b       	or	r24, r25
 2a2:	8b bb       	out	0x1b, r24	; 27
			SETBIT(PORTA,0);			// selects dat register RS=1
 2a4:	d8 9a       	sbi	0x1b, 0	; 27
			toggleE();
 2a6:	0e 94 08 01 	call	0x210	; 0x210 <toggleE>
			PORTUSED=((str[k]&(0x0F))*16)|(PORTUSED&(1<<3));
 2aa:	9b b3       	in	r25, 0x1b	; 27
 2ac:	88 81       	ld	r24, Y
 2ae:	82 95       	swap	r24
 2b0:	80 7f       	andi	r24, 0xF0	; 240
 2b2:	98 70       	andi	r25, 0x08	; 8
 2b4:	89 2b       	or	r24, r25
 2b6:	8b bb       	out	0x1b, r24	; 27
			SETBIT(PORTA,0);			// selects dat register RS=1
 2b8:	d8 9a       	sbi	0x1b, 0	; 27
			toggleE();
 2ba:	0e 94 08 01 	call	0x210	; 0x210 <toggleE>
			k++;
 2be:	1f 5f       	subi	r17, 0xFF	; 255

void lcd_string(unsigned char str[32])
{
	unsigned char k=0;
	CLEARBIT(PORTUSED,2);
	while(str[k]!='\0')	//Till null character is encountered
 2c0:	e7 01       	movw	r28, r14
 2c2:	c1 0f       	add	r28, r17
 2c4:	d1 1d       	adc	r29, r1
 2c6:	88 81       	ld	r24, Y
 2c8:	88 23       	and	r24, r24
 2ca:	09 f7       	brne	.-62     	; 0x28e <lcd_string+0x12>
			PORTUSED=((str[k]&(0x0F))*16)|(PORTUSED&(1<<3));
			SETBIT(PORTA,0);			// selects dat register RS=1
			toggleE();
			k++;
		}
}
 2cc:	df 91       	pop	r29
 2ce:	cf 91       	pop	r28
 2d0:	1f 91       	pop	r17
 2d2:	ff 90       	pop	r15
 2d4:	ef 90       	pop	r14
 2d6:	08 95       	ret

000002d8 <lcd_gotoxy1>:
	lcd_char(O+0x30);
}

void lcd_gotoxy1(unsigned char pos)
{
	lcd_cmd(LINE1+pos);     // write pos=0 if u want to select 1st location
 2d8:	80 58       	subi	r24, 0x80	; 128
 2da:	0e 94 13 01 	call	0x226	; 0x226 <lcd_cmd>
}
 2de:	08 95       	ret

000002e0 <lcd_gotoxy2>:

void lcd_gotoxy2(unsigned char pos)
{
	lcd_cmd(LINE2+pos);		 // write pos=0 if u want to select 1st location
 2e0:	80 54       	subi	r24, 0x40	; 64
 2e2:	0e 94 13 01 	call	0x226	; 0x226 <lcd_cmd>
}
 2e6:	08 95       	ret

000002e8 <lcd_char>:
}

void lcd_char(unsigned char single)
{
	int i;
	if(single =='\t')
 2e8:	89 30       	cpi	r24, 0x09	; 9
 2ea:	29 f4       	brne	.+10     	; 0x2f6 <lcd_char+0xe>
	{
		for(i =0 ; i<2 ; i++)
		{	
		lcd_putchar(' ');
 2ec:	80 e2       	ldi	r24, 0x20	; 32
 2ee:	0e 94 28 01 	call	0x250	; 0x250 <lcd_putchar>
 2f2:	80 e2       	ldi	r24, 0x20	; 32
 2f4:	06 c0       	rjmp	.+12     	; 0x302 <lcd_char+0x1a>
		}
	}
	else if(single=='\n')
 2f6:	8a 30       	cpi	r24, 0x0A	; 10
 2f8:	21 f4       	brne	.+8      	; 0x302 <lcd_char+0x1a>
	{
		lcd_gotoxy2(0);	
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	0e 94 70 01 	call	0x2e0	; 0x2e0 <lcd_gotoxy2>
 300:	08 95       	ret
	}
	else 
	{
		lcd_putchar(single);
 302:	0e 94 28 01 	call	0x250	; 0x250 <lcd_putchar>
 306:	08 95       	ret

00000308 <lcd_showvalue>:
		}
}


void lcd_showvalue(unsigned char num)	//prints the decimal 3digit value of num
{
 308:	ef 92       	push	r14
 30a:	ff 92       	push	r15
 30c:	0f 93       	push	r16
 30e:	1f 93       	push	r17
 310:	18 2f       	mov	r17, r24
	unsigned char H=0,T=0,O=0;
	H=num/100;
 312:	64 e6       	ldi	r22, 0x64	; 100
 314:	0e 94 36 02 	call	0x46c	; 0x46c <__udivmodqi4>
 318:	48 2f       	mov	r20, r24
	T=(num - (H*100))/10;
 31a:	28 2f       	mov	r18, r24
 31c:	30 e0       	ldi	r19, 0x00	; 0
 31e:	8c e9       	ldi	r24, 0x9C	; 156
 320:	9f ef       	ldi	r25, 0xFF	; 255
 322:	28 9f       	mul	r18, r24
 324:	70 01       	movw	r14, r0
 326:	29 9f       	mul	r18, r25
 328:	f0 0c       	add	r15, r0
 32a:	38 9f       	mul	r19, r24
 32c:	f0 0c       	add	r15, r0
 32e:	11 24       	eor	r1, r1
 330:	c7 01       	movw	r24, r14
 332:	81 0f       	add	r24, r17
 334:	91 1d       	adc	r25, r1
 336:	6a e0       	ldi	r22, 0x0A	; 10
 338:	70 e0       	ldi	r23, 0x00	; 0
 33a:	0e 94 56 02 	call	0x4ac	; 0x4ac <__divmodhi4>
 33e:	06 2f       	mov	r16, r22
	O=(num - (H*100) - (T*10));
	
	lcd_char(H+0x30);
 340:	84 2f       	mov	r24, r20
 342:	80 5d       	subi	r24, 0xD0	; 208
 344:	0e 94 74 01 	call	0x2e8	; 0x2e8 <lcd_char>
	lcd_char(T+0x30);
 348:	80 2f       	mov	r24, r16
 34a:	80 5d       	subi	r24, 0xD0	; 208
 34c:	0e 94 74 01 	call	0x2e8	; 0x2e8 <lcd_char>
	lcd_char(O+0x30);
 350:	10 5d       	subi	r17, 0xD0	; 208
 352:	1e 0d       	add	r17, r14
 354:	86 ef       	ldi	r24, 0xF6	; 246
 356:	9f ef       	ldi	r25, 0xFF	; 255
 358:	08 9f       	mul	r16, r24
 35a:	00 2d       	mov	r16, r0
 35c:	11 24       	eor	r1, r1
 35e:	80 2f       	mov	r24, r16
 360:	81 0f       	add	r24, r17
 362:	0e 94 74 01 	call	0x2e8	; 0x2e8 <lcd_char>
}
 366:	1f 91       	pop	r17
 368:	0f 91       	pop	r16
 36a:	ff 90       	pop	r15
 36c:	ef 90       	pop	r14
 36e:	08 95       	ret

00000370 <lcd_exit>:
}


void lcd_exit(void)
{
	PORTUSED=save;
 370:	80 91 1c 01 	lds	r24, 0x011C
 374:	8b bb       	out	0x1b, r24	; 27
}
 376:	08 95       	ret

00000378 <WaitMs>:

/* waits (pauses) for ms milliseconds (assumes clock at 16MHz) */
void WaitMs(unsigned int ms)
{
 378:	0a c0       	rjmp	.+20     	; 0x38e <WaitMs+0x16>
	int i;

	while (ms-- > 0)
 37a:	20 e0       	ldi	r18, 0x00	; 0
 37c:	30 e0       	ldi	r19, 0x00	; 0
	{
		/* 16384 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
			asm("nop");
 37e:	00 00       	nop

	while (ms-- > 0)
	{
		/* 16384 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
 380:	2f 5f       	subi	r18, 0xFF	; 255
 382:	3f 4f       	sbci	r19, 0xFF	; 255
 384:	4c e0       	ldi	r20, 0x0C	; 12
 386:	2c 3c       	cpi	r18, 0xCC	; 204
 388:	34 07       	cpc	r19, r20
 38a:	c9 f7       	brne	.-14     	; 0x37e <WaitMs+0x6>
 38c:	01 97       	sbiw	r24, 0x01	; 1
/* waits (pauses) for ms milliseconds (assumes clock at 16MHz) */
void WaitMs(unsigned int ms)
{
	int i;

	while (ms-- > 0)
 38e:	00 97       	sbiw	r24, 0x00	; 0
 390:	a1 f7       	brne	.-24     	; 0x37a <WaitMs+0x2>
		/* 16384 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
			asm("nop");
	}
}
 392:	08 95       	ret

00000394 <lcd_init>:
	toggleE();
}

void lcd_init(void)	//init the lcd 
{	
	save=PORTUSED;
 394:	8b b3       	in	r24, 0x1b	; 27
 396:	80 93 1c 01 	sts	0x011C, r24
	DDRUSED=0xFF;		// declare it as an o/p port
 39a:	8f ef       	ldi	r24, 0xFF	; 255
 39c:	8a bb       	out	0x1a, r24	; 26
	WaitMs(15);		// Given in datasheet ( Cmd for selecting 4 bit mode )
 39e:	8f e0       	ldi	r24, 0x0F	; 15
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	0e 94 bc 01 	call	0x378	; 0x378 <WaitMs>
	lcd_cmd(0x03);
 3a6:	83 e0       	ldi	r24, 0x03	; 3
 3a8:	0e 94 13 01 	call	0x226	; 0x226 <lcd_cmd>
	WaitMs(45);
 3ac:	8d e2       	ldi	r24, 0x2D	; 45
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	0e 94 bc 01 	call	0x378	; 0x378 <WaitMs>
	lcd_cmd(0x02);
 3b4:	82 e0       	ldi	r24, 0x02	; 2
 3b6:	0e 94 13 01 	call	0x226	; 0x226 <lcd_cmd>
	WaitMs(15);
 3ba:	8f e0       	ldi	r24, 0x0F	; 15
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	0e 94 bc 01 	call	0x378	; 0x378 <WaitMs>
	CLEARBIT(PORTUSED,0+2);   // RS to 0 means select COmmand register, E to 0 ..
 3c2:	da 98       	cbi	0x1b, 2	; 27
	lcd_cmd(0x01);     // Cmd for clear display
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	0e 94 13 01 	call	0x226	; 0x226 <lcd_cmd>
	lcd_cmd(0x0F);		// Cmd for display ON and cursor blinking
 3ca:	8f e0       	ldi	r24, 0x0F	; 15
 3cc:	0e 94 13 01 	call	0x226	; 0x226 <lcd_cmd>
	lcd_cmd(0x02);		// Cmd for returning home
 3d0:	82 e0       	ldi	r24, 0x02	; 2
 3d2:	0e 94 13 01 	call	0x226	; 0x226 <lcd_cmd>
	lcd_cmd(LINE1);		// selects the cursor to first line first location...
 3d6:	80 e8       	ldi	r24, 0x80	; 128
 3d8:	0e 94 13 01 	call	0x226	; 0x226 <lcd_cmd>
	WaitMs(15);			
 3dc:	8f e0       	ldi	r24, 0x0F	; 15
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	0e 94 bc 01 	call	0x378	; 0x378 <WaitMs>
}
 3e4:	08 95       	ret

000003e6 <ldr_init>:
void ldr_init(void)
{
ADMUX|=(1<<REFS1)|(1<<REFS0);// REF V/G int 2.56 & 10 bit resolution ,adc0 chann
 3e6:	87 b1       	in	r24, 0x07	; 7
 3e8:	80 6c       	ori	r24, 0xC0	; 192
 3ea:	87 b9       	out	0x07, r24	; 7
ADCSRA|=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);//ADC ENABLE & PRESCALAR clk/128, normal mode
 3ec:	86 b1       	in	r24, 0x06	; 6
 3ee:	87 68       	ori	r24, 0x87	; 135
 3f0:	86 b9       	out	0x06, r24	; 6
}
 3f2:	08 95       	ret

000003f4 <ldr_read>:

void ldr_read(void)
{
 3f4:	cf 93       	push	r28
 3f6:	df 93       	push	r29
unsigned char b=0;
unsigned int a=0;// Declaring as int for storing 10 bit data
ADCSRA|=(1<<ADSC);// ALWAYS SET START CONV BIT FOR NORMAL MODE
 3f8:	36 9a       	sbi	0x06, 6	; 6
while(!(ADCSRA&(1<<ADIF)));//waIt till ADIF BECOMES 1
 3fa:	34 9b       	sbis	0x06, 4	; 6
 3fc:	fe cf       	rjmp	.-4      	; 0x3fa <ldr_read+0x6>
b=ADCL;//READ LOWER RESULT DATA REG
 3fe:	34 b1       	in	r19, 0x04	; 4
a=ADCH;//READ HIGHER RESULT DATA REG
 400:	25 b1       	in	r18, 0x05	; 5
a=(b|(a<<8));//combine two result
 402:	92 2f       	mov	r25, r18
 404:	80 e0       	ldi	r24, 0x00	; 0
 406:	c3 2f       	mov	r28, r19
 408:	d0 e0       	ldi	r29, 0x00	; 0
 40a:	c8 2b       	or	r28, r24
 40c:	d9 2b       	or	r29, r25
uart1_tx_num(a);
 40e:	ce 01       	movw	r24, r28
 410:	0e 94 8a 00 	call	0x114	; 0x114 <uart1_tx_num>
 414:	88 e8       	ldi	r24, 0x88	; 136
 416:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 418:	20 e9       	ldi	r18, 0x90	; 144
 41a:	31 e0       	ldi	r19, 0x01	; 1
 41c:	f9 01       	movw	r30, r18
 41e:	31 97       	sbiw	r30, 0x01	; 1
 420:	f1 f7       	brne	.-4      	; 0x41e <ldr_read+0x2a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 422:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 424:	d9 f7       	brne	.-10     	; 0x41c <ldr_read+0x28>
_delay_ms(500);

lcd_showvalue(a);
 426:	8c 2f       	mov	r24, r28
 428:	0e 94 84 01 	call	0x308	; 0x308 <lcd_showvalue>
 42c:	88 e8       	ldi	r24, 0x88	; 136
 42e:	93 e1       	ldi	r25, 0x13	; 19
 430:	20 e9       	ldi	r18, 0x90	; 144
 432:	31 e0       	ldi	r19, 0x01	; 1
 434:	f9 01       	movw	r30, r18
 436:	31 97       	sbiw	r30, 0x01	; 1
 438:	f1 f7       	brne	.-4      	; 0x436 <ldr_read+0x42>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 43a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 43c:	d9 f7       	brne	.-10     	; 0x434 <ldr_read+0x40>
_delay_ms(500);
}
 43e:	df 91       	pop	r29
 440:	cf 91       	pop	r28
 442:	08 95       	ret

00000444 <main>:
void ldr_init(void)
{
ADMUX|=(1<<REFS1)|(1<<REFS0);// REF V/G int 2.56 & 10 bit resolution ,adc0 chann
 444:	87 b1       	in	r24, 0x07	; 7
 446:	80 6c       	ori	r24, 0xC0	; 192
 448:	87 b9       	out	0x07, r24	; 7
ADCSRA|=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);//ADC ENABLE & PRESCALAR clk/128, normal mode
 44a:	86 b1       	in	r24, 0x06	; 6
 44c:	87 68       	ori	r24, 0x87	; 135
 44e:	86 b9       	out	0x06, r24	; 6
#include"LCD_mega128.h"
#include"adc.h"
int main(void)
{
ldr_init();
uart1_init();
 450:	0e 94 65 00 	call	0xca	; 0xca <uart1_init>
uart1_tx_str("uart has initialised....\n");
 454:	80 e0       	ldi	r24, 0x00	; 0
 456:	91 e0       	ldi	r25, 0x01	; 1
 458:	0e 94 7d 00 	call	0xfa	; 0xfa <uart1_tx_str>
lcd_init();
 45c:	0e 94 ca 01 	call	0x394	; 0x394 <lcd_init>
lcd_putchar('A');
 460:	81 e4       	ldi	r24, 0x41	; 65
 462:	0e 94 28 01 	call	0x250	; 0x250 <lcd_putchar>
while(1)
    {
    ldr_read();
 466:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <ldr_read>
 46a:	fd cf       	rjmp	.-6      	; 0x466 <main+0x22>

0000046c <__udivmodqi4>:
 46c:	99 1b       	sub	r25, r25
 46e:	79 e0       	ldi	r23, 0x09	; 9
 470:	04 c0       	rjmp	.+8      	; 0x47a <__udivmodqi4_ep>

00000472 <__udivmodqi4_loop>:
 472:	99 1f       	adc	r25, r25
 474:	96 17       	cp	r25, r22
 476:	08 f0       	brcs	.+2      	; 0x47a <__udivmodqi4_ep>
 478:	96 1b       	sub	r25, r22

0000047a <__udivmodqi4_ep>:
 47a:	88 1f       	adc	r24, r24
 47c:	7a 95       	dec	r23
 47e:	c9 f7       	brne	.-14     	; 0x472 <__udivmodqi4_loop>
 480:	80 95       	com	r24
 482:	08 95       	ret

00000484 <__udivmodhi4>:
 484:	aa 1b       	sub	r26, r26
 486:	bb 1b       	sub	r27, r27
 488:	51 e1       	ldi	r21, 0x11	; 17
 48a:	07 c0       	rjmp	.+14     	; 0x49a <__udivmodhi4_ep>

0000048c <__udivmodhi4_loop>:
 48c:	aa 1f       	adc	r26, r26
 48e:	bb 1f       	adc	r27, r27
 490:	a6 17       	cp	r26, r22
 492:	b7 07       	cpc	r27, r23
 494:	10 f0       	brcs	.+4      	; 0x49a <__udivmodhi4_ep>
 496:	a6 1b       	sub	r26, r22
 498:	b7 0b       	sbc	r27, r23

0000049a <__udivmodhi4_ep>:
 49a:	88 1f       	adc	r24, r24
 49c:	99 1f       	adc	r25, r25
 49e:	5a 95       	dec	r21
 4a0:	a9 f7       	brne	.-22     	; 0x48c <__udivmodhi4_loop>
 4a2:	80 95       	com	r24
 4a4:	90 95       	com	r25
 4a6:	bc 01       	movw	r22, r24
 4a8:	cd 01       	movw	r24, r26
 4aa:	08 95       	ret

000004ac <__divmodhi4>:
 4ac:	97 fb       	bst	r25, 7
 4ae:	09 2e       	mov	r0, r25
 4b0:	07 26       	eor	r0, r23
 4b2:	0a d0       	rcall	.+20     	; 0x4c8 <__divmodhi4_neg1>
 4b4:	77 fd       	sbrc	r23, 7
 4b6:	04 d0       	rcall	.+8      	; 0x4c0 <__divmodhi4_neg2>
 4b8:	e5 df       	rcall	.-54     	; 0x484 <__udivmodhi4>
 4ba:	06 d0       	rcall	.+12     	; 0x4c8 <__divmodhi4_neg1>
 4bc:	00 20       	and	r0, r0
 4be:	1a f4       	brpl	.+6      	; 0x4c6 <__divmodhi4_exit>

000004c0 <__divmodhi4_neg2>:
 4c0:	70 95       	com	r23
 4c2:	61 95       	neg	r22
 4c4:	7f 4f       	sbci	r23, 0xFF	; 255

000004c6 <__divmodhi4_exit>:
 4c6:	08 95       	ret

000004c8 <__divmodhi4_neg1>:
 4c8:	f6 f7       	brtc	.-4      	; 0x4c6 <__divmodhi4_exit>
 4ca:	90 95       	com	r25
 4cc:	81 95       	neg	r24
 4ce:	9f 4f       	sbci	r25, 0xFF	; 255
 4d0:	08 95       	ret

000004d2 <_exit>:
 4d2:	f8 94       	cli

000004d4 <__stop_program>:
 4d4:	ff cf       	rjmp	.-2      	; 0x4d4 <__stop_program>
