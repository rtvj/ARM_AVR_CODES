
mainGPsw.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  00000162  000001d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000162  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 00000020  00000000  00000000  000001fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000070  00000000  00000000  0000021e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001a3  00000000  00000000  0000028e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000e7  00000000  00000000  00000431  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000018a  00000000  00000000  00000518  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000070  00000000  00000000  000006a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000e8  00000000  00000000  00000714  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000005e  00000000  00000000  000007fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  0000085a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  7c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  80:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  84:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  88:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e6       	ldi	r30, 0x62	; 98
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <.do_copy_data_start>

000000a4 <.do_copy_data_loop>:
  a4:	05 90       	lpm	r0, Z+
  a6:	0d 92       	st	X+, r0

000000a8 <.do_copy_data_start>:
  a8:	a8 32       	cpi	r26, 0x28	; 40
  aa:	b1 07       	cpc	r27, r17
  ac:	d9 f7       	brne	.-10     	; 0xa4 <.do_copy_data_loop>
  ae:	0e 94 90 00 	call	0x120	; 0x120 <main>
  b2:	0c 94 af 00 	jmp	0x15e	; 0x15e <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <Serial_Init>:
		USART_Init ( MYUBRR );	/* SET THE BAUD RATE, ENABLE THE TRANSMISSION AND RECEPTION OF SERIAL, SET THE FRAME FORMAT */
	}

	void USART_Init( unsigned int ubrr )
	{
	  UBRR1H = (unsigned char)(ubrr>>8); /* Set baud rate */
  ba:	10 92 98 00 	sts	0x0098, r1
	  UBRR1L = (unsigned char)ubrr;
  be:	87 e6       	ldi	r24, 0x67	; 103
  c0:	80 93 99 00 	sts	0x0099, r24

	  UCSR1B = (1<<RXEN)|(1<<TXEN);	/* Enable receiver and transmitter */
  c4:	88 e1       	ldi	r24, 0x18	; 24
  c6:	80 93 9a 00 	sts	0x009A, r24

	  UCSR1C = (1<<USBS)|(3<<UCSZ0);/* Set frame format: 8data, 2stop bit */
  ca:	8e e0       	ldi	r24, 0x0E	; 14
  cc:	80 93 9d 00 	sts	0x009D, r24


	void Serial_Init(void)
	{
		USART_Init ( MYUBRR );	/* SET THE BAUD RATE, ENABLE THE TRANSMISSION AND RECEPTION OF SERIAL, SET THE FRAME FORMAT */
	}
  d0:	08 95       	ret

000000d2 <USART_Init>:

	void USART_Init( unsigned int ubrr )
	{
	  UBRR1H = (unsigned char)(ubrr>>8); /* Set baud rate */
  d2:	90 93 98 00 	sts	0x0098, r25
	  UBRR1L = (unsigned char)ubrr;
  d6:	80 93 99 00 	sts	0x0099, r24

	  UCSR1B = (1<<RXEN)|(1<<TXEN);	/* Enable receiver and transmitter */
  da:	88 e1       	ldi	r24, 0x18	; 24
  dc:	80 93 9a 00 	sts	0x009A, r24

	  UCSR1C = (1<<USBS)|(3<<UCSZ0);/* Set frame format: 8data, 2stop bit */
  e0:	8e e0       	ldi	r24, 0x0E	; 14
  e2:	80 93 9d 00 	sts	0x009D, r24
	}
  e6:	08 95       	ret

000000e8 <USART_Receive>:

	unsigned char USART_Receive( void )
	{
	  while (!(UCSR1A & (1<<RXC))); /* Wait for data to be received */
  e8:	80 91 9b 00 	lds	r24, 0x009B
  ec:	87 ff       	sbrs	r24, 7
  ee:	fc cf       	rjmp	.-8      	; 0xe8 <USART_Receive>

	  return UDR1;	/* Get and return received data from buffer */
  f0:	80 91 9c 00 	lds	r24, 0x009C
	}
  f4:	08 95       	ret

000000f6 <USART_Transmit>:

	void USART_Transmit( unsigned char data )
	{
  f6:	98 2f       	mov	r25, r24
	  while (!(UCSR1A & (1<<UDRE)));	/* Wait for empty transmit buffer */
  f8:	80 91 9b 00 	lds	r24, 0x009B
  fc:	85 ff       	sbrs	r24, 5
  fe:	fc cf       	rjmp	.-8      	; 0xf8 <USART_Transmit+0x2>

	  UDR1 = data;	/* Put data into buffer, sends the data */
 100:	90 93 9c 00 	sts	0x009C, r25
	}
 104:	08 95       	ret

00000106 <print_string>:

	void print_string(unsigned char *Mystr_ptr)
	{
 106:	fc 01       	movw	r30, r24
 108:	07 c0       	rjmp	.+14     	; 0x118 <print_string+0x12>
	  return UDR1;	/* Get and return received data from buffer */
	}

	void USART_Transmit( unsigned char data )
	{
	  while (!(UCSR1A & (1<<UDRE)));	/* Wait for empty transmit buffer */
 10a:	80 91 9b 00 	lds	r24, 0x009B
 10e:	85 ff       	sbrs	r24, 5
 110:	fc cf       	rjmp	.-8      	; 0x10a <print_string+0x4>
	}

	void print_string(unsigned char *Mystr_ptr)
	{
		while((*Mystr_ptr) != '\0')	/* print char from str pointer and point to next location */
				USART_Transmit((*Mystr_ptr++));
 112:	31 96       	adiw	r30, 0x01	; 1

	void USART_Transmit( unsigned char data )
	{
	  while (!(UCSR1A & (1<<UDRE)));	/* Wait for empty transmit buffer */

	  UDR1 = data;	/* Put data into buffer, sends the data */
 114:	90 93 9c 00 	sts	0x009C, r25
	}

	void print_string(unsigned char *Mystr_ptr)
	{
		while((*Mystr_ptr) != '\0')	/* print char from str pointer and point to next location */
 118:	90 81       	ld	r25, Z
 11a:	99 23       	and	r25, r25
 11c:	b1 f7       	brne	.-20     	; 0x10a <print_string+0x4>
				USART_Transmit((*Mystr_ptr++));
	}
 11e:	08 95       	ret

00000120 <main>:
		USART_Init ( MYUBRR );	/* SET THE BAUD RATE, ENABLE THE TRANSMISSION AND RECEPTION OF SERIAL, SET THE FRAME FORMAT */
	}

	void USART_Init( unsigned int ubrr )
	{
	  UBRR1H = (unsigned char)(ubrr>>8); /* Set baud rate */
 120:	10 92 98 00 	sts	0x0098, r1
	  UBRR1L = (unsigned char)ubrr;
 124:	87 e6       	ldi	r24, 0x67	; 103
 126:	80 93 99 00 	sts	0x0099, r24

	  UCSR1B = (1<<RXEN)|(1<<TXEN);	/* Enable receiver and transmitter */
 12a:	88 e1       	ldi	r24, 0x18	; 24
 12c:	80 93 9a 00 	sts	0x009A, r24

	  UCSR1C = (1<<USBS)|(3<<UCSZ0);/* Set frame format: 8data, 2stop bit */
 130:	8e e0       	ldi	r24, 0x0E	; 14
 132:	80 93 9d 00 	sts	0x009D, r24

int main(void)
{

	Serial_Init();
	print_string("\n\r START MAIN");
 136:	80 e0       	ldi	r24, 0x00	; 0
 138:	91 e0       	ldi	r25, 0x01	; 1
 13a:	0e 94 83 00 	call	0x106	; 0x106 <print_string>

	//PORTD = 0x00;
	SW_DIR;
 13e:	81 b3       	in	r24, 0x11	; 17
 140:	8f 73       	andi	r24, 0x3F	; 63
 142:	81 bb       	out	0x11, r24	; 17

	while(1)
	{
		if(!(EXSW1))	/* check for pin for low */
 144:	87 99       	sbic	0x10, 7	; 16
 146:	04 c0       	rjmp	.+8      	; 0x150 <main+0x30>
			print_string("\nSW1 PRESSED");
 148:	8e e0       	ldi	r24, 0x0E	; 14
 14a:	91 e0       	ldi	r25, 0x01	; 1
 14c:	0e 94 83 00 	call	0x106	; 0x106 <print_string>
		if(!(EXSW2))	/* check for pin for low */
 150:	86 99       	sbic	0x10, 6	; 16
 152:	f8 cf       	rjmp	.-16     	; 0x144 <main+0x24>
			print_string("\nSW2 PRESSED");
 154:	8b e1       	ldi	r24, 0x1B	; 27
 156:	91 e0       	ldi	r25, 0x01	; 1
 158:	0e 94 83 00 	call	0x106	; 0x106 <print_string>
 15c:	f3 cf       	rjmp	.-26     	; 0x144 <main+0x24>

0000015e <_exit>:
 15e:	f8 94       	cli

00000160 <__stop_program>:
 160:	ff cf       	rjmp	.-2      	; 0x160 <__stop_program>
