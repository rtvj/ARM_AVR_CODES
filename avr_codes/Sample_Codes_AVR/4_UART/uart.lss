
uart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000102  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000156  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  00000176  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000012b  00000000  00000000  00000191  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000bf  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000148  00000000  00000000  0000037b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  000004c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000ce  00000000  00000000  000004e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000028  00000000  00000000  000005b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  000005da  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  7c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  80:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  84:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  88:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	0e 94 52 00 	call	0xa4	; 0xa4 <main>
  9c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <main>:
#include<util/delay.h>

int main(void)
{

UBRR1L = 103;
  a4:	87 e6       	ldi	r24, 0x67	; 103
  a6:	80 93 99 00 	sts	0x0099, r24
UBRR1H = 0;
  aa:	10 92 98 00 	sts	0x0098, r1

UCSR1B = 0X18;
  ae:	88 e1       	ldi	r24, 0x18	; 24
  b0:	80 93 9a 00 	sts	0x009A, r24
UCSR1C = 0X86;
  b4:	86 e8       	ldi	r24, 0x86	; 134
  b6:	80 93 9d 00 	sts	0x009D, r24
unsigned char a,b,c;

a = b = c = 0;
a = 11;
b = 0;
c = a/b;
  ba:	8b e0       	ldi	r24, 0x0B	; 11
  bc:	60 e0       	ldi	r22, 0x00	; 0
  be:	0e 94 73 00 	call	0xe6	; 0xe6 <__udivmodqi4>
	while(1)
	{
		while(!(UCSR1A & (1<<UDRE)));
		UDR1 = c + 0x30;
  c2:	48 2f       	mov	r20, r24
  c4:	40 5d       	subi	r20, 0xD0	; 208
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  c6:	20 e9       	ldi	r18, 0x90	; 144
  c8:	31 e0       	ldi	r19, 0x01	; 1
a = 11;
b = 0;
c = a/b;
	while(1)
	{
		while(!(UCSR1A & (1<<UDRE)));
  ca:	80 91 9b 00 	lds	r24, 0x009B
  ce:	85 ff       	sbrs	r24, 5
  d0:	fc cf       	rjmp	.-8      	; 0xca <main+0x26>
		UDR1 = c + 0x30;
  d2:	40 93 9c 00 	sts	0x009C, r20
  d6:	80 e1       	ldi	r24, 0x10	; 16
  d8:	97 e2       	ldi	r25, 0x27	; 39
  da:	f9 01       	movw	r30, r18
  dc:	31 97       	sbiw	r30, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <main+0x38>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  e0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  e2:	d9 f7       	brne	.-10     	; 0xda <main+0x36>
  e4:	f2 cf       	rjmp	.-28     	; 0xca <main+0x26>

000000e6 <__udivmodqi4>:
  e6:	99 1b       	sub	r25, r25
  e8:	79 e0       	ldi	r23, 0x09	; 9
  ea:	04 c0       	rjmp	.+8      	; 0xf4 <__udivmodqi4_ep>

000000ec <__udivmodqi4_loop>:
  ec:	99 1f       	adc	r25, r25
  ee:	96 17       	cp	r25, r22
  f0:	08 f0       	brcs	.+2      	; 0xf4 <__udivmodqi4_ep>
  f2:	96 1b       	sub	r25, r22

000000f4 <__udivmodqi4_ep>:
  f4:	88 1f       	adc	r24, r24
  f6:	7a 95       	dec	r23
  f8:	c9 f7       	brne	.-14     	; 0xec <__udivmodqi4_loop>
  fa:	80 95       	com	r24
  fc:	08 95       	ret

000000fe <_exit>:
  fe:	f8 94       	cli

00000100 <__stop_program>:
 100:	ff cf       	rjmp	.-2      	; 0x100 <__stop_program>
