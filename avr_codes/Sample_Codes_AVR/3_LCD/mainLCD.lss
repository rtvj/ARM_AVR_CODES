
mainLCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00000328  000003bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000328  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800118  00800118  000003d4  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000003d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000d7  00000000  00000000  000003f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000297  00000000  00000000  000004cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000f0  00000000  00000000  00000762  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002f8  00000000  00000000  00000852  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e0  00000000  00000000  00000b4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000110  00000000  00000000  00000c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000122  00000000  00000000  00000d3c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
   8:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
   c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  14:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  1c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  24:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  2c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  48:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  54:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  58:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  5c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  60:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  68:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  6c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  70:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  74:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  78:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  7c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  80:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  84:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  88:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e2       	ldi	r30, 0x28	; 40
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <.do_copy_data_start>

000000a4 <.do_copy_data_loop>:
  a4:	05 90       	lpm	r0, Z+
  a6:	0d 92       	st	X+, r0

000000a8 <.do_copy_data_start>:
  a8:	a8 31       	cpi	r26, 0x18	; 24
  aa:	b1 07       	cpc	r27, r17
  ac:	d9 f7       	brne	.-10     	; 0xa4 <.do_copy_data_loop>

000000ae <__do_clear_bss>:
  ae:	11 e0       	ldi	r17, 0x01	; 1
  b0:	a8 e1       	ldi	r26, 0x18	; 24
  b2:	b1 e0       	ldi	r27, 0x01	; 1
  b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
  b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
  b8:	ab 31       	cpi	r26, 0x1B	; 27
  ba:	b1 07       	cpc	r27, r17
  bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
  be:	0e 94 4e 01 	call	0x29c	; 0x29c <main>
  c2:	0c 94 92 01 	jmp	0x324	; 0x324 <_exit>

000000c6 <__bad_interrupt>:
  c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <dely_ns>:
dely_ns(250);
CLEARBIT(PORTUSED,BIT(2));
}

void dely_ns(unsigned char tim)
{
  ca:	20 91 18 01 	lds	r18, 0x0118
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <dely_ns+0xc>
	for(j=0;j<tim;j++)
  d2:	9f 5f       	subi	r25, 0xFF	; 255
  d4:	2a e0       	ldi	r18, 0x0A	; 10
  d6:	98 17       	cp	r25, r24
  d8:	e0 f3       	brcs	.-8      	; 0xd2 <dely_ns+0x8>
  da:	20 93 18 01 	sts	0x0118, r18
  de:	90 93 19 01 	sts	0x0119, r25
	{
		for(k=0;k<10;k++)
		{};
	}
}
  e2:	08 95       	ret

000000e4 <toggleE>:
		
}

void toggleE(void)
{
SETBIT(PORTUSED,BIT(2));
  e4:	da 9a       	sbi	0x1b, 2	; 27
dely_ns(250);
  e6:	8a ef       	ldi	r24, 0xFA	; 250
  e8:	0e 94 65 00 	call	0xca	; 0xca <dely_ns>
CLEARBIT(PORTUSED,BIT(2));
  ec:	da 98       	cbi	0x1b, 2	; 27
}
  ee:	08 95       	ret

000000f0 <lcd_cmd>:
		{};
	}
}

void lcd_cmd(unsigned char cmd)
{
  f0:	0f 93       	push	r16
  f2:	1f 93       	push	r17
  f4:	08 2f       	mov	r16, r24
	CLEARBIT(PORTUSED,BIT(0)+BIT(1)+BIT(2));
  f6:	8b b3       	in	r24, 0x1b	; 27
  f8:	84 70       	andi	r24, 0x04	; 4
  fa:	8b bb       	out	0x1b, r24	; 27
	PORTUSED=((cmd&0xF0));			
  fc:	80 2f       	mov	r24, r16
  fe:	80 7f       	andi	r24, 0xF0	; 240
 100:	8b bb       	out	0x1b, r24	; 27
	toggleE();
 102:	0e 94 72 00 	call	0xe4	; 0xe4 <toggleE>
	PORTUSED=(((cmd&(0x0F))*16));	
 106:	10 e0       	ldi	r17, 0x00	; 0
 108:	0f 70       	andi	r16, 0x0F	; 15
 10a:	10 70       	andi	r17, 0x00	; 0
 10c:	84 e0       	ldi	r24, 0x04	; 4
 10e:	00 0f       	add	r16, r16
 110:	11 1f       	adc	r17, r17
 112:	8a 95       	dec	r24
 114:	e1 f7       	brne	.-8      	; 0x10e <lcd_cmd+0x1e>
 116:	0b bb       	out	0x1b, r16	; 27
	toggleE();
 118:	0e 94 72 00 	call	0xe4	; 0xe4 <toggleE>
}
 11c:	1f 91       	pop	r17
 11e:	0f 91       	pop	r16
 120:	08 95       	ret

00000122 <lcd_putchar>:

void lcd_putchar(unsigned char sig)
{
 122:	1f 93       	push	r17
 124:	18 2f       	mov	r17, r24
		PORTUSED=0x01;
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	8b bb       	out	0x1b, r24	; 27
		CLEARBIT(PORTUSED,BIT(0)+BIT(2));
 12a:	8b b3       	in	r24, 0x1b	; 27
 12c:	82 70       	andi	r24, 0x02	; 2
 12e:	8b bb       	out	0x1b, r24	; 27
		PORTUSED=(sig&0xF0)|0x01;						
 130:	81 2f       	mov	r24, r17
 132:	80 7f       	andi	r24, 0xF0	; 240
 134:	81 60       	ori	r24, 0x01	; 1
 136:	8b bb       	out	0x1b, r24	; 27
		toggleE();
 138:	0e 94 72 00 	call	0xe4	; 0xe4 <toggleE>
		PORTUSED=((sig&(0x0F))*16)|0x01;
 13c:	12 95       	swap	r17
 13e:	10 7f       	andi	r17, 0xF0	; 240
 140:	11 60       	ori	r17, 0x01	; 1
 142:	1b bb       	out	0x1b, r17	; 27
		toggleE();
 144:	0e 94 72 00 	call	0xe4	; 0xe4 <toggleE>
}
 148:	1f 91       	pop	r17
 14a:	08 95       	ret

0000014c <lcd_string>:
		lcd_putchar(single);
	}
}

void lcd_string(unsigned char str[32])
{
 14c:	ef 92       	push	r14
 14e:	ff 92       	push	r15
 150:	1f 93       	push	r17
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
 156:	7c 01       	movw	r14, r24
	unsigned char k=0;
	PORTUSED=0x01;
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	8b bb       	out	0x1b, r24	; 27
	CLEARBIT(PORTUSED,BIT(0)+BIT(2));
 15c:	8b b3       	in	r24, 0x1b	; 27
 15e:	82 70       	andi	r24, 0x02	; 2
 160:	8b bb       	out	0x1b, r24	; 27
 162:	10 e0       	ldi	r17, 0x00	; 0
 164:	13 c0       	rjmp	.+38     	; 0x18c <lcd_string+0x40>
	while(str[k]!='\0')	//Till null character is encountered
		{
			if(k==16)
 166:	10 31       	cpi	r17, 0x10	; 16
 168:	19 f4       	brne	.+6      	; 0x170 <lcd_string+0x24>
				lcd_cmd(LINE2);
 16a:	80 ec       	ldi	r24, 0xC0	; 192
 16c:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_cmd>
			PORTUSED=((str[k])&0xF0)|0x01;
 170:	88 81       	ld	r24, Y
 172:	80 7f       	andi	r24, 0xF0	; 240
 174:	81 60       	ori	r24, 0x01	; 1
 176:	8b bb       	out	0x1b, r24	; 27
			toggleE();
 178:	0e 94 72 00 	call	0xe4	; 0xe4 <toggleE>
			PORTUSED=((str[k]&(0x0F))*16)|0x01;
 17c:	88 81       	ld	r24, Y
 17e:	82 95       	swap	r24
 180:	80 7f       	andi	r24, 0xF0	; 240
 182:	81 60       	ori	r24, 0x01	; 1
 184:	8b bb       	out	0x1b, r24	; 27
			toggleE();
 186:	0e 94 72 00 	call	0xe4	; 0xe4 <toggleE>
			k++;
 18a:	1f 5f       	subi	r17, 0xFF	; 255
void lcd_string(unsigned char str[32])
{
	unsigned char k=0;
	PORTUSED=0x01;
	CLEARBIT(PORTUSED,BIT(0)+BIT(2));
	while(str[k]!='\0')	//Till null character is encountered
 18c:	e7 01       	movw	r28, r14
 18e:	c1 0f       	add	r28, r17
 190:	d1 1d       	adc	r29, r1
 192:	88 81       	ld	r24, Y
 194:	88 23       	and	r24, r24
 196:	39 f7       	brne	.-50     	; 0x166 <lcd_string+0x1a>
			toggleE();
			PORTUSED=((str[k]&(0x0F))*16)|0x01;
			toggleE();
			k++;
		}
}
 198:	df 91       	pop	r29
 19a:	cf 91       	pop	r28
 19c:	1f 91       	pop	r17
 19e:	ff 90       	pop	r15
 1a0:	ef 90       	pop	r14
 1a2:	08 95       	ret

000001a4 <lcd_gotoxy1>:
	lcd_char(O+48);
}

void lcd_gotoxy1(unsigned char pos)
{
	lcd_cmd(LINE1+pos);
 1a4:	80 58       	subi	r24, 0x80	; 128
 1a6:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_cmd>
}
 1aa:	08 95       	ret

000001ac <lcd_gotoxy2>:

void lcd_gotoxy2(unsigned char pos)
{
	lcd_cmd(LINE2+pos);
 1ac:	80 54       	subi	r24, 0x40	; 64
 1ae:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_cmd>
}
 1b2:	08 95       	ret

000001b4 <lcd_char>:
}

void lcd_char(unsigned char single)
{
	int i;
	if(single =='\t')
 1b4:	89 30       	cpi	r24, 0x09	; 9
 1b6:	21 f4       	brne	.+8      	; 0x1c0 <lcd_char+0xc>
	{
		for(i =0 ; i<2 ; i++)
		{	
		lcd_putchar(single);
 1b8:	0e 94 91 00 	call	0x122	; 0x122 <lcd_putchar>
 1bc:	89 e0       	ldi	r24, 0x09	; 9
 1be:	06 c0       	rjmp	.+12     	; 0x1cc <lcd_char+0x18>
		}
	}
	else if(single=='\n')
 1c0:	8a 30       	cpi	r24, 0x0A	; 10
 1c2:	21 f4       	brne	.+8      	; 0x1cc <lcd_char+0x18>
	{
		lcd_gotoxy2(0);	
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	0e 94 d6 00 	call	0x1ac	; 0x1ac <lcd_gotoxy2>
 1ca:	08 95       	ret
	}
	else 
	{
		lcd_putchar(single);
 1cc:	0e 94 91 00 	call	0x122	; 0x122 <lcd_putchar>
 1d0:	08 95       	ret

000001d2 <lcd_showvalue>:
		}
}


void lcd_showvalue(unsigned char num)	//prints the decimal 3digit value of num
{
 1d2:	ef 92       	push	r14
 1d4:	ff 92       	push	r15
 1d6:	0f 93       	push	r16
 1d8:	1f 93       	push	r17
 1da:	18 2f       	mov	r17, r24
	unsigned char H=0,T=0,O=0;
	H=num/100;
 1dc:	64 e6       	ldi	r22, 0x64	; 100
 1de:	0e 94 5f 01 	call	0x2be	; 0x2be <__udivmodqi4>
 1e2:	48 2f       	mov	r20, r24
	T=(num - (H*100))/10;
 1e4:	28 2f       	mov	r18, r24
 1e6:	30 e0       	ldi	r19, 0x00	; 0
 1e8:	8c e9       	ldi	r24, 0x9C	; 156
 1ea:	9f ef       	ldi	r25, 0xFF	; 255
 1ec:	28 9f       	mul	r18, r24
 1ee:	70 01       	movw	r14, r0
 1f0:	29 9f       	mul	r18, r25
 1f2:	f0 0c       	add	r15, r0
 1f4:	38 9f       	mul	r19, r24
 1f6:	f0 0c       	add	r15, r0
 1f8:	11 24       	eor	r1, r1
 1fa:	c7 01       	movw	r24, r14
 1fc:	81 0f       	add	r24, r17
 1fe:	91 1d       	adc	r25, r1
 200:	6a e0       	ldi	r22, 0x0A	; 10
 202:	70 e0       	ldi	r23, 0x00	; 0
 204:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <__divmodhi4>
 208:	06 2f       	mov	r16, r22
	O=(num - (H*100) - (T*10));
	
	lcd_char(H+48);
 20a:	84 2f       	mov	r24, r20
 20c:	80 5d       	subi	r24, 0xD0	; 208
 20e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_char>
	lcd_char(T+48);
 212:	80 2f       	mov	r24, r16
 214:	80 5d       	subi	r24, 0xD0	; 208
 216:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_char>
	lcd_char(O+48);
 21a:	10 5d       	subi	r17, 0xD0	; 208
 21c:	1e 0d       	add	r17, r14
 21e:	86 ef       	ldi	r24, 0xF6	; 246
 220:	9f ef       	ldi	r25, 0xFF	; 255
 222:	08 9f       	mul	r16, r24
 224:	00 2d       	mov	r16, r0
 226:	11 24       	eor	r1, r1
 228:	80 2f       	mov	r24, r16
 22a:	81 0f       	add	r24, r17
 22c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_char>
}
 230:	1f 91       	pop	r17
 232:	0f 91       	pop	r16
 234:	ff 90       	pop	r15
 236:	ef 90       	pop	r14
 238:	08 95       	ret

0000023a <lcd_exit>:
}
		

void lcd_exit(void)
{
	PORTUSED=save;
 23a:	80 91 1a 01 	lds	r24, 0x011A
 23e:	8b bb       	out	0x1b, r24	; 27
}
 240:	08 95       	ret

00000242 <WaitMs>:

/* waits (pauses) for ms milliseconds (assumes clock at 16MHz) */
void WaitMs(unsigned int ms)
{
 242:	0a c0       	rjmp	.+20     	; 0x258 <WaitMs+0x16>
	int i;

	while (ms-- > 0)
 244:	20 e0       	ldi	r18, 0x00	; 0
 246:	30 e0       	ldi	r19, 0x00	; 0
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
			asm("nop");
 248:	00 00       	nop

	while (ms-- > 0)
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
 24a:	2f 5f       	subi	r18, 0xFF	; 255
 24c:	3f 4f       	sbci	r19, 0xFF	; 255
 24e:	4c e0       	ldi	r20, 0x0C	; 12
 250:	2c 3c       	cpi	r18, 0xCC	; 204
 252:	34 07       	cpc	r19, r20
 254:	c9 f7       	brne	.-14     	; 0x248 <WaitMs+0x6>
 256:	01 97       	sbiw	r24, 0x01	; 1
/* waits (pauses) for ms milliseconds (assumes clock at 16MHz) */
void WaitMs(unsigned int ms)
{
	int i;

	while (ms-- > 0)
 258:	00 97       	sbiw	r24, 0x00	; 0
 25a:	a1 f7       	brne	.-24     	; 0x244 <WaitMs+0x2>
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
			asm("nop");
	}
}
 25c:	08 95       	ret

0000025e <lcd_init>:
void WaitMs(unsigned int ms);


void lcd_init(void)	//init the lcd
{	
	save=PORTUSED;
 25e:	8b b3       	in	r24, 0x1b	; 27
 260:	80 93 1a 01 	sts	0x011A, r24
	DDRUSED=0xFF;
 264:	8f ef       	ldi	r24, 0xFF	; 255
 266:	8a bb       	out	0x1a, r24	; 26
	//DDRB=0xFF;
	WaitMs(15);
 268:	8f e0       	ldi	r24, 0x0F	; 15
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	0e 94 21 01 	call	0x242	; 0x242 <WaitMs>
	CLEARBIT(PORTUSED,BIT(0)+BIT(1)+BIT(2));
 270:	8b b3       	in	r24, 0x1b	; 27
 272:	84 70       	andi	r24, 0x04	; 4
 274:	8b bb       	out	0x1b, r24	; 27
	PORTUSED=0x20;
 276:	80 e2       	ldi	r24, 0x20	; 32
 278:	8b bb       	out	0x1b, r24	; 27
	lcd_cmd(0x01);
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_cmd>
	lcd_cmd(0x0F);
 280:	8f e0       	ldi	r24, 0x0F	; 15
 282:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_cmd>
	lcd_cmd(0x02);
 286:	82 e0       	ldi	r24, 0x02	; 2
 288:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_cmd>
	lcd_cmd(LINE1);
 28c:	80 e8       	ldi	r24, 0x80	; 128
 28e:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_cmd>
	WaitMs(15);
 292:	8f e0       	ldi	r24, 0x0F	; 15
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	0e 94 21 01 	call	0x242	; 0x242 <WaitMs>
		
}
 29a:	08 95       	ret

0000029c <main>:
#include "LCD_mega128.h"

int main(void)
{
	
	lcd_init();
 29c:	0e 94 2f 01 	call	0x25e	; 0x25e <lcd_init>
	
	lcd_gotoxy1(0);
 2a0:	80 e0       	ldi	r24, 0x00	; 0
 2a2:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <lcd_gotoxy1>

	lcd_string("   Soham   ");
 2a6:	80 e0       	ldi	r24, 0x00	; 0
 2a8:	91 e0       	ldi	r25, 0x01	; 1
 2aa:	0e 94 a6 00 	call	0x14c	; 0x14c <lcd_string>

	lcd_gotoxy2(0);
 2ae:	80 e0       	ldi	r24, 0x00	; 0
 2b0:	0e 94 d6 00 	call	0x1ac	; 0x1ac <lcd_gotoxy2>
	
	lcd_string("   Wadke  ");
 2b4:	8c e0       	ldi	r24, 0x0C	; 12
 2b6:	91 e0       	ldi	r25, 0x01	; 1
 2b8:	0e 94 a6 00 	call	0x14c	; 0x14c <lcd_string>
 2bc:	ff cf       	rjmp	.-2      	; 0x2bc <main+0x20>

000002be <__udivmodqi4>:
 2be:	99 1b       	sub	r25, r25
 2c0:	79 e0       	ldi	r23, 0x09	; 9
 2c2:	04 c0       	rjmp	.+8      	; 0x2cc <__udivmodqi4_ep>

000002c4 <__udivmodqi4_loop>:
 2c4:	99 1f       	adc	r25, r25
 2c6:	96 17       	cp	r25, r22
 2c8:	08 f0       	brcs	.+2      	; 0x2cc <__udivmodqi4_ep>
 2ca:	96 1b       	sub	r25, r22

000002cc <__udivmodqi4_ep>:
 2cc:	88 1f       	adc	r24, r24
 2ce:	7a 95       	dec	r23
 2d0:	c9 f7       	brne	.-14     	; 0x2c4 <__udivmodqi4_loop>
 2d2:	80 95       	com	r24
 2d4:	08 95       	ret

000002d6 <__divmodhi4>:
 2d6:	97 fb       	bst	r25, 7
 2d8:	09 2e       	mov	r0, r25
 2da:	07 26       	eor	r0, r23
 2dc:	0a d0       	rcall	.+20     	; 0x2f2 <__divmodhi4_neg1>
 2de:	77 fd       	sbrc	r23, 7
 2e0:	04 d0       	rcall	.+8      	; 0x2ea <__divmodhi4_neg2>
 2e2:	0c d0       	rcall	.+24     	; 0x2fc <__udivmodhi4>
 2e4:	06 d0       	rcall	.+12     	; 0x2f2 <__divmodhi4_neg1>
 2e6:	00 20       	and	r0, r0
 2e8:	1a f4       	brpl	.+6      	; 0x2f0 <__divmodhi4_exit>

000002ea <__divmodhi4_neg2>:
 2ea:	70 95       	com	r23
 2ec:	61 95       	neg	r22
 2ee:	7f 4f       	sbci	r23, 0xFF	; 255

000002f0 <__divmodhi4_exit>:
 2f0:	08 95       	ret

000002f2 <__divmodhi4_neg1>:
 2f2:	f6 f7       	brtc	.-4      	; 0x2f0 <__divmodhi4_exit>
 2f4:	90 95       	com	r25
 2f6:	81 95       	neg	r24
 2f8:	9f 4f       	sbci	r25, 0xFF	; 255
 2fa:	08 95       	ret

000002fc <__udivmodhi4>:
 2fc:	aa 1b       	sub	r26, r26
 2fe:	bb 1b       	sub	r27, r27
 300:	51 e1       	ldi	r21, 0x11	; 17
 302:	07 c0       	rjmp	.+14     	; 0x312 <__udivmodhi4_ep>

00000304 <__udivmodhi4_loop>:
 304:	aa 1f       	adc	r26, r26
 306:	bb 1f       	adc	r27, r27
 308:	a6 17       	cp	r26, r22
 30a:	b7 07       	cpc	r27, r23
 30c:	10 f0       	brcs	.+4      	; 0x312 <__udivmodhi4_ep>
 30e:	a6 1b       	sub	r26, r22
 310:	b7 0b       	sbc	r27, r23

00000312 <__udivmodhi4_ep>:
 312:	88 1f       	adc	r24, r24
 314:	99 1f       	adc	r25, r25
 316:	5a 95       	dec	r21
 318:	a9 f7       	brne	.-22     	; 0x304 <__udivmodhi4_loop>
 31a:	80 95       	com	r24
 31c:	90 95       	com	r25
 31e:	bc 01       	movw	r22, r24
 320:	cd 01       	movw	r24, r26
 322:	08 95       	ret

00000324 <_exit>:
 324:	f8 94       	cli

00000326 <__stop_program>:
 326:	ff cf       	rjmp	.-2      	; 0x326 <__stop_program>
