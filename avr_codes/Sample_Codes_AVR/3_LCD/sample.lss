
sample.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000306  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000003  00800100  00800100  0000037a  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  0000037a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000d7  00000000  00000000  0000039a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000002b7  00000000  00000000  00000471  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000f2  00000000  00000000  00000728  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002ef  00000000  00000000  0000081a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000e0  00000000  00000000  00000b0c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000010f  00000000  00000000  00000bec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000122  00000000  00000000  00000cfb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  38:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  4c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  68:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  6c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  70:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  74:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  78:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  7c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  80:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  84:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  88:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a3 30       	cpi	r26, 0x03	; 3
  a4:	b1 07       	cpc	r27, r17
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e 94 43 01 	call	0x286	; 0x286 <main>
  ac:	0c 94 81 01 	jmp	0x302	; 0x302 <_exit>

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <dely_ns>:
dely_ns(250);
CLEARBIT(PORTUSED,BIT(2));
}

void dely_ns(unsigned char tim)
{
  b4:	20 91 00 01 	lds	r18, 0x0100
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <dely_ns+0xc>
	for(j=0;j<tim;j++)
  bc:	9f 5f       	subi	r25, 0xFF	; 255
  be:	2a e0       	ldi	r18, 0x0A	; 10
  c0:	98 17       	cp	r25, r24
  c2:	e0 f3       	brcs	.-8      	; 0xbc <dely_ns+0x8>
  c4:	20 93 00 01 	sts	0x0100, r18
  c8:	90 93 01 01 	sts	0x0101, r25
	{
		for(k=0;k<10;k++)
		{};
	}
}
  cc:	08 95       	ret

000000ce <toggleE>:
		
}

void toggleE(void)
{
SETBIT(PORTUSED,BIT(2));
  ce:	da 9a       	sbi	0x1b, 2	; 27
dely_ns(250);
  d0:	8a ef       	ldi	r24, 0xFA	; 250
  d2:	0e 94 5a 00 	call	0xb4	; 0xb4 <dely_ns>
CLEARBIT(PORTUSED,BIT(2));
  d6:	da 98       	cbi	0x1b, 2	; 27
}
  d8:	08 95       	ret

000000da <lcd_cmd>:
		{};
	}
}

void lcd_cmd(unsigned char cmd)
{
  da:	0f 93       	push	r16
  dc:	1f 93       	push	r17
  de:	08 2f       	mov	r16, r24
	CLEARBIT(PORTUSED,BIT(0)+BIT(1)+BIT(2));
  e0:	8b b3       	in	r24, 0x1b	; 27
  e2:	84 70       	andi	r24, 0x04	; 4
  e4:	8b bb       	out	0x1b, r24	; 27
	PORTUSED=((cmd&0xF0));			
  e6:	80 2f       	mov	r24, r16
  e8:	80 7f       	andi	r24, 0xF0	; 240
  ea:	8b bb       	out	0x1b, r24	; 27
	toggleE();
  ec:	0e 94 67 00 	call	0xce	; 0xce <toggleE>
	PORTUSED=(((cmd&(0x0F))*16));	
  f0:	10 e0       	ldi	r17, 0x00	; 0
  f2:	0f 70       	andi	r16, 0x0F	; 15
  f4:	10 70       	andi	r17, 0x00	; 0
  f6:	84 e0       	ldi	r24, 0x04	; 4
  f8:	00 0f       	add	r16, r16
  fa:	11 1f       	adc	r17, r17
  fc:	8a 95       	dec	r24
  fe:	e1 f7       	brne	.-8      	; 0xf8 <lcd_cmd+0x1e>
 100:	0b bb       	out	0x1b, r16	; 27
	toggleE();
 102:	0e 94 67 00 	call	0xce	; 0xce <toggleE>
}
 106:	1f 91       	pop	r17
 108:	0f 91       	pop	r16
 10a:	08 95       	ret

0000010c <lcd_putchar>:

void lcd_putchar(unsigned char sig)
{
 10c:	1f 93       	push	r17
 10e:	18 2f       	mov	r17, r24
		PORTUSED=0x01;
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	8b bb       	out	0x1b, r24	; 27
		CLEARBIT(PORTUSED,BIT(0)+BIT(2));
 114:	8b b3       	in	r24, 0x1b	; 27
 116:	82 70       	andi	r24, 0x02	; 2
 118:	8b bb       	out	0x1b, r24	; 27
		PORTUSED=(sig&0xF0)|0x01;						
 11a:	81 2f       	mov	r24, r17
 11c:	80 7f       	andi	r24, 0xF0	; 240
 11e:	81 60       	ori	r24, 0x01	; 1
 120:	8b bb       	out	0x1b, r24	; 27
		toggleE();
 122:	0e 94 67 00 	call	0xce	; 0xce <toggleE>
		PORTUSED=((sig&(0x0F))*16)|0x01;
 126:	12 95       	swap	r17
 128:	10 7f       	andi	r17, 0xF0	; 240
 12a:	11 60       	ori	r17, 0x01	; 1
 12c:	1b bb       	out	0x1b, r17	; 27
		toggleE();
 12e:	0e 94 67 00 	call	0xce	; 0xce <toggleE>
}
 132:	1f 91       	pop	r17
 134:	08 95       	ret

00000136 <lcd_string>:
		lcd_putchar(single);
	}
}

void lcd_string(unsigned char str[32])
{
 136:	ef 92       	push	r14
 138:	ff 92       	push	r15
 13a:	1f 93       	push	r17
 13c:	cf 93       	push	r28
 13e:	df 93       	push	r29
 140:	7c 01       	movw	r14, r24
	unsigned char k=0;
	PORTUSED=0x01;
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	8b bb       	out	0x1b, r24	; 27
	CLEARBIT(PORTUSED,BIT(0)+BIT(2));
 146:	8b b3       	in	r24, 0x1b	; 27
 148:	82 70       	andi	r24, 0x02	; 2
 14a:	8b bb       	out	0x1b, r24	; 27
 14c:	10 e0       	ldi	r17, 0x00	; 0
 14e:	13 c0       	rjmp	.+38     	; 0x176 <lcd_string+0x40>
	while(str[k]!='\0')	//Till null character is encountered
		{
			if(k==16)
 150:	10 31       	cpi	r17, 0x10	; 16
 152:	19 f4       	brne	.+6      	; 0x15a <lcd_string+0x24>
				lcd_cmd(LINE2);
 154:	80 ec       	ldi	r24, 0xC0	; 192
 156:	0e 94 6d 00 	call	0xda	; 0xda <lcd_cmd>
			PORTUSED=((str[k])&0xF0)|0x01;
 15a:	88 81       	ld	r24, Y
 15c:	80 7f       	andi	r24, 0xF0	; 240
 15e:	81 60       	ori	r24, 0x01	; 1
 160:	8b bb       	out	0x1b, r24	; 27
			toggleE();
 162:	0e 94 67 00 	call	0xce	; 0xce <toggleE>
			PORTUSED=((str[k]&(0x0F))*16)|0x01;
 166:	88 81       	ld	r24, Y
 168:	82 95       	swap	r24
 16a:	80 7f       	andi	r24, 0xF0	; 240
 16c:	81 60       	ori	r24, 0x01	; 1
 16e:	8b bb       	out	0x1b, r24	; 27
			toggleE();
 170:	0e 94 67 00 	call	0xce	; 0xce <toggleE>
			k++;
 174:	1f 5f       	subi	r17, 0xFF	; 255
void lcd_string(unsigned char str[32])
{
	unsigned char k=0;
	PORTUSED=0x01;
	CLEARBIT(PORTUSED,BIT(0)+BIT(2));
	while(str[k]!='\0')	//Till null character is encountered
 176:	e7 01       	movw	r28, r14
 178:	c1 0f       	add	r28, r17
 17a:	d1 1d       	adc	r29, r1
 17c:	88 81       	ld	r24, Y
 17e:	88 23       	and	r24, r24
 180:	39 f7       	brne	.-50     	; 0x150 <lcd_string+0x1a>
			toggleE();
			PORTUSED=((str[k]&(0x0F))*16)|0x01;
			toggleE();
			k++;
		}
}
 182:	df 91       	pop	r29
 184:	cf 91       	pop	r28
 186:	1f 91       	pop	r17
 188:	ff 90       	pop	r15
 18a:	ef 90       	pop	r14
 18c:	08 95       	ret

0000018e <lcd_gotoxy1>:
	lcd_char(O+48);
}

void lcd_gotoxy1(unsigned char pos)
{
	lcd_cmd(LINE1+pos);
 18e:	80 58       	subi	r24, 0x80	; 128
 190:	0e 94 6d 00 	call	0xda	; 0xda <lcd_cmd>
}
 194:	08 95       	ret

00000196 <lcd_gotoxy2>:

void lcd_gotoxy2(unsigned char pos)
{
	lcd_cmd(LINE2+pos);
 196:	80 54       	subi	r24, 0x40	; 64
 198:	0e 94 6d 00 	call	0xda	; 0xda <lcd_cmd>
}
 19c:	08 95       	ret

0000019e <lcd_char>:
}

void lcd_char(unsigned char single)
{
	int i;
	if(single =='\t')
 19e:	89 30       	cpi	r24, 0x09	; 9
 1a0:	21 f4       	brne	.+8      	; 0x1aa <lcd_char+0xc>
	{
		for(i =0 ; i<2 ; i++)
		{	
		lcd_putchar(single);
 1a2:	0e 94 86 00 	call	0x10c	; 0x10c <lcd_putchar>
 1a6:	89 e0       	ldi	r24, 0x09	; 9
 1a8:	06 c0       	rjmp	.+12     	; 0x1b6 <lcd_char+0x18>
		}
	}
	else if(single=='\n')
 1aa:	8a 30       	cpi	r24, 0x0A	; 10
 1ac:	21 f4       	brne	.+8      	; 0x1b6 <lcd_char+0x18>
	{
		lcd_gotoxy2(0);	
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	0e 94 cb 00 	call	0x196	; 0x196 <lcd_gotoxy2>
 1b4:	08 95       	ret
	}
	else 
	{
		lcd_putchar(single);
 1b6:	0e 94 86 00 	call	0x10c	; 0x10c <lcd_putchar>
 1ba:	08 95       	ret

000001bc <lcd_showvalue>:
		}
}


void lcd_showvalue(unsigned char num)	//prints the decimal 3digit value of num
{
 1bc:	ef 92       	push	r14
 1be:	ff 92       	push	r15
 1c0:	0f 93       	push	r16
 1c2:	1f 93       	push	r17
 1c4:	18 2f       	mov	r17, r24
	unsigned char H=0,T=0,O=0;
	H=num/100;
 1c6:	64 e6       	ldi	r22, 0x64	; 100
 1c8:	0e 94 4e 01 	call	0x29c	; 0x29c <__udivmodqi4>
 1cc:	48 2f       	mov	r20, r24
	T=(num - (H*100))/10;
 1ce:	28 2f       	mov	r18, r24
 1d0:	30 e0       	ldi	r19, 0x00	; 0
 1d2:	8c e9       	ldi	r24, 0x9C	; 156
 1d4:	9f ef       	ldi	r25, 0xFF	; 255
 1d6:	28 9f       	mul	r18, r24
 1d8:	70 01       	movw	r14, r0
 1da:	29 9f       	mul	r18, r25
 1dc:	f0 0c       	add	r15, r0
 1de:	38 9f       	mul	r19, r24
 1e0:	f0 0c       	add	r15, r0
 1e2:	11 24       	eor	r1, r1
 1e4:	c7 01       	movw	r24, r14
 1e6:	81 0f       	add	r24, r17
 1e8:	91 1d       	adc	r25, r1
 1ea:	6a e0       	ldi	r22, 0x0A	; 10
 1ec:	70 e0       	ldi	r23, 0x00	; 0
 1ee:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <__divmodhi4>
 1f2:	06 2f       	mov	r16, r22
	O=(num - (H*100) - (T*10));
	
	lcd_char(H+48);
 1f4:	84 2f       	mov	r24, r20
 1f6:	80 5d       	subi	r24, 0xD0	; 208
 1f8:	0e 94 cf 00 	call	0x19e	; 0x19e <lcd_char>
	lcd_char(T+48);
 1fc:	80 2f       	mov	r24, r16
 1fe:	80 5d       	subi	r24, 0xD0	; 208
 200:	0e 94 cf 00 	call	0x19e	; 0x19e <lcd_char>
	lcd_char(O+48);
 204:	10 5d       	subi	r17, 0xD0	; 208
 206:	1e 0d       	add	r17, r14
 208:	86 ef       	ldi	r24, 0xF6	; 246
 20a:	9f ef       	ldi	r25, 0xFF	; 255
 20c:	08 9f       	mul	r16, r24
 20e:	00 2d       	mov	r16, r0
 210:	11 24       	eor	r1, r1
 212:	80 2f       	mov	r24, r16
 214:	81 0f       	add	r24, r17
 216:	0e 94 cf 00 	call	0x19e	; 0x19e <lcd_char>
}
 21a:	1f 91       	pop	r17
 21c:	0f 91       	pop	r16
 21e:	ff 90       	pop	r15
 220:	ef 90       	pop	r14
 222:	08 95       	ret

00000224 <lcd_exit>:
}
		

void lcd_exit(void)
{
	PORTUSED=save;
 224:	80 91 02 01 	lds	r24, 0x0102
 228:	8b bb       	out	0x1b, r24	; 27
}
 22a:	08 95       	ret

0000022c <WaitMs>:

/* waits (pauses) for ms milliseconds (assumes clock at 16MHz) */
void WaitMs(unsigned int ms)
{
 22c:	0a c0       	rjmp	.+20     	; 0x242 <WaitMs+0x16>
	int i;

	while (ms-- > 0)
 22e:	20 e0       	ldi	r18, 0x00	; 0
 230:	30 e0       	ldi	r19, 0x00	; 0
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
			asm("nop");
 232:	00 00       	nop

	while (ms-- > 0)
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
 234:	2f 5f       	subi	r18, 0xFF	; 255
 236:	3f 4f       	sbci	r19, 0xFF	; 255
 238:	4c e0       	ldi	r20, 0x0C	; 12
 23a:	2c 3c       	cpi	r18, 0xCC	; 204
 23c:	34 07       	cpc	r19, r20
 23e:	c9 f7       	brne	.-14     	; 0x232 <WaitMs+0x6>
 240:	01 97       	sbiw	r24, 0x01	; 1
/* waits (pauses) for ms milliseconds (assumes clock at 16MHz) */
void WaitMs(unsigned int ms)
{
	int i;

	while (ms-- > 0)
 242:	00 97       	sbiw	r24, 0x00	; 0
 244:	a1 f7       	brne	.-24     	; 0x22e <WaitMs+0x2>
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
			asm("nop");
	}
}
 246:	08 95       	ret

00000248 <lcd_init>:
void WaitMs(unsigned int ms);


void lcd_init(void)	//init the lcd
{	
	save=PORTUSED;
 248:	8b b3       	in	r24, 0x1b	; 27
 24a:	80 93 02 01 	sts	0x0102, r24
	DDRUSED=0xFF;
 24e:	8f ef       	ldi	r24, 0xFF	; 255
 250:	8a bb       	out	0x1a, r24	; 26
	//DDRB=0xFF;
	WaitMs(15);
 252:	8f e0       	ldi	r24, 0x0F	; 15
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	0e 94 16 01 	call	0x22c	; 0x22c <WaitMs>
	CLEARBIT(PORTUSED,BIT(0)+BIT(1)+BIT(2));
 25a:	8b b3       	in	r24, 0x1b	; 27
 25c:	84 70       	andi	r24, 0x04	; 4
 25e:	8b bb       	out	0x1b, r24	; 27
	PORTUSED=0x20;
 260:	80 e2       	ldi	r24, 0x20	; 32
 262:	8b bb       	out	0x1b, r24	; 27
	lcd_cmd(0x01);
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	0e 94 6d 00 	call	0xda	; 0xda <lcd_cmd>
	lcd_cmd(0x0F);
 26a:	8f e0       	ldi	r24, 0x0F	; 15
 26c:	0e 94 6d 00 	call	0xda	; 0xda <lcd_cmd>
	lcd_cmd(0x02);
 270:	82 e0       	ldi	r24, 0x02	; 2
 272:	0e 94 6d 00 	call	0xda	; 0xda <lcd_cmd>
	lcd_cmd(LINE1);
 276:	80 e8       	ldi	r24, 0x80	; 128
 278:	0e 94 6d 00 	call	0xda	; 0xda <lcd_cmd>
	WaitMs(15);
 27c:	8f e0       	ldi	r24, 0x0F	; 15
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	0e 94 16 01 	call	0x22c	; 0x22c <WaitMs>
		
}
 284:	08 95       	ret

00000286 <main>:

int main(void)
{
	int a=1,b=1,c;
	
	lcd_init();
 286:	0e 94 24 01 	call	0x248	; 0x248 <lcd_init>
	
	c=a+b;
	
	lcd_gotoxy1(0);
 28a:	80 e0       	ldi	r24, 0x00	; 0
 28c:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_gotoxy1>
	
	lcd_showvalue(c);
 290:	82 e0       	ldi	r24, 0x02	; 2
 292:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_showvalue>
 296:	80 e0       	ldi	r24, 0x00	; 0
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	08 95       	ret

0000029c <__udivmodqi4>:
 29c:	99 1b       	sub	r25, r25
 29e:	79 e0       	ldi	r23, 0x09	; 9
 2a0:	04 c0       	rjmp	.+8      	; 0x2aa <__udivmodqi4_ep>

000002a2 <__udivmodqi4_loop>:
 2a2:	99 1f       	adc	r25, r25
 2a4:	96 17       	cp	r25, r22
 2a6:	08 f0       	brcs	.+2      	; 0x2aa <__udivmodqi4_ep>
 2a8:	96 1b       	sub	r25, r22

000002aa <__udivmodqi4_ep>:
 2aa:	88 1f       	adc	r24, r24
 2ac:	7a 95       	dec	r23
 2ae:	c9 f7       	brne	.-14     	; 0x2a2 <__udivmodqi4_loop>
 2b0:	80 95       	com	r24
 2b2:	08 95       	ret

000002b4 <__divmodhi4>:
 2b4:	97 fb       	bst	r25, 7
 2b6:	09 2e       	mov	r0, r25
 2b8:	07 26       	eor	r0, r23
 2ba:	0a d0       	rcall	.+20     	; 0x2d0 <__divmodhi4_neg1>
 2bc:	77 fd       	sbrc	r23, 7
 2be:	04 d0       	rcall	.+8      	; 0x2c8 <__divmodhi4_neg2>
 2c0:	0c d0       	rcall	.+24     	; 0x2da <__udivmodhi4>
 2c2:	06 d0       	rcall	.+12     	; 0x2d0 <__divmodhi4_neg1>
 2c4:	00 20       	and	r0, r0
 2c6:	1a f4       	brpl	.+6      	; 0x2ce <__divmodhi4_exit>

000002c8 <__divmodhi4_neg2>:
 2c8:	70 95       	com	r23
 2ca:	61 95       	neg	r22
 2cc:	7f 4f       	sbci	r23, 0xFF	; 255

000002ce <__divmodhi4_exit>:
 2ce:	08 95       	ret

000002d0 <__divmodhi4_neg1>:
 2d0:	f6 f7       	brtc	.-4      	; 0x2ce <__divmodhi4_exit>
 2d2:	90 95       	com	r25
 2d4:	81 95       	neg	r24
 2d6:	9f 4f       	sbci	r25, 0xFF	; 255
 2d8:	08 95       	ret

000002da <__udivmodhi4>:
 2da:	aa 1b       	sub	r26, r26
 2dc:	bb 1b       	sub	r27, r27
 2de:	51 e1       	ldi	r21, 0x11	; 17
 2e0:	07 c0       	rjmp	.+14     	; 0x2f0 <__udivmodhi4_ep>

000002e2 <__udivmodhi4_loop>:
 2e2:	aa 1f       	adc	r26, r26
 2e4:	bb 1f       	adc	r27, r27
 2e6:	a6 17       	cp	r26, r22
 2e8:	b7 07       	cpc	r27, r23
 2ea:	10 f0       	brcs	.+4      	; 0x2f0 <__udivmodhi4_ep>
 2ec:	a6 1b       	sub	r26, r22
 2ee:	b7 0b       	sbc	r27, r23

000002f0 <__udivmodhi4_ep>:
 2f0:	88 1f       	adc	r24, r24
 2f2:	99 1f       	adc	r25, r25
 2f4:	5a 95       	dec	r21
 2f6:	a9 f7       	brne	.-22     	; 0x2e2 <__udivmodhi4_loop>
 2f8:	80 95       	com	r24
 2fa:	90 95       	com	r25
 2fc:	bc 01       	movw	r22, r24
 2fe:	cd 01       	movw	r24, r26
 300:	08 95       	ret

00000302 <_exit>:
 302:	f8 94       	cli

00000304 <__stop_program>:
 304:	ff cf       	rjmp	.-2      	; 0x304 <__stop_program>
