
joystick_main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000062  00800100  00000dfa  00000e8e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000dfa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800162  00800162  00000ef0  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000215  00000000  00000000  00000f10  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000080c  00000000  00000000  00001125  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001d4  00000000  00000000  00001931  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007bb  00000000  00000000  00001b05  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001b0  00000000  00000000  000022c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000285  00000000  00000000  00002470  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000039f  00000000  00000000  000026f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00002a94  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
   8:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
   c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  14:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  1c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  20:	0c 94 83 03 	jmp	0x706	; 0x706 <__vector_8>
  24:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  2c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  48:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  54:	0c 94 44 03 	jmp	0x688	; 0x688 <__vector_21>
  58:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  5c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  60:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  68:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  6c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  70:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  74:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  78:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  7c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  80:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  84:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  88:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea ef       	ldi	r30, 0xFA	; 250
  a0:	fd e0       	ldi	r31, 0x0D	; 13
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <.do_copy_data_start>

000000a4 <.do_copy_data_loop>:
  a4:	05 90       	lpm	r0, Z+
  a6:	0d 92       	st	X+, r0

000000a8 <.do_copy_data_start>:
  a8:	a2 36       	cpi	r26, 0x62	; 98
  aa:	b1 07       	cpc	r27, r17
  ac:	d9 f7       	brne	.-10     	; 0xa4 <.do_copy_data_loop>

000000ae <__do_clear_bss>:
  ae:	11 e0       	ldi	r17, 0x01	; 1
  b0:	a2 e6       	ldi	r26, 0x62	; 98
  b2:	b1 e0       	ldi	r27, 0x01	; 1
  b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
  b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
  b8:	aa 36       	cpi	r26, 0x6A	; 106
  ba:	b1 07       	cpc	r27, r17
  bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
  be:	0e 94 c9 02 	call	0x592	; 0x592 <main>
  c2:	0c 94 fb 06 	jmp	0xdf6	; 0xdf6 <_exit>

000000c6 <__bad_interrupt>:
  c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <dely_ns>:
dely_ns(250);
CLEARBIT(PORTUSED,BIT(2));
}

void dely_ns(unsigned char tim)
{
  ca:	20 91 62 01 	lds	r18, 0x0162
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <dely_ns+0xc>
	for(j=0;j<tim;j++)
  d2:	9f 5f       	subi	r25, 0xFF	; 255
  d4:	2a e0       	ldi	r18, 0x0A	; 10
  d6:	98 17       	cp	r25, r24
  d8:	e0 f3       	brcs	.-8      	; 0xd2 <dely_ns+0x8>
  da:	20 93 62 01 	sts	0x0162, r18
  de:	90 93 63 01 	sts	0x0163, r25
	{
		for(k=0;k<10;k++)
		{};
	}
}
  e2:	08 95       	ret

000000e4 <toggleE>:
		
}

void toggleE(void)
{
SETBIT(PORTUSED,BIT(2));
  e4:	da 9a       	sbi	0x1b, 2	; 27
dely_ns(250);
  e6:	8a ef       	ldi	r24, 0xFA	; 250
  e8:	0e 94 65 00 	call	0xca	; 0xca <dely_ns>
CLEARBIT(PORTUSED,BIT(2));
  ec:	da 98       	cbi	0x1b, 2	; 27
}
  ee:	08 95       	ret

000000f0 <lcd_cmd>:
		{};
	}
}

void lcd_cmd(unsigned char cmd)
{
  f0:	0f 93       	push	r16
  f2:	1f 93       	push	r17
  f4:	08 2f       	mov	r16, r24
	CLEARBIT(PORTUSED,BIT(0)+BIT(1)+BIT(2));
  f6:	8b b3       	in	r24, 0x1b	; 27
  f8:	84 70       	andi	r24, 0x04	; 4
  fa:	8b bb       	out	0x1b, r24	; 27
	PORTUSED=((cmd&0xF0));			
  fc:	80 2f       	mov	r24, r16
  fe:	80 7f       	andi	r24, 0xF0	; 240
 100:	8b bb       	out	0x1b, r24	; 27
	toggleE();
 102:	0e 94 72 00 	call	0xe4	; 0xe4 <toggleE>
	PORTUSED=(((cmd&(0x0F))*16));	
 106:	10 e0       	ldi	r17, 0x00	; 0
 108:	0f 70       	andi	r16, 0x0F	; 15
 10a:	10 70       	andi	r17, 0x00	; 0
 10c:	84 e0       	ldi	r24, 0x04	; 4
 10e:	00 0f       	add	r16, r16
 110:	11 1f       	adc	r17, r17
 112:	8a 95       	dec	r24
 114:	e1 f7       	brne	.-8      	; 0x10e <lcd_cmd+0x1e>
 116:	0b bb       	out	0x1b, r16	; 27
	toggleE();
 118:	0e 94 72 00 	call	0xe4	; 0xe4 <toggleE>
}
 11c:	1f 91       	pop	r17
 11e:	0f 91       	pop	r16
 120:	08 95       	ret

00000122 <lcd_putchar>:

void lcd_putchar(unsigned char sig)
{
 122:	1f 93       	push	r17
 124:	18 2f       	mov	r17, r24
		PORTUSED=0x01;
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	8b bb       	out	0x1b, r24	; 27
		CLEARBIT(PORTUSED,BIT(0)+BIT(2));
 12a:	8b b3       	in	r24, 0x1b	; 27
 12c:	82 70       	andi	r24, 0x02	; 2
 12e:	8b bb       	out	0x1b, r24	; 27
		PORTUSED=(sig&0xF0)|0x01;						
 130:	81 2f       	mov	r24, r17
 132:	80 7f       	andi	r24, 0xF0	; 240
 134:	81 60       	ori	r24, 0x01	; 1
 136:	8b bb       	out	0x1b, r24	; 27
		toggleE();
 138:	0e 94 72 00 	call	0xe4	; 0xe4 <toggleE>
		PORTUSED=((sig&(0x0F))*16)|0x01;
 13c:	12 95       	swap	r17
 13e:	10 7f       	andi	r17, 0xF0	; 240
 140:	11 60       	ori	r17, 0x01	; 1
 142:	1b bb       	out	0x1b, r17	; 27
		toggleE();
 144:	0e 94 72 00 	call	0xe4	; 0xe4 <toggleE>
}
 148:	1f 91       	pop	r17
 14a:	08 95       	ret

0000014c <lcd_string>:
		lcd_putchar(single);
	}
}

void lcd_string(unsigned char str[32])
{
 14c:	ef 92       	push	r14
 14e:	ff 92       	push	r15
 150:	1f 93       	push	r17
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
 156:	7c 01       	movw	r14, r24
	unsigned char k=0;
	PORTUSED=0x01;
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	8b bb       	out	0x1b, r24	; 27
	CLEARBIT(PORTUSED,BIT(0)+BIT(2));
 15c:	8b b3       	in	r24, 0x1b	; 27
 15e:	82 70       	andi	r24, 0x02	; 2
 160:	8b bb       	out	0x1b, r24	; 27
 162:	10 e0       	ldi	r17, 0x00	; 0
 164:	13 c0       	rjmp	.+38     	; 0x18c <lcd_string+0x40>
	while(str[k]!='\0')	//Till null character is encountered
		{
			if(k==16)
 166:	10 31       	cpi	r17, 0x10	; 16
 168:	19 f4       	brne	.+6      	; 0x170 <lcd_string+0x24>
				lcd_cmd(LINE2);
 16a:	80 ec       	ldi	r24, 0xC0	; 192
 16c:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_cmd>
			PORTUSED=((str[k])&0xF0)|0x01;
 170:	88 81       	ld	r24, Y
 172:	80 7f       	andi	r24, 0xF0	; 240
 174:	81 60       	ori	r24, 0x01	; 1
 176:	8b bb       	out	0x1b, r24	; 27
			toggleE();
 178:	0e 94 72 00 	call	0xe4	; 0xe4 <toggleE>
			PORTUSED=((str[k]&(0x0F))*16)|0x01;
 17c:	88 81       	ld	r24, Y
 17e:	82 95       	swap	r24
 180:	80 7f       	andi	r24, 0xF0	; 240
 182:	81 60       	ori	r24, 0x01	; 1
 184:	8b bb       	out	0x1b, r24	; 27
			toggleE();
 186:	0e 94 72 00 	call	0xe4	; 0xe4 <toggleE>
			k++;
 18a:	1f 5f       	subi	r17, 0xFF	; 255
void lcd_string(unsigned char str[32])
{
	unsigned char k=0;
	PORTUSED=0x01;
	CLEARBIT(PORTUSED,BIT(0)+BIT(2));
	while(str[k]!='\0')	//Till null character is encountered
 18c:	e7 01       	movw	r28, r14
 18e:	c1 0f       	add	r28, r17
 190:	d1 1d       	adc	r29, r1
 192:	88 81       	ld	r24, Y
 194:	88 23       	and	r24, r24
 196:	39 f7       	brne	.-50     	; 0x166 <lcd_string+0x1a>
			toggleE();
			PORTUSED=((str[k]&(0x0F))*16)|0x01;
			toggleE();
			k++;
		}
}
 198:	df 91       	pop	r29
 19a:	cf 91       	pop	r28
 19c:	1f 91       	pop	r17
 19e:	ff 90       	pop	r15
 1a0:	ef 90       	pop	r14
 1a2:	08 95       	ret

000001a4 <lcd_gotoxy1>:
	lcd_char(O+48);
}

void lcd_gotoxy1(unsigned char pos)
{
	lcd_cmd(LINE1+pos);
 1a4:	80 58       	subi	r24, 0x80	; 128
 1a6:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_cmd>
}
 1aa:	08 95       	ret

000001ac <lcd_gotoxy2>:

void lcd_gotoxy2(unsigned char pos)
{
	lcd_cmd(LINE2+pos);
 1ac:	80 54       	subi	r24, 0x40	; 64
 1ae:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_cmd>
}
 1b2:	08 95       	ret

000001b4 <lcd_char>:
		PORTUSED=((sig&(0x0F))*16)|0x01;
		toggleE();
}
void lcd_char(unsigned char single)
{
	if(single =='\t')
 1b4:	89 30       	cpi	r24, 0x09	; 9
 1b6:	21 f4       	brne	.+8      	; 0x1c0 <lcd_char+0xc>
	{
		for(int i =0 ; i<2 ; i++)
		{	
		lcd_putchar(single);
 1b8:	0e 94 91 00 	call	0x122	; 0x122 <lcd_putchar>
 1bc:	89 e0       	ldi	r24, 0x09	; 9
 1be:	06 c0       	rjmp	.+12     	; 0x1cc <lcd_char+0x18>
		}
	}
	else if(single=='\n')
 1c0:	8a 30       	cpi	r24, 0x0A	; 10
 1c2:	21 f4       	brne	.+8      	; 0x1cc <lcd_char+0x18>
	{
		lcd_gotoxy2(0);	
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	0e 94 d6 00 	call	0x1ac	; 0x1ac <lcd_gotoxy2>
 1ca:	08 95       	ret
	}
	else 
	{
		lcd_putchar(single);
 1cc:	0e 94 91 00 	call	0x122	; 0x122 <lcd_putchar>
 1d0:	08 95       	ret

000001d2 <lcd_showvalue>:
		}
}


void lcd_showvalue(unsigned char num)	//prints the decimal 3digit value of num
{
 1d2:	ef 92       	push	r14
 1d4:	ff 92       	push	r15
 1d6:	0f 93       	push	r16
 1d8:	1f 93       	push	r17
 1da:	18 2f       	mov	r17, r24
	unsigned char H=0,T=0,O=0;
	H=num/100;
 1dc:	64 e6       	ldi	r22, 0x64	; 100
 1de:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <__udivmodqi4>
 1e2:	48 2f       	mov	r20, r24
	T=(num - (H*100))/10;
 1e4:	28 2f       	mov	r18, r24
 1e6:	30 e0       	ldi	r19, 0x00	; 0
 1e8:	8c e9       	ldi	r24, 0x9C	; 156
 1ea:	9f ef       	ldi	r25, 0xFF	; 255
 1ec:	28 9f       	mul	r18, r24
 1ee:	70 01       	movw	r14, r0
 1f0:	29 9f       	mul	r18, r25
 1f2:	f0 0c       	add	r15, r0
 1f4:	38 9f       	mul	r19, r24
 1f6:	f0 0c       	add	r15, r0
 1f8:	11 24       	eor	r1, r1
 1fa:	c7 01       	movw	r24, r14
 1fc:	81 0f       	add	r24, r17
 1fe:	91 1d       	adc	r25, r1
 200:	6a e0       	ldi	r22, 0x0A	; 10
 202:	70 e0       	ldi	r23, 0x00	; 0
 204:	0e 94 10 04 	call	0x820	; 0x820 <__divmodhi4>
 208:	06 2f       	mov	r16, r22
	O=(num - (H*100) - (T*10));
	
	lcd_char(H+48);
 20a:	84 2f       	mov	r24, r20
 20c:	80 5d       	subi	r24, 0xD0	; 208
 20e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_char>
	lcd_char(T+48);
 212:	80 2f       	mov	r24, r16
 214:	80 5d       	subi	r24, 0xD0	; 208
 216:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_char>
	lcd_char(O+48);
 21a:	10 5d       	subi	r17, 0xD0	; 208
 21c:	1e 0d       	add	r17, r14
 21e:	86 ef       	ldi	r24, 0xF6	; 246
 220:	9f ef       	ldi	r25, 0xFF	; 255
 222:	08 9f       	mul	r16, r24
 224:	00 2d       	mov	r16, r0
 226:	11 24       	eor	r1, r1
 228:	80 2f       	mov	r24, r16
 22a:	81 0f       	add	r24, r17
 22c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_char>
}
 230:	1f 91       	pop	r17
 232:	0f 91       	pop	r16
 234:	ff 90       	pop	r15
 236:	ef 90       	pop	r14
 238:	08 95       	ret

0000023a <lcd_exit>:
}
		

void lcd_exit(void)
{
	PORTUSED=save;
 23a:	80 91 64 01 	lds	r24, 0x0164
 23e:	8b bb       	out	0x1b, r24	; 27
}
 240:	08 95       	ret

00000242 <WaitMs>:

/* waits (pauses) for ms milliseconds (assumes clock at 16MHz) */
void WaitMs(unsigned int ms)
{
 242:	0a c0       	rjmp	.+20     	; 0x258 <WaitMs+0x16>
	int i;

	while (ms-- > 0)
 244:	20 e0       	ldi	r18, 0x00	; 0
 246:	30 e0       	ldi	r19, 0x00	; 0
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
			asm("nop");
 248:	00 00       	nop

	while (ms-- > 0)
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
 24a:	2f 5f       	subi	r18, 0xFF	; 255
 24c:	3f 4f       	sbci	r19, 0xFF	; 255
 24e:	4c e0       	ldi	r20, 0x0C	; 12
 250:	2c 3c       	cpi	r18, 0xCC	; 204
 252:	34 07       	cpc	r19, r20
 254:	c9 f7       	brne	.-14     	; 0x248 <WaitMs+0x6>
 256:	01 97       	sbiw	r24, 0x01	; 1
/* waits (pauses) for ms milliseconds (assumes clock at 16MHz) */
void WaitMs(unsigned int ms)
{
	int i;

	while (ms-- > 0)
 258:	00 97       	sbiw	r24, 0x00	; 0
 25a:	a1 f7       	brne	.-24     	; 0x244 <WaitMs+0x2>
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
			asm("nop");
	}
}
 25c:	08 95       	ret

0000025e <lcd_init>:
void WaitMs(unsigned int ms);


void lcd_init(void)	//init the lcd
{	
	save=PORTUSED;
 25e:	8b b3       	in	r24, 0x1b	; 27
 260:	80 93 64 01 	sts	0x0164, r24
	DDRUSED=0xFF;
 264:	8f ef       	ldi	r24, 0xFF	; 255
 266:	8a bb       	out	0x1a, r24	; 26
	//DDRB=0xFF;
	WaitMs(15);
 268:	8f e0       	ldi	r24, 0x0F	; 15
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	0e 94 21 01 	call	0x242	; 0x242 <WaitMs>
	CLEARBIT(PORTUSED,BIT(0)+BIT(1)+BIT(2));
 270:	8b b3       	in	r24, 0x1b	; 27
 272:	84 70       	andi	r24, 0x04	; 4
 274:	8b bb       	out	0x1b, r24	; 27
	PORTUSED=0x20;
 276:	80 e2       	ldi	r24, 0x20	; 32
 278:	8b bb       	out	0x1b, r24	; 27
	lcd_cmd(0x01);
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_cmd>
	lcd_cmd(0x0F);
 280:	8f e0       	ldi	r24, 0x0F	; 15
 282:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_cmd>
	lcd_cmd(0x02);
 286:	82 e0       	ldi	r24, 0x02	; 2
 288:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_cmd>
	lcd_cmd(LINE1);
 28c:	80 e8       	ldi	r24, 0x80	; 128
 28e:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_cmd>
		
}
 292:	08 95       	ret

00000294 <UART_config>:

#ifndef MYUART_H
#define MYUART_H 1

void UART_config(unsigned long int baudrate)
{
 294:	ef 92       	push	r14
 296:	ff 92       	push	r15
 298:	0f 93       	push	r16
 29a:	1f 93       	push	r17
 29c:	df 93       	push	r29
 29e:	cf 93       	push	r28
 2a0:	cd b7       	in	r28, 0x3d	; 61
 2a2:	de b7       	in	r29, 0x3e	; 62
 2a4:	ec 97       	sbiw	r28, 0x3c	; 60
 2a6:	0f b6       	in	r0, 0x3f	; 63
 2a8:	f8 94       	cli
 2aa:	de bf       	out	0x3e, r29	; 62
 2ac:	0f be       	out	0x3f, r0	; 63
 2ae:	cd bf       	out	0x3d, r28	; 61
 2b0:	7b 01       	movw	r14, r22
 2b2:	8c 01       	movw	r16, r24
	unsigned int UBRR_set=0, UBRR_low, UBRR_high;
	unsigned long int arr1[]={2400,4800,9600,14400,19200,28800,38400,57600,76800,115200};
 2b4:	de 01       	movw	r26, r28
 2b6:	55 96       	adiw	r26, 0x15	; 21
 2b8:	e9 e3       	ldi	r30, 0x39	; 57
 2ba:	f1 e0       	ldi	r31, 0x01	; 1
 2bc:	88 e2       	ldi	r24, 0x28	; 40
 2be:	01 90       	ld	r0, Z+
 2c0:	0d 92       	st	X+, r0
 2c2:	81 50       	subi	r24, 0x01	; 1
 2c4:	e1 f7       	brne	.-8      	; 0x2be <UART_config+0x2a>
	unsigned int arr2[]={415,207,103,68,51,34,25,16,12,8};
 2c6:	de 01       	movw	r26, r28
 2c8:	11 96       	adiw	r26, 0x01	; 1
 2ca:	e5 e2       	ldi	r30, 0x25	; 37
 2cc:	f1 e0       	ldi	r31, 0x01	; 1
 2ce:	84 e1       	ldi	r24, 0x14	; 20
 2d0:	01 90       	ld	r0, Z+
 2d2:	0d 92       	st	X+, r0
 2d4:	81 50       	subi	r24, 0x01	; 1
 2d6:	e1 f7       	brne	.-8      	; 0x2d0 <UART_config+0x3c>

	UCSR1B = 0x18;  //polled transmission,polled reception, 8-bits
 2d8:	88 e1       	ldi	r24, 0x18	; 24
 2da:	80 93 9a 00 	sts	0x009A, r24
	UCSR1C = 0x06;  //1 stop bit, no parity
 2de:	86 e0       	ldi	r24, 0x06	; 6
 2e0:	80 93 9d 00 	sts	0x009D, r24
 2e4:	fe 01       	movw	r30, r28
 2e6:	75 96       	adiw	r30, 0x15	; 21
 2e8:	9e 01       	movw	r18, r28
 2ea:	2f 5f       	subi	r18, 0xFF	; 255
 2ec:	3f 4f       	sbci	r19, 0xFF	; 255
 2ee:	40 e0       	ldi	r20, 0x00	; 0
 2f0:	50 e0       	ldi	r21, 0x00	; 0

	for(int cnt=0;cnt<10;cnt++)
 2f2:	be 01       	movw	r22, r28
 2f4:	63 5c       	subi	r22, 0xC3	; 195
 2f6:	7f 4f       	sbci	r23, 0xFF	; 255
	{
		if(arr1[cnt]==baudrate)
 2f8:	80 81       	ld	r24, Z
 2fa:	91 81       	ldd	r25, Z+1	; 0x01
 2fc:	a2 81       	ldd	r26, Z+2	; 0x02
 2fe:	b3 81       	ldd	r27, Z+3	; 0x03
 300:	8e 15       	cp	r24, r14
 302:	9f 05       	cpc	r25, r15
 304:	a0 07       	cpc	r26, r16
 306:	b1 07       	cpc	r27, r17
 308:	19 f4       	brne	.+6      	; 0x310 <UART_config+0x7c>
			UBRR_set=arr2[cnt];
 30a:	d9 01       	movw	r26, r18
 30c:	4d 91       	ld	r20, X+
 30e:	5c 91       	ld	r21, X
 310:	34 96       	adiw	r30, 0x04	; 4
 312:	2e 5f       	subi	r18, 0xFE	; 254
 314:	3f 4f       	sbci	r19, 0xFF	; 255
	unsigned int arr2[]={415,207,103,68,51,34,25,16,12,8};

	UCSR1B = 0x18;  //polled transmission,polled reception, 8-bits
	UCSR1C = 0x06;  //1 stop bit, no parity

	for(int cnt=0;cnt<10;cnt++)
 316:	e6 17       	cp	r30, r22
 318:	f7 07       	cpc	r31, r23
 31a:	71 f7       	brne	.-36     	; 0x2f8 <UART_config+0x64>
			UBRR_set=arr2[cnt];
	}
	UBRR_high=UBRR_set/256;
	UBRR_low=UBRR_set%256;

	UBRR1L=(unsigned char)UBRR_low;
 31c:	ca 01       	movw	r24, r20
 31e:	90 70       	andi	r25, 0x00	; 0
 320:	80 93 99 00 	sts	0x0099, r24
	UBRR1H=(unsigned char)UBRR_high;
 324:	50 93 98 00 	sts	0x0098, r21
}
 328:	ec 96       	adiw	r28, 0x3c	; 60
 32a:	0f b6       	in	r0, 0x3f	; 63
 32c:	f8 94       	cli
 32e:	de bf       	out	0x3e, r29	; 62
 330:	0f be       	out	0x3f, r0	; 63
 332:	cd bf       	out	0x3d, r28	; 61
 334:	cf 91       	pop	r28
 336:	df 91       	pop	r29
 338:	1f 91       	pop	r17
 33a:	0f 91       	pop	r16
 33c:	ff 90       	pop	r15
 33e:	ef 90       	pop	r14
 340:	08 95       	ret

00000342 <UART_Transmit_char>:
/* Function to transmit a single character using UART*/
void UART_Transmit_char(unsigned char ch)
{
 342:	98 2f       	mov	r25, r24
	while(!(UCSR1A&0b00100000));
 344:	80 91 9b 00 	lds	r24, 0x009B
 348:	85 ff       	sbrs	r24, 5
 34a:	fc cf       	rjmp	.-8      	; 0x344 <UART_Transmit_char+0x2>
	UDR1=ch;
 34c:	90 93 9c 00 	sts	0x009C, r25
}
 350:	08 95       	ret

00000352 <UART_Receive_char>:
/* Function to recaive a single charcter using UART*/
unsigned char UART_Receive_char(void)
{
	while(!(UCSR1A&0b10000000));
 352:	80 91 9b 00 	lds	r24, 0x009B
 356:	87 ff       	sbrs	r24, 7
 358:	fc cf       	rjmp	.-8      	; 0x352 <UART_Receive_char>
	return UDR1;
 35a:	80 91 9c 00 	lds	r24, 0x009C
}
 35e:	08 95       	ret

00000360 <UART_Transmit_string>:
void UART_Transmit_string(unsigned char *str)
{
 360:	fc 01       	movw	r30, r24
 362:	07 c0       	rjmp	.+14     	; 0x372 <UART_Transmit_string+0x12>
	UBRR1H=(unsigned char)UBRR_high;
}
/* Function to transmit a single character using UART*/
void UART_Transmit_char(unsigned char ch)
{
	while(!(UCSR1A&0b00100000));
 364:	80 91 9b 00 	lds	r24, 0x009B
 368:	85 ff       	sbrs	r24, 5
 36a:	fc cf       	rjmp	.-8      	; 0x364 <UART_Transmit_string+0x4>
	UDR1=ch;
 36c:	90 93 9c 00 	sts	0x009C, r25
void UART_Transmit_string(unsigned char *str)
{
	while(*str!='\0')
	{
		UART_Transmit_char(*str);
		str++;
 370:	31 96       	adiw	r30, 0x01	; 1
	while(!(UCSR1A&0b10000000));
	return UDR1;
}
void UART_Transmit_string(unsigned char *str)
{
	while(*str!='\0')
 372:	90 81       	ld	r25, Z
 374:	99 23       	and	r25, r25
 376:	b1 f7       	brne	.-20     	; 0x364 <UART_Transmit_string+0x4>
	{
		UART_Transmit_char(*str);
		str++;
	}
}
 378:	08 95       	ret

0000037a <UART_Transmit_num>:
void UART_Transmit_num(unsigned int num)
{
 37a:	0f 93       	push	r16
 37c:	1f 93       	push	r17
 37e:	df 93       	push	r29
 380:	cf 93       	push	r28
 382:	00 d0       	rcall	.+0      	; 0x384 <UART_Transmit_num+0xa>
 384:	0f 92       	push	r0
 386:	cd b7       	in	r28, 0x3d	; 61
 388:	de b7       	in	r29, 0x3e	; 62
 38a:	9c 01       	movw	r18, r24
	unsigned char ch[3],count=2;	

	ch[0]=0;
 38c:	19 82       	std	Y+1, r1	; 0x01
	ch[1]=0;
 38e:	1a 82       	std	Y+2, r1	; 0x02
	ch[2]=0;
 390:	1b 82       	std	Y+3, r1	; 0x03
 392:	42 e0       	ldi	r20, 0x02	; 2
 394:	8e 01       	movw	r16, r28
 396:	0f 5f       	subi	r16, 0xFF	; 255
 398:	1f 4f       	sbci	r17, 0xFF	; 255
 39a:	10 c0       	rjmp	.+32     	; 0x3bc <UART_Transmit_num+0x42>

	while(num!=0)
	{
		ch[count]=num%10;
 39c:	f8 01       	movw	r30, r16
 39e:	e4 0f       	add	r30, r20
 3a0:	f1 1d       	adc	r31, r1
 3a2:	c9 01       	movw	r24, r18
 3a4:	6a e0       	ldi	r22, 0x0A	; 10
 3a6:	70 e0       	ldi	r23, 0x00	; 0
 3a8:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <__udivmodhi4>
 3ac:	80 83       	st	Z, r24
		num=num/10;
 3ae:	c9 01       	movw	r24, r18
 3b0:	6a e0       	ldi	r22, 0x0A	; 10
 3b2:	70 e0       	ldi	r23, 0x00	; 0
 3b4:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <__udivmodhi4>
 3b8:	9b 01       	movw	r18, r22
		count--;
 3ba:	41 50       	subi	r20, 0x01	; 1

	ch[0]=0;
	ch[1]=0;
	ch[2]=0;

	while(num!=0)
 3bc:	21 15       	cp	r18, r1
 3be:	31 05       	cpc	r19, r1
 3c0:	69 f7       	brne	.-38     	; 0x39c <UART_Transmit_num+0x22>
 3c2:	f8 01       	movw	r30, r16
	{
		ch[count]=num%10;
		num=num/10;
		count--;
	}
	for(count=0;count<3;count++)
 3c4:	9e 01       	movw	r18, r28
 3c6:	2c 5f       	subi	r18, 0xFC	; 252
 3c8:	3f 4f       	sbci	r19, 0xFF	; 255
	{
		UART_Transmit_char('0'+ch[count]);
 3ca:	90 81       	ld	r25, Z
	UBRR1H=(unsigned char)UBRR_high;
}
/* Function to transmit a single character using UART*/
void UART_Transmit_char(unsigned char ch)
{
	while(!(UCSR1A&0b00100000));
 3cc:	80 91 9b 00 	lds	r24, 0x009B
 3d0:	85 ff       	sbrs	r24, 5
 3d2:	fc cf       	rjmp	.-8      	; 0x3cc <UART_Transmit_num+0x52>
		num=num/10;
		count--;
	}
	for(count=0;count<3;count++)
	{
		UART_Transmit_char('0'+ch[count]);
 3d4:	90 5d       	subi	r25, 0xD0	; 208
}
/* Function to transmit a single character using UART*/
void UART_Transmit_char(unsigned char ch)
{
	while(!(UCSR1A&0b00100000));
	UDR1=ch;
 3d6:	90 93 9c 00 	sts	0x009C, r25
 3da:	31 96       	adiw	r30, 0x01	; 1
	{
		ch[count]=num%10;
		num=num/10;
		count--;
	}
	for(count=0;count<3;count++)
 3dc:	e2 17       	cp	r30, r18
 3de:	f3 07       	cpc	r31, r19
 3e0:	a1 f7       	brne	.-24     	; 0x3ca <UART_Transmit_num+0x50>
	{
		UART_Transmit_char('0'+ch[count]);
	}
}
 3e2:	0f 90       	pop	r0
 3e4:	0f 90       	pop	r0
 3e6:	0f 90       	pop	r0
 3e8:	cf 91       	pop	r28
 3ea:	df 91       	pop	r29
 3ec:	1f 91       	pop	r17
 3ee:	0f 91       	pop	r16
 3f0:	08 95       	ret

000003f2 <UART_Receive_string>:
	
/* function to receive a string usins UART*/
unsigned char * UART_Receive_string(void)
{
 3f2:	df 93       	push	r29
 3f4:	cf 93       	push	r28
 3f6:	cd b7       	in	r28, 0x3d	; 61
 3f8:	de b7       	in	r29, 0x3e	; 62
 3fa:	c4 56       	subi	r28, 0x64	; 100
 3fc:	d0 40       	sbci	r29, 0x00	; 0
 3fe:	0f b6       	in	r0, 0x3f	; 63
 400:	f8 94       	cli
 402:	de bf       	out	0x3e, r29	; 62
 404:	0f be       	out	0x3f, r0	; 63
 406:	cd bf       	out	0x3d, r28	; 61
	UDR1=ch;
}
/* Function to recaive a single charcter using UART*/
unsigned char UART_Receive_char(void)
{
	while(!(UCSR1A&0b10000000));
 408:	80 91 9b 00 	lds	r24, 0x009B
 40c:	87 ff       	sbrs	r24, 7
 40e:	fc cf       	rjmp	.-8      	; 0x408 <UART_Receive_string+0x16>
	return UDR1;
 410:	80 91 9c 00 	lds	r24, 0x009C
	
/* function to receive a string usins UART*/
unsigned char * UART_Receive_string(void)
{
	unsigned char ch1,str[100],count=0;
	while((ch1=UART_Receive_char())!=13)
 414:	8d 30       	cpi	r24, 0x0D	; 13
 416:	c1 f7       	brne	.-16     	; 0x408 <UART_Receive_string+0x16>
		str[count]=ch1;
		count++;
	}
	str[count]='\0';
	return str;
}
 418:	ce 01       	movw	r24, r28
 41a:	01 96       	adiw	r24, 0x01	; 1
 41c:	cc 59       	subi	r28, 0x9C	; 156
 41e:	df 4f       	sbci	r29, 0xFF	; 255
 420:	0f b6       	in	r0, 0x3f	; 63
 422:	f8 94       	cli
 424:	de bf       	out	0x3e, r29	; 62
 426:	0f be       	out	0x3f, r0	; 63
 428:	cd bf       	out	0x3d, r28	; 61
 42a:	cf 91       	pop	r28
 42c:	df 91       	pop	r29
 42e:	08 95       	ret

00000430 <VT102Attribute>:
#define  COLOR_MAGENTA   5
#define  COLOR_CYAN      6
#define  COLOR_WHITE     7

void VT102Attribute (unsigned char fgcolor, unsigned char bgcolor)
{
 430:	1f 93       	push	r17
 432:	98 2f       	mov	r25, r24
 434:	16 2f       	mov	r17, r22
	UBRR1H=(unsigned char)UBRR_high;
}
/* Function to transmit a single character using UART*/
void UART_Transmit_char(unsigned char ch)
{
	while(!(UCSR1A&0b00100000));
 436:	80 91 9b 00 	lds	r24, 0x009B
 43a:	85 ff       	sbrs	r24, 5
 43c:	fc cf       	rjmp	.-8      	; 0x436 <VT102Attribute+0x6>
	UDR1=ch;
 43e:	8b e1       	ldi	r24, 0x1B	; 27
 440:	80 93 9c 00 	sts	0x009C, r24
	UBRR1H=(unsigned char)UBRR_high;
}
/* Function to transmit a single character using UART*/
void UART_Transmit_char(unsigned char ch)
{
	while(!(UCSR1A&0b00100000));
 444:	80 91 9b 00 	lds	r24, 0x009B
 448:	85 ff       	sbrs	r24, 5
 44a:	fc cf       	rjmp	.-8      	; 0x444 <VT102Attribute+0x14>
	UDR1=ch;
 44c:	8b e5       	ldi	r24, 0x5B	; 91
 44e:	80 93 9c 00 	sts	0x009C, r24
    UART_Transmit_char(0x1b);
    UART_Transmit_char('[');
    UART_Transmit_num(30 + fgcolor);
 452:	89 2f       	mov	r24, r25
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	4e 96       	adiw	r24, 0x1e	; 30
 458:	0e 94 bd 01 	call	0x37a	; 0x37a <UART_Transmit_num>
	UBRR1H=(unsigned char)UBRR_high;
}
/* Function to transmit a single character using UART*/
void UART_Transmit_char(unsigned char ch)
{
	while(!(UCSR1A&0b00100000));
 45c:	80 91 9b 00 	lds	r24, 0x009B
 460:	85 ff       	sbrs	r24, 5
 462:	fc cf       	rjmp	.-8      	; 0x45c <VT102Attribute+0x2c>
	UDR1=ch;
 464:	8b e3       	ldi	r24, 0x3B	; 59
 466:	80 93 9c 00 	sts	0x009C, r24
    UART_Transmit_char(';');
    UART_Transmit_num(40 + bgcolor);
 46a:	81 2f       	mov	r24, r17
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	88 96       	adiw	r24, 0x28	; 40
 470:	0e 94 bd 01 	call	0x37a	; 0x37a <UART_Transmit_num>
	UBRR1H=(unsigned char)UBRR_high;
}
/* Function to transmit a single character using UART*/
void UART_Transmit_char(unsigned char ch)
{
	while(!(UCSR1A&0b00100000));
 474:	80 91 9b 00 	lds	r24, 0x009B
 478:	85 ff       	sbrs	r24, 5
 47a:	fc cf       	rjmp	.-8      	; 0x474 <VT102Attribute+0x44>
	UDR1=ch;
 47c:	8d e6       	ldi	r24, 0x6D	; 109
 47e:	80 93 9c 00 	sts	0x009C, r24
    UART_Transmit_char('m');
}
 482:	1f 91       	pop	r17
 484:	08 95       	ret

00000486 <VT102DispStr>:


void VT102DispStr (unsigned char x, unsigned char y, unsigned char *s, unsigned char fgcolor, unsigned char bgcolor)
{
 486:	ff 92       	push	r15
 488:	0f 93       	push	r16
 48a:	1f 93       	push	r17
 48c:	cf 93       	push	r28
 48e:	df 93       	push	r29
 490:	f8 2e       	mov	r15, r24
 492:	16 2f       	mov	r17, r22
 494:	ea 01       	movw	r28, r20
 496:	82 2f       	mov	r24, r18
 498:	60 2f       	mov	r22, r16
    VT102Attribute(fgcolor, bgcolor);
 49a:	0e 94 18 02 	call	0x430	; 0x430 <VT102Attribute>
	UBRR1H=(unsigned char)UBRR_high;
}
/* Function to transmit a single character using UART*/
void UART_Transmit_char(unsigned char ch)
{
	while(!(UCSR1A&0b00100000));
 49e:	80 91 9b 00 	lds	r24, 0x009B
 4a2:	85 ff       	sbrs	r24, 5
 4a4:	fc cf       	rjmp	.-8      	; 0x49e <VT102DispStr+0x18>
	UDR1=ch;
 4a6:	8b e1       	ldi	r24, 0x1B	; 27
 4a8:	80 93 9c 00 	sts	0x009C, r24
	UBRR1H=(unsigned char)UBRR_high;
}
/* Function to transmit a single character using UART*/
void UART_Transmit_char(unsigned char ch)
{
	while(!(UCSR1A&0b00100000));
 4ac:	80 91 9b 00 	lds	r24, 0x009B
 4b0:	85 ff       	sbrs	r24, 5
 4b2:	fc cf       	rjmp	.-8      	; 0x4ac <VT102DispStr+0x26>
	UDR1=ch;
 4b4:	8b e5       	ldi	r24, 0x5B	; 91
 4b6:	80 93 9c 00 	sts	0x009C, r24
    UART_Transmit_char(0x1B);
    UART_Transmit_char('[');
    UART_Transmit_num(y);
 4ba:	81 2f       	mov	r24, r17
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	0e 94 bd 01 	call	0x37a	; 0x37a <UART_Transmit_num>
	UBRR1H=(unsigned char)UBRR_high;
}
/* Function to transmit a single character using UART*/
void UART_Transmit_char(unsigned char ch)
{
	while(!(UCSR1A&0b00100000));
 4c2:	80 91 9b 00 	lds	r24, 0x009B
 4c6:	85 ff       	sbrs	r24, 5
 4c8:	fc cf       	rjmp	.-8      	; 0x4c2 <VT102DispStr+0x3c>
	UDR1=ch;
 4ca:	8b e3       	ldi	r24, 0x3B	; 59
 4cc:	80 93 9c 00 	sts	0x009C, r24
    UART_Transmit_char(';');
    UART_Transmit_num(x);
 4d0:	8f 2d       	mov	r24, r15
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	0e 94 bd 01 	call	0x37a	; 0x37a <UART_Transmit_num>
	UBRR1H=(unsigned char)UBRR_high;
}
/* Function to transmit a single character using UART*/
void UART_Transmit_char(unsigned char ch)
{
	while(!(UCSR1A&0b00100000));
 4d8:	80 91 9b 00 	lds	r24, 0x009B
 4dc:	85 ff       	sbrs	r24, 5
 4de:	fc cf       	rjmp	.-8      	; 0x4d8 <VT102DispStr+0x52>
	UDR1=ch;
 4e0:	88 e4       	ldi	r24, 0x48	; 72
 4e2:	80 93 9c 00 	sts	0x009C, r24
    UART_Transmit_char('H');
    UART_Transmit_string(s);
 4e6:	ce 01       	movw	r24, r28
 4e8:	0e 94 b0 01 	call	0x360	; 0x360 <UART_Transmit_string>
}
 4ec:	df 91       	pop	r29
 4ee:	cf 91       	pop	r28
 4f0:	1f 91       	pop	r17
 4f2:	0f 91       	pop	r16
 4f4:	ff 90       	pop	r15
 4f6:	08 95       	ret

000004f8 <VT102DispClrScr>:
//void VT102DispClrScr (unsigned char fgcolor, unsigned char bgcolor)
void VT102DispClrScr (void)
{
    VT102Attribute(COLOR_RED,COLOR_RED);
 4f8:	81 e0       	ldi	r24, 0x01	; 1
 4fa:	61 e0       	ldi	r22, 0x01	; 1
 4fc:	0e 94 18 02 	call	0x430	; 0x430 <VT102Attribute>
    //VT102Attribute(fgcolor,bgcolor);
    UART_Transmit_string("\x1B[2J");
 500:	80 e0       	ldi	r24, 0x00	; 0
 502:	91 e0       	ldi	r25, 0x01	; 1
 504:	0e 94 b0 01 	call	0x360	; 0x360 <UART_Transmit_string>
}
 508:	08 95       	ret

0000050a <VT102DispChar>:

void VT102DispChar (unsigned char x, unsigned char y, unsigned char c, unsigned char fgcolor, unsigned char bgcolor)
{
 50a:	ef 92       	push	r14
 50c:	ff 92       	push	r15
 50e:	0f 93       	push	r16
 510:	1f 93       	push	r17
 512:	f8 2e       	mov	r15, r24
 514:	16 2f       	mov	r17, r22
 516:	e4 2e       	mov	r14, r20
 518:	82 2f       	mov	r24, r18
 51a:	60 2f       	mov	r22, r16
    VT102Attribute(fgcolor, bgcolor);
 51c:	0e 94 18 02 	call	0x430	; 0x430 <VT102Attribute>
	UBRR1H=(unsigned char)UBRR_high;
}
/* Function to transmit a single character using UART*/
void UART_Transmit_char(unsigned char ch)
{
	while(!(UCSR1A&0b00100000));
 520:	80 91 9b 00 	lds	r24, 0x009B
 524:	85 ff       	sbrs	r24, 5
 526:	fc cf       	rjmp	.-8      	; 0x520 <VT102DispChar+0x16>
	UDR1=ch;
 528:	8b e1       	ldi	r24, 0x1B	; 27
 52a:	80 93 9c 00 	sts	0x009C, r24
	UBRR1H=(unsigned char)UBRR_high;
}
/* Function to transmit a single character using UART*/
void UART_Transmit_char(unsigned char ch)
{
	while(!(UCSR1A&0b00100000));
 52e:	80 91 9b 00 	lds	r24, 0x009B
 532:	85 ff       	sbrs	r24, 5
 534:	fc cf       	rjmp	.-8      	; 0x52e <VT102DispChar+0x24>
	UDR1=ch;
 536:	8b e5       	ldi	r24, 0x5B	; 91
 538:	80 93 9c 00 	sts	0x009C, r24
    UART_Transmit_char(0x1B);
    UART_Transmit_char('[');
    UART_Transmit_num(y);
 53c:	81 2f       	mov	r24, r17
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	0e 94 bd 01 	call	0x37a	; 0x37a <UART_Transmit_num>
	UBRR1H=(unsigned char)UBRR_high;
}
/* Function to transmit a single character using UART*/
void UART_Transmit_char(unsigned char ch)
{
	while(!(UCSR1A&0b00100000));
 544:	80 91 9b 00 	lds	r24, 0x009B
 548:	85 ff       	sbrs	r24, 5
 54a:	fc cf       	rjmp	.-8      	; 0x544 <VT102DispChar+0x3a>
	UDR1=ch;
 54c:	8b e3       	ldi	r24, 0x3B	; 59
 54e:	80 93 9c 00 	sts	0x009C, r24
    UART_Transmit_char(';');
    UART_Transmit_num(x);
 552:	8f 2d       	mov	r24, r15
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	0e 94 bd 01 	call	0x37a	; 0x37a <UART_Transmit_num>
	UBRR1H=(unsigned char)UBRR_high;
}
/* Function to transmit a single character using UART*/
void UART_Transmit_char(unsigned char ch)
{
	while(!(UCSR1A&0b00100000));
 55a:	80 91 9b 00 	lds	r24, 0x009B
 55e:	85 ff       	sbrs	r24, 5
 560:	fc cf       	rjmp	.-8      	; 0x55a <VT102DispChar+0x50>
	UDR1=ch;
 562:	88 e4       	ldi	r24, 0x48	; 72
 564:	80 93 9c 00 	sts	0x009C, r24
	UBRR1H=(unsigned char)UBRR_high;
}
/* Function to transmit a single character using UART*/
void UART_Transmit_char(unsigned char ch)
{
	while(!(UCSR1A&0b00100000));
 568:	80 91 9b 00 	lds	r24, 0x009B
 56c:	85 ff       	sbrs	r24, 5
 56e:	fc cf       	rjmp	.-8      	; 0x568 <VT102DispChar+0x5e>
	UDR1=ch;
 570:	e0 92 9c 00 	sts	0x009C, r14
    UART_Transmit_char('H');
    UART_Transmit_char(c);
}
 574:	1f 91       	pop	r17
 576:	0f 91       	pop	r16
 578:	ff 90       	pop	r15
 57a:	ef 90       	pop	r14
 57c:	08 95       	ret

0000057e <clearscreen>:
		}
	}
}

void clearscreen(unsigned char X,unsigned char Y)
{
 57e:	0f 93       	push	r16
	cli();
 580:	f8 94       	cli
	VT102DispChar(X,Y,SHOW_CURSOR_BLANK,COLOR_BLACK,COLOR_RED);
 582:	40 e2       	ldi	r20, 0x20	; 32
 584:	20 e0       	ldi	r18, 0x00	; 0
 586:	01 e0       	ldi	r16, 0x01	; 1
 588:	0e 94 85 02 	call	0x50a	; 0x50a <VT102DispChar>
	sei();
 58c:	78 94       	sei
	/* VT102DispClrScr(); */
}
 58e:	0f 91       	pop	r16
 590:	08 95       	ret

00000592 <main>:


void clearscreen(unsigned char X,unsigned char Y);

int main(void)
{
 592:	ff 92       	push	r15
 594:	0f 93       	push	r16
 596:	1f 93       	push	r17
	unsigned char s_x=40,s_y=10;

	UART_config(9600);
 598:	60 e8       	ldi	r22, 0x80	; 128
 59a:	75 e2       	ldi	r23, 0x25	; 37
 59c:	80 e0       	ldi	r24, 0x00	; 0
 59e:	90 e0       	ldi	r25, 0x00	; 0
 5a0:	0e 94 4a 01 	call	0x294	; 0x294 <UART_config>
	lcd_init();
 5a4:	0e 94 2f 01 	call	0x25e	; 0x25e <lcd_init>

	/////////////  CONFIGURE ADC  ////////////////////////////////////////////
	ADMUX = (1<<REFS1) | (1<<REFS0) | (1<<ADLAR) |(1<<MUX0);
 5a8:	81 ee       	ldi	r24, 0xE1	; 225
 5aa:	87 b9       	out	0x07, r24	; 7
	ADCSRA = 0xEF;
 5ac:	8f ee       	ldi	r24, 0xEF	; 239
 5ae:	86 b9       	out	0x06, r24	; 6
	/////////////  CONFIGURE EXT INT  ////////////////////////////////////////
	DDRE &= 0xBF;	//configure as input for INT6
 5b0:	16 98       	cbi	0x02, 6	; 2
	PORTE |=0x80;	//active pullup for INT6
 5b2:	1f 9a       	sbi	0x03, 7	; 3
	EICRB=0b11000000;
 5b4:	80 ec       	ldi	r24, 0xC0	; 192
 5b6:	8a bf       	out	0x3a, r24	; 58
	EIMSK=0b10000000;
 5b8:	80 e8       	ldi	r24, 0x80	; 128
 5ba:	89 bf       	out	0x39, r24	; 57
	/////////////////////////////////////////////////////////////////////////


	VT102DispClrScr();
 5bc:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <VT102DispClrScr>
	VT102DispChar(s_x,s_y,SHOW_CURSOR,COLOR_BLACK,COLOR_RED);
 5c0:	88 e2       	ldi	r24, 0x28	; 40
 5c2:	6a e0       	ldi	r22, 0x0A	; 10
 5c4:	4a e2       	ldi	r20, 0x2A	; 42
 5c6:	20 e0       	ldi	r18, 0x00	; 0
 5c8:	01 e0       	ldi	r16, 0x01	; 1
 5ca:	0e 94 85 02 	call	0x50a	; 0x50a <VT102DispChar>
	VT102DispChar(s_x,s_y,SHOW_CURSOR_BLANK,COLOR_BLACK,COLOR_RED);
 5ce:	88 e2       	ldi	r24, 0x28	; 40
 5d0:	6a e0       	ldi	r22, 0x0A	; 10
 5d2:	40 e2       	ldi	r20, 0x20	; 32
 5d4:	20 e0       	ldi	r18, 0x00	; 0
 5d6:	0e 94 85 02 	call	0x50a	; 0x50a <VT102DispChar>
	VT102DispStr(50,24,"SPEED (SW4 on Board) :",COLOR_BLACK,COLOR_RED);
 5da:	82 e3       	ldi	r24, 0x32	; 50
 5dc:	68 e1       	ldi	r22, 0x18	; 24
 5de:	45 e0       	ldi	r20, 0x05	; 5
 5e0:	51 e0       	ldi	r21, 0x01	; 1
 5e2:	20 e0       	ldi	r18, 0x00	; 0
 5e4:	0e 94 43 02 	call	0x486	; 0x486 <VT102DispStr>
	sei();
 5e8:	78 94       	sei
 5ea:	9a e0       	ldi	r25, 0x0A	; 10
 5ec:	f9 2e       	mov	r15, r25
 5ee:	18 e2       	ldi	r17, 0x28	; 40

	while(1)
	{
		if(G_Joy_over)
 5f0:	80 91 65 01 	lds	r24, 0x0165
 5f4:	88 23       	and	r24, r24
 5f6:	e1 f3       	breq	.-8      	; 0x5f0 <main+0x5e>
		{
			lcd_gotoxy1(0);
 5f8:	80 e0       	ldi	r24, 0x00	; 0
 5fa:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <lcd_gotoxy1>
			lcd_showvalue(G_Joy_xvalue);
 5fe:	80 91 23 01 	lds	r24, 0x0123
 602:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <lcd_showvalue>
			lcd_gotoxy2(0);
 606:	80 e0       	ldi	r24, 0x00	; 0
 608:	0e 94 d6 00 	call	0x1ac	; 0x1ac <lcd_gotoxy2>
			lcd_showvalue(G_Joy_yvalue);
 60c:	80 91 24 01 	lds	r24, 0x0124
 610:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <lcd_showvalue>
			G_Joy_over = 0;
 614:	10 92 65 01 	sts	0x0165, r1

			if(G_Joy_xvalue>JOY_X_MAXCHK && s_x>0)
 618:	80 91 23 01 	lds	r24, 0x0123
 61c:	81 3f       	cpi	r24, 0xF1	; 241
 61e:	40 f0       	brcs	.+16     	; 0x630 <main+0x9e>
 620:	11 23       	and	r17, r17
 622:	31 f0       	breq	.+12     	; 0x630 <main+0x9e>
			{
				clearscreen(s_x,s_y);
 624:	81 2f       	mov	r24, r17
 626:	6f 2d       	mov	r22, r15
 628:	0e 94 bf 02 	call	0x57e	; 0x57e <clearscreen>
				VT102DispChar(--s_x,s_y,SHOW_CURSOR,COLOR_BLACK,COLOR_RED);
 62c:	11 50       	subi	r17, 0x01	; 1
 62e:	24 c0       	rjmp	.+72     	; 0x678 <main+0xe6>
			}
			else if(G_Joy_xvalue<JOY_X_MINCHK && s_x<=80)
 630:	80 91 23 01 	lds	r24, 0x0123
 634:	8a 30       	cpi	r24, 0x0A	; 10
 636:	40 f4       	brcc	.+16     	; 0x648 <main+0xb6>
 638:	11 35       	cpi	r17, 0x51	; 81
 63a:	30 f4       	brcc	.+12     	; 0x648 <main+0xb6>
			{
				clearscreen(s_x,s_y);
 63c:	81 2f       	mov	r24, r17
 63e:	6f 2d       	mov	r22, r15
 640:	0e 94 bf 02 	call	0x57e	; 0x57e <clearscreen>
				VT102DispChar(++s_x,s_y,SHOW_CURSOR,COLOR_BLACK,COLOR_RED);
 644:	1f 5f       	subi	r17, 0xFF	; 255
 646:	18 c0       	rjmp	.+48     	; 0x678 <main+0xe6>
			}
			else if(G_Joy_yvalue>JOY_Y_MAXCHK && s_y>0)
 648:	80 91 24 01 	lds	r24, 0x0124
 64c:	81 3f       	cpi	r24, 0xF1	; 241
 64e:	40 f0       	brcs	.+16     	; 0x660 <main+0xce>
 650:	ff 20       	and	r15, r15
 652:	31 f0       	breq	.+12     	; 0x660 <main+0xce>
			{
				clearscreen(s_x,s_y);
 654:	81 2f       	mov	r24, r17
 656:	6f 2d       	mov	r22, r15
 658:	0e 94 bf 02 	call	0x57e	; 0x57e <clearscreen>
				VT102DispChar(s_x,--s_y,SHOW_CURSOR,COLOR_BLACK,COLOR_RED);
 65c:	fa 94       	dec	r15
 65e:	0c c0       	rjmp	.+24     	; 0x678 <main+0xe6>
			}
			else if(G_Joy_yvalue<JOY_Y_MINCHK && s_y<25)
 660:	80 91 24 01 	lds	r24, 0x0124
 664:	8a 30       	cpi	r24, 0x0A	; 10
 666:	20 f6       	brcc	.-120    	; 0x5f0 <main+0x5e>
 668:	88 e1       	ldi	r24, 0x18	; 24
 66a:	8f 15       	cp	r24, r15
 66c:	08 f2       	brcs	.-126    	; 0x5f0 <main+0x5e>
			{
				clearscreen(s_x,s_y);
 66e:	81 2f       	mov	r24, r17
 670:	6f 2d       	mov	r22, r15
 672:	0e 94 bf 02 	call	0x57e	; 0x57e <clearscreen>
				VT102DispChar(s_x,++s_y,SHOW_CURSOR,COLOR_BLACK,COLOR_RED);
 676:	f3 94       	inc	r15
 678:	81 2f       	mov	r24, r17
 67a:	6f 2d       	mov	r22, r15
 67c:	4a e2       	ldi	r20, 0x2A	; 42
 67e:	20 e0       	ldi	r18, 0x00	; 0
 680:	01 e0       	ldi	r16, 0x01	; 1
 682:	0e 94 85 02 	call	0x50a	; 0x50a <VT102DispChar>
 686:	b4 cf       	rjmp	.-152    	; 0x5f0 <main+0x5e>

00000688 <__vector_21>:
	sei();
	/* VT102DispClrScr(); */
}

ISR(ADC_vect)
{
 688:	1f 92       	push	r1
 68a:	0f 92       	push	r0
 68c:	0f b6       	in	r0, 0x3f	; 63
 68e:	0f 92       	push	r0
 690:	11 24       	eor	r1, r1
 692:	2f 93       	push	r18
 694:	3f 93       	push	r19
 696:	4f 93       	push	r20
 698:	8f 93       	push	r24
 69a:	9f 93       	push	r25
	static unsigned char JOY_scan = JOY_X;
	static unsigned char Joy_value = 0;
	static int count=0;

	Joy_value = ADCH;
 69c:	45 b1       	in	r20, 0x05	; 5
 69e:	40 93 68 01 	sts	0x0168, r20
	count++;
 6a2:	80 91 66 01 	lds	r24, 0x0166
 6a6:	90 91 67 01 	lds	r25, 0x0167
 6aa:	01 96       	adiw	r24, 0x01	; 1
 6ac:	90 93 67 01 	sts	0x0167, r25
 6b0:	80 93 66 01 	sts	0x0166, r24

	if(count == G_Joy_SPEED)
 6b4:	20 91 21 01 	lds	r18, 0x0121
 6b8:	30 91 22 01 	lds	r19, 0x0122
 6bc:	82 17       	cp	r24, r18
 6be:	93 07       	cpc	r25, r19
 6c0:	c1 f4       	brne	.+48     	; 0x6f2 <__vector_21+0x6a>
	{
		count=0;
 6c2:	10 92 67 01 	sts	0x0167, r1
 6c6:	10 92 66 01 	sts	0x0166, r1

		if(JOY_scan == JOY_X)
 6ca:	80 91 69 01 	lds	r24, 0x0169
 6ce:	88 23       	and	r24, r24
 6d0:	39 f4       	brne	.+14     	; 0x6e0 <__vector_21+0x58>
		{
			JOY_scan = JOY_Y;
 6d2:	81 e0       	ldi	r24, 0x01	; 1
 6d4:	80 93 69 01 	sts	0x0169, r24

			G_Joy_xvalue = Joy_value;
 6d8:	40 93 23 01 	sts	0x0123, r20

			ADMUX = (1<<REFS1) | (1<<REFS0) | (1<<ADLAR) |(1<<MUX1);
 6dc:	82 ee       	ldi	r24, 0xE2	; 226
 6de:	05 c0       	rjmp	.+10     	; 0x6ea <__vector_21+0x62>
		}
		else
		{
			JOY_scan = JOY_X;
 6e0:	10 92 69 01 	sts	0x0169, r1

			G_Joy_yvalue = Joy_value;
 6e4:	40 93 24 01 	sts	0x0124, r20

			ADMUX = (1<<REFS1) | (1<<REFS0) | (1<<ADLAR) |(1<<MUX0);
 6e8:	81 ee       	ldi	r24, 0xE1	; 225
 6ea:	87 b9       	out	0x07, r24	; 7
		}
		G_Joy_over = 1;
 6ec:	81 e0       	ldi	r24, 0x01	; 1
 6ee:	80 93 65 01 	sts	0x0165, r24
	}
}
 6f2:	9f 91       	pop	r25
 6f4:	8f 91       	pop	r24
 6f6:	4f 91       	pop	r20
 6f8:	3f 91       	pop	r19
 6fa:	2f 91       	pop	r18
 6fc:	0f 90       	pop	r0
 6fe:	0f be       	out	0x3f, r0	; 63
 700:	0f 90       	pop	r0
 702:	1f 90       	pop	r1
 704:	18 95       	reti

00000706 <__vector_8>:

ISR(INT7_vect)
{
 706:	1f 92       	push	r1
 708:	0f 92       	push	r0
 70a:	0f b6       	in	r0, 0x3f	; 63
 70c:	0f 92       	push	r0
 70e:	11 24       	eor	r1, r1
 710:	0f 93       	push	r16
 712:	1f 93       	push	r17
 714:	2f 93       	push	r18
 716:	3f 93       	push	r19
 718:	4f 93       	push	r20
 71a:	5f 93       	push	r21
 71c:	6f 93       	push	r22
 71e:	7f 93       	push	r23
 720:	8f 93       	push	r24
 722:	9f 93       	push	r25
 724:	af 93       	push	r26
 726:	bf 93       	push	r27
 728:	ef 93       	push	r30
 72a:	ff 93       	push	r31
 72c:	df 93       	push	r29
 72e:	cf 93       	push	r28
 730:	cd b7       	in	r28, 0x3d	; 61
 732:	de b7       	in	r29, 0x3e	; 62
 734:	2a 97       	sbiw	r28, 0x0a	; 10
 736:	de bf       	out	0x3e, r29	; 62
 738:	cd bf       	out	0x3d, r28	; 61
	char Mystring[10];
	if(G_Joy_SPEED>300)
 73a:	80 91 21 01 	lds	r24, 0x0121
 73e:	90 91 22 01 	lds	r25, 0x0122
 742:	8d 52       	subi	r24, 0x2D	; 45
 744:	91 40       	sbci	r25, 0x01	; 1
 746:	a0 f1       	brcs	.+104    	; 0x7b0 <__vector_8+0xaa>
	{
		G_Joy_SPEED -=100;
 748:	80 91 21 01 	lds	r24, 0x0121
 74c:	90 91 22 01 	lds	r25, 0x0122
 750:	84 56       	subi	r24, 0x64	; 100
 752:	90 40       	sbci	r25, 0x00	; 0
 754:	90 93 22 01 	sts	0x0122, r25
 758:	80 93 21 01 	sts	0x0121, r24
		sprintf(Mystring,"%04d",G_Joy_SPEED);
 75c:	20 91 21 01 	lds	r18, 0x0121
 760:	30 91 22 01 	lds	r19, 0x0122
 764:	00 d0       	rcall	.+0      	; 0x766 <__vector_8+0x60>
 766:	00 d0       	rcall	.+0      	; 0x768 <__vector_8+0x62>
 768:	00 d0       	rcall	.+0      	; 0x76a <__vector_8+0x64>
 76a:	ed b7       	in	r30, 0x3d	; 61
 76c:	fe b7       	in	r31, 0x3e	; 62
 76e:	31 96       	adiw	r30, 0x01	; 1
 770:	8e 01       	movw	r16, r28
 772:	0f 5f       	subi	r16, 0xFF	; 255
 774:	1f 4f       	sbci	r17, 0xFF	; 255
 776:	ad b7       	in	r26, 0x3d	; 61
 778:	be b7       	in	r27, 0x3e	; 62
 77a:	12 96       	adiw	r26, 0x02	; 2
 77c:	1c 93       	st	X, r17
 77e:	0e 93       	st	-X, r16
 780:	11 97       	sbiw	r26, 0x01	; 1
 782:	8c e1       	ldi	r24, 0x1C	; 28
 784:	91 e0       	ldi	r25, 0x01	; 1
 786:	93 83       	std	Z+3, r25	; 0x03
 788:	82 83       	std	Z+2, r24	; 0x02
 78a:	35 83       	std	Z+5, r19	; 0x05
 78c:	24 83       	std	Z+4, r18	; 0x04
 78e:	0e 94 23 04 	call	0x846	; 0x846 <sprintf>
		VT102DispStr(75,24,Mystring,COLOR_BLACK,COLOR_RED);
 792:	8d b7       	in	r24, 0x3d	; 61
 794:	9e b7       	in	r25, 0x3e	; 62
 796:	06 96       	adiw	r24, 0x06	; 6
 798:	0f b6       	in	r0, 0x3f	; 63
 79a:	f8 94       	cli
 79c:	9e bf       	out	0x3e, r25	; 62
 79e:	0f be       	out	0x3f, r0	; 63
 7a0:	8d bf       	out	0x3d, r24	; 61
 7a2:	8b e4       	ldi	r24, 0x4B	; 75
 7a4:	68 e1       	ldi	r22, 0x18	; 24
 7a6:	a8 01       	movw	r20, r16
 7a8:	20 e0       	ldi	r18, 0x00	; 0
 7aa:	01 e0       	ldi	r16, 0x01	; 1
 7ac:	0e 94 43 02 	call	0x486	; 0x486 <VT102DispStr>
	}
}
 7b0:	2a 96       	adiw	r28, 0x0a	; 10
 7b2:	de bf       	out	0x3e, r29	; 62
 7b4:	cd bf       	out	0x3d, r28	; 61
 7b6:	cf 91       	pop	r28
 7b8:	df 91       	pop	r29
 7ba:	ff 91       	pop	r31
 7bc:	ef 91       	pop	r30
 7be:	bf 91       	pop	r27
 7c0:	af 91       	pop	r26
 7c2:	9f 91       	pop	r25
 7c4:	8f 91       	pop	r24
 7c6:	7f 91       	pop	r23
 7c8:	6f 91       	pop	r22
 7ca:	5f 91       	pop	r21
 7cc:	4f 91       	pop	r20
 7ce:	3f 91       	pop	r19
 7d0:	2f 91       	pop	r18
 7d2:	1f 91       	pop	r17
 7d4:	0f 91       	pop	r16
 7d6:	0f 90       	pop	r0
 7d8:	0f be       	out	0x3f, r0	; 63
 7da:	0f 90       	pop	r0
 7dc:	1f 90       	pop	r1
 7de:	18 95       	reti

000007e0 <__udivmodqi4>:
 7e0:	99 1b       	sub	r25, r25
 7e2:	79 e0       	ldi	r23, 0x09	; 9
 7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__udivmodqi4_ep>

000007e6 <__udivmodqi4_loop>:
 7e6:	99 1f       	adc	r25, r25
 7e8:	96 17       	cp	r25, r22
 7ea:	08 f0       	brcs	.+2      	; 0x7ee <__udivmodqi4_ep>
 7ec:	96 1b       	sub	r25, r22

000007ee <__udivmodqi4_ep>:
 7ee:	88 1f       	adc	r24, r24
 7f0:	7a 95       	dec	r23
 7f2:	c9 f7       	brne	.-14     	; 0x7e6 <__udivmodqi4_loop>
 7f4:	80 95       	com	r24
 7f6:	08 95       	ret

000007f8 <__udivmodhi4>:
 7f8:	aa 1b       	sub	r26, r26
 7fa:	bb 1b       	sub	r27, r27
 7fc:	51 e1       	ldi	r21, 0x11	; 17
 7fe:	07 c0       	rjmp	.+14     	; 0x80e <__udivmodhi4_ep>

00000800 <__udivmodhi4_loop>:
 800:	aa 1f       	adc	r26, r26
 802:	bb 1f       	adc	r27, r27
 804:	a6 17       	cp	r26, r22
 806:	b7 07       	cpc	r27, r23
 808:	10 f0       	brcs	.+4      	; 0x80e <__udivmodhi4_ep>
 80a:	a6 1b       	sub	r26, r22
 80c:	b7 0b       	sbc	r27, r23

0000080e <__udivmodhi4_ep>:
 80e:	88 1f       	adc	r24, r24
 810:	99 1f       	adc	r25, r25
 812:	5a 95       	dec	r21
 814:	a9 f7       	brne	.-22     	; 0x800 <__udivmodhi4_loop>
 816:	80 95       	com	r24
 818:	90 95       	com	r25
 81a:	bc 01       	movw	r22, r24
 81c:	cd 01       	movw	r24, r26
 81e:	08 95       	ret

00000820 <__divmodhi4>:
 820:	97 fb       	bst	r25, 7
 822:	09 2e       	mov	r0, r25
 824:	07 26       	eor	r0, r23
 826:	0a d0       	rcall	.+20     	; 0x83c <__divmodhi4_neg1>
 828:	77 fd       	sbrc	r23, 7
 82a:	04 d0       	rcall	.+8      	; 0x834 <__divmodhi4_neg2>
 82c:	e5 df       	rcall	.-54     	; 0x7f8 <__udivmodhi4>
 82e:	06 d0       	rcall	.+12     	; 0x83c <__divmodhi4_neg1>
 830:	00 20       	and	r0, r0
 832:	1a f4       	brpl	.+6      	; 0x83a <__divmodhi4_exit>

00000834 <__divmodhi4_neg2>:
 834:	70 95       	com	r23
 836:	61 95       	neg	r22
 838:	7f 4f       	sbci	r23, 0xFF	; 255

0000083a <__divmodhi4_exit>:
 83a:	08 95       	ret

0000083c <__divmodhi4_neg1>:
 83c:	f6 f7       	brtc	.-4      	; 0x83a <__divmodhi4_exit>
 83e:	90 95       	com	r25
 840:	81 95       	neg	r24
 842:	9f 4f       	sbci	r25, 0xFF	; 255
 844:	08 95       	ret

00000846 <sprintf>:
 846:	ae e0       	ldi	r26, 0x0E	; 14
 848:	b0 e0       	ldi	r27, 0x00	; 0
 84a:	e9 e2       	ldi	r30, 0x29	; 41
 84c:	f4 e0       	ldi	r31, 0x04	; 4
 84e:	0c 94 d2 06 	jmp	0xda4	; 0xda4 <__prologue_saves__+0x1c>
 852:	0d 89       	ldd	r16, Y+21	; 0x15
 854:	1e 89       	ldd	r17, Y+22	; 0x16
 856:	86 e0       	ldi	r24, 0x06	; 6
 858:	8c 83       	std	Y+4, r24	; 0x04
 85a:	1a 83       	std	Y+2, r17	; 0x02
 85c:	09 83       	std	Y+1, r16	; 0x01
 85e:	8f ef       	ldi	r24, 0xFF	; 255
 860:	9f e7       	ldi	r25, 0x7F	; 127
 862:	9e 83       	std	Y+6, r25	; 0x06
 864:	8d 83       	std	Y+5, r24	; 0x05
 866:	9e 01       	movw	r18, r28
 868:	27 5e       	subi	r18, 0xE7	; 231
 86a:	3f 4f       	sbci	r19, 0xFF	; 255
 86c:	ce 01       	movw	r24, r28
 86e:	01 96       	adiw	r24, 0x01	; 1
 870:	6f 89       	ldd	r22, Y+23	; 0x17
 872:	78 8d       	ldd	r23, Y+24	; 0x18
 874:	a9 01       	movw	r20, r18
 876:	0e 94 47 04 	call	0x88e	; 0x88e <vfprintf>
 87a:	2f 81       	ldd	r18, Y+7	; 0x07
 87c:	38 85       	ldd	r19, Y+8	; 0x08
 87e:	02 0f       	add	r16, r18
 880:	13 1f       	adc	r17, r19
 882:	f8 01       	movw	r30, r16
 884:	10 82       	st	Z, r1
 886:	2e 96       	adiw	r28, 0x0e	; 14
 888:	e4 e0       	ldi	r30, 0x04	; 4
 88a:	0c 94 ee 06 	jmp	0xddc	; 0xddc <__epilogue_restores__+0x1c>

0000088e <vfprintf>:
 88e:	ab e0       	ldi	r26, 0x0B	; 11
 890:	b0 e0       	ldi	r27, 0x00	; 0
 892:	ed e4       	ldi	r30, 0x4D	; 77
 894:	f4 e0       	ldi	r31, 0x04	; 4
 896:	0c 94 c4 06 	jmp	0xd88	; 0xd88 <__prologue_saves__>
 89a:	3c 01       	movw	r6, r24
 89c:	2b 01       	movw	r4, r22
 89e:	5a 01       	movw	r10, r20
 8a0:	fc 01       	movw	r30, r24
 8a2:	17 82       	std	Z+7, r1	; 0x07
 8a4:	16 82       	std	Z+6, r1	; 0x06
 8a6:	83 81       	ldd	r24, Z+3	; 0x03
 8a8:	81 fd       	sbrc	r24, 1
 8aa:	03 c0       	rjmp	.+6      	; 0x8b2 <vfprintf+0x24>
 8ac:	6f ef       	ldi	r22, 0xFF	; 255
 8ae:	7f ef       	ldi	r23, 0xFF	; 255
 8b0:	c6 c1       	rjmp	.+908    	; 0xc3e <vfprintf+0x3b0>
 8b2:	9a e0       	ldi	r25, 0x0A	; 10
 8b4:	89 2e       	mov	r8, r25
 8b6:	1e 01       	movw	r2, r28
 8b8:	08 94       	sec
 8ba:	21 1c       	adc	r2, r1
 8bc:	31 1c       	adc	r3, r1
 8be:	f3 01       	movw	r30, r6
 8c0:	23 81       	ldd	r18, Z+3	; 0x03
 8c2:	f2 01       	movw	r30, r4
 8c4:	23 fd       	sbrc	r18, 3
 8c6:	85 91       	lpm	r24, Z+
 8c8:	23 ff       	sbrs	r18, 3
 8ca:	81 91       	ld	r24, Z+
 8cc:	2f 01       	movw	r4, r30
 8ce:	88 23       	and	r24, r24
 8d0:	09 f4       	brne	.+2      	; 0x8d4 <vfprintf+0x46>
 8d2:	b2 c1       	rjmp	.+868    	; 0xc38 <vfprintf+0x3aa>
 8d4:	85 32       	cpi	r24, 0x25	; 37
 8d6:	39 f4       	brne	.+14     	; 0x8e6 <vfprintf+0x58>
 8d8:	23 fd       	sbrc	r18, 3
 8da:	85 91       	lpm	r24, Z+
 8dc:	23 ff       	sbrs	r18, 3
 8de:	81 91       	ld	r24, Z+
 8e0:	2f 01       	movw	r4, r30
 8e2:	85 32       	cpi	r24, 0x25	; 37
 8e4:	29 f4       	brne	.+10     	; 0x8f0 <vfprintf+0x62>
 8e6:	90 e0       	ldi	r25, 0x00	; 0
 8e8:	b3 01       	movw	r22, r6
 8ea:	0e 94 3a 06 	call	0xc74	; 0xc74 <fputc>
 8ee:	e7 cf       	rjmp	.-50     	; 0x8be <vfprintf+0x30>
 8f0:	98 2f       	mov	r25, r24
 8f2:	ff 24       	eor	r15, r15
 8f4:	ee 24       	eor	r14, r14
 8f6:	99 24       	eor	r9, r9
 8f8:	ff e1       	ldi	r31, 0x1F	; 31
 8fa:	ff 15       	cp	r31, r15
 8fc:	d0 f0       	brcs	.+52     	; 0x932 <vfprintf+0xa4>
 8fe:	9b 32       	cpi	r25, 0x2B	; 43
 900:	69 f0       	breq	.+26     	; 0x91c <vfprintf+0x8e>
 902:	9c 32       	cpi	r25, 0x2C	; 44
 904:	28 f4       	brcc	.+10     	; 0x910 <vfprintf+0x82>
 906:	90 32       	cpi	r25, 0x20	; 32
 908:	59 f0       	breq	.+22     	; 0x920 <vfprintf+0x92>
 90a:	93 32       	cpi	r25, 0x23	; 35
 90c:	91 f4       	brne	.+36     	; 0x932 <vfprintf+0xa4>
 90e:	0e c0       	rjmp	.+28     	; 0x92c <vfprintf+0x9e>
 910:	9d 32       	cpi	r25, 0x2D	; 45
 912:	49 f0       	breq	.+18     	; 0x926 <vfprintf+0x98>
 914:	90 33       	cpi	r25, 0x30	; 48
 916:	69 f4       	brne	.+26     	; 0x932 <vfprintf+0xa4>
 918:	41 e0       	ldi	r20, 0x01	; 1
 91a:	24 c0       	rjmp	.+72     	; 0x964 <vfprintf+0xd6>
 91c:	52 e0       	ldi	r21, 0x02	; 2
 91e:	f5 2a       	or	r15, r21
 920:	84 e0       	ldi	r24, 0x04	; 4
 922:	f8 2a       	or	r15, r24
 924:	28 c0       	rjmp	.+80     	; 0x976 <vfprintf+0xe8>
 926:	98 e0       	ldi	r25, 0x08	; 8
 928:	f9 2a       	or	r15, r25
 92a:	25 c0       	rjmp	.+74     	; 0x976 <vfprintf+0xe8>
 92c:	e0 e1       	ldi	r30, 0x10	; 16
 92e:	fe 2a       	or	r15, r30
 930:	22 c0       	rjmp	.+68     	; 0x976 <vfprintf+0xe8>
 932:	f7 fc       	sbrc	r15, 7
 934:	29 c0       	rjmp	.+82     	; 0x988 <vfprintf+0xfa>
 936:	89 2f       	mov	r24, r25
 938:	80 53       	subi	r24, 0x30	; 48
 93a:	8a 30       	cpi	r24, 0x0A	; 10
 93c:	70 f4       	brcc	.+28     	; 0x95a <vfprintf+0xcc>
 93e:	f6 fe       	sbrs	r15, 6
 940:	05 c0       	rjmp	.+10     	; 0x94c <vfprintf+0xbe>
 942:	98 9c       	mul	r9, r8
 944:	90 2c       	mov	r9, r0
 946:	11 24       	eor	r1, r1
 948:	98 0e       	add	r9, r24
 94a:	15 c0       	rjmp	.+42     	; 0x976 <vfprintf+0xe8>
 94c:	e8 9c       	mul	r14, r8
 94e:	e0 2c       	mov	r14, r0
 950:	11 24       	eor	r1, r1
 952:	e8 0e       	add	r14, r24
 954:	f0 e2       	ldi	r31, 0x20	; 32
 956:	ff 2a       	or	r15, r31
 958:	0e c0       	rjmp	.+28     	; 0x976 <vfprintf+0xe8>
 95a:	9e 32       	cpi	r25, 0x2E	; 46
 95c:	29 f4       	brne	.+10     	; 0x968 <vfprintf+0xda>
 95e:	f6 fc       	sbrc	r15, 6
 960:	6b c1       	rjmp	.+726    	; 0xc38 <vfprintf+0x3aa>
 962:	40 e4       	ldi	r20, 0x40	; 64
 964:	f4 2a       	or	r15, r20
 966:	07 c0       	rjmp	.+14     	; 0x976 <vfprintf+0xe8>
 968:	9c 36       	cpi	r25, 0x6C	; 108
 96a:	19 f4       	brne	.+6      	; 0x972 <vfprintf+0xe4>
 96c:	50 e8       	ldi	r21, 0x80	; 128
 96e:	f5 2a       	or	r15, r21
 970:	02 c0       	rjmp	.+4      	; 0x976 <vfprintf+0xe8>
 972:	98 36       	cpi	r25, 0x68	; 104
 974:	49 f4       	brne	.+18     	; 0x988 <vfprintf+0xfa>
 976:	f2 01       	movw	r30, r4
 978:	23 fd       	sbrc	r18, 3
 97a:	95 91       	lpm	r25, Z+
 97c:	23 ff       	sbrs	r18, 3
 97e:	91 91       	ld	r25, Z+
 980:	2f 01       	movw	r4, r30
 982:	99 23       	and	r25, r25
 984:	09 f0       	breq	.+2      	; 0x988 <vfprintf+0xfa>
 986:	b8 cf       	rjmp	.-144    	; 0x8f8 <vfprintf+0x6a>
 988:	89 2f       	mov	r24, r25
 98a:	85 54       	subi	r24, 0x45	; 69
 98c:	83 30       	cpi	r24, 0x03	; 3
 98e:	18 f0       	brcs	.+6      	; 0x996 <vfprintf+0x108>
 990:	80 52       	subi	r24, 0x20	; 32
 992:	83 30       	cpi	r24, 0x03	; 3
 994:	38 f4       	brcc	.+14     	; 0x9a4 <vfprintf+0x116>
 996:	44 e0       	ldi	r20, 0x04	; 4
 998:	50 e0       	ldi	r21, 0x00	; 0
 99a:	a4 0e       	add	r10, r20
 99c:	b5 1e       	adc	r11, r21
 99e:	5f e3       	ldi	r21, 0x3F	; 63
 9a0:	59 83       	std	Y+1, r21	; 0x01
 9a2:	0f c0       	rjmp	.+30     	; 0x9c2 <vfprintf+0x134>
 9a4:	93 36       	cpi	r25, 0x63	; 99
 9a6:	31 f0       	breq	.+12     	; 0x9b4 <vfprintf+0x126>
 9a8:	93 37       	cpi	r25, 0x73	; 115
 9aa:	79 f0       	breq	.+30     	; 0x9ca <vfprintf+0x13c>
 9ac:	93 35       	cpi	r25, 0x53	; 83
 9ae:	09 f0       	breq	.+2      	; 0x9b2 <vfprintf+0x124>
 9b0:	56 c0       	rjmp	.+172    	; 0xa5e <vfprintf+0x1d0>
 9b2:	20 c0       	rjmp	.+64     	; 0x9f4 <vfprintf+0x166>
 9b4:	f5 01       	movw	r30, r10
 9b6:	80 81       	ld	r24, Z
 9b8:	89 83       	std	Y+1, r24	; 0x01
 9ba:	42 e0       	ldi	r20, 0x02	; 2
 9bc:	50 e0       	ldi	r21, 0x00	; 0
 9be:	a4 0e       	add	r10, r20
 9c0:	b5 1e       	adc	r11, r21
 9c2:	61 01       	movw	r12, r2
 9c4:	01 e0       	ldi	r16, 0x01	; 1
 9c6:	10 e0       	ldi	r17, 0x00	; 0
 9c8:	12 c0       	rjmp	.+36     	; 0x9ee <vfprintf+0x160>
 9ca:	f5 01       	movw	r30, r10
 9cc:	c0 80       	ld	r12, Z
 9ce:	d1 80       	ldd	r13, Z+1	; 0x01
 9d0:	f6 fc       	sbrc	r15, 6
 9d2:	03 c0       	rjmp	.+6      	; 0x9da <vfprintf+0x14c>
 9d4:	6f ef       	ldi	r22, 0xFF	; 255
 9d6:	7f ef       	ldi	r23, 0xFF	; 255
 9d8:	02 c0       	rjmp	.+4      	; 0x9de <vfprintf+0x150>
 9da:	69 2d       	mov	r22, r9
 9dc:	70 e0       	ldi	r23, 0x00	; 0
 9de:	42 e0       	ldi	r20, 0x02	; 2
 9e0:	50 e0       	ldi	r21, 0x00	; 0
 9e2:	a4 0e       	add	r10, r20
 9e4:	b5 1e       	adc	r11, r21
 9e6:	c6 01       	movw	r24, r12
 9e8:	0e 94 2f 06 	call	0xc5e	; 0xc5e <strnlen>
 9ec:	8c 01       	movw	r16, r24
 9ee:	5f e7       	ldi	r21, 0x7F	; 127
 9f0:	f5 22       	and	r15, r21
 9f2:	14 c0       	rjmp	.+40     	; 0xa1c <vfprintf+0x18e>
 9f4:	f5 01       	movw	r30, r10
 9f6:	c0 80       	ld	r12, Z
 9f8:	d1 80       	ldd	r13, Z+1	; 0x01
 9fa:	f6 fc       	sbrc	r15, 6
 9fc:	03 c0       	rjmp	.+6      	; 0xa04 <vfprintf+0x176>
 9fe:	6f ef       	ldi	r22, 0xFF	; 255
 a00:	7f ef       	ldi	r23, 0xFF	; 255
 a02:	02 c0       	rjmp	.+4      	; 0xa08 <vfprintf+0x17a>
 a04:	69 2d       	mov	r22, r9
 a06:	70 e0       	ldi	r23, 0x00	; 0
 a08:	42 e0       	ldi	r20, 0x02	; 2
 a0a:	50 e0       	ldi	r21, 0x00	; 0
 a0c:	a4 0e       	add	r10, r20
 a0e:	b5 1e       	adc	r11, r21
 a10:	c6 01       	movw	r24, r12
 a12:	0e 94 24 06 	call	0xc48	; 0xc48 <strnlen_P>
 a16:	8c 01       	movw	r16, r24
 a18:	50 e8       	ldi	r21, 0x80	; 128
 a1a:	f5 2a       	or	r15, r21
 a1c:	f3 fe       	sbrs	r15, 3
 a1e:	07 c0       	rjmp	.+14     	; 0xa2e <vfprintf+0x1a0>
 a20:	1a c0       	rjmp	.+52     	; 0xa56 <vfprintf+0x1c8>
 a22:	80 e2       	ldi	r24, 0x20	; 32
 a24:	90 e0       	ldi	r25, 0x00	; 0
 a26:	b3 01       	movw	r22, r6
 a28:	0e 94 3a 06 	call	0xc74	; 0xc74 <fputc>
 a2c:	ea 94       	dec	r14
 a2e:	8e 2d       	mov	r24, r14
 a30:	90 e0       	ldi	r25, 0x00	; 0
 a32:	08 17       	cp	r16, r24
 a34:	19 07       	cpc	r17, r25
 a36:	a8 f3       	brcs	.-22     	; 0xa22 <vfprintf+0x194>
 a38:	0e c0       	rjmp	.+28     	; 0xa56 <vfprintf+0x1c8>
 a3a:	f6 01       	movw	r30, r12
 a3c:	f7 fc       	sbrc	r15, 7
 a3e:	85 91       	lpm	r24, Z+
 a40:	f7 fe       	sbrs	r15, 7
 a42:	81 91       	ld	r24, Z+
 a44:	6f 01       	movw	r12, r30
 a46:	90 e0       	ldi	r25, 0x00	; 0
 a48:	b3 01       	movw	r22, r6
 a4a:	0e 94 3a 06 	call	0xc74	; 0xc74 <fputc>
 a4e:	e1 10       	cpse	r14, r1
 a50:	ea 94       	dec	r14
 a52:	01 50       	subi	r16, 0x01	; 1
 a54:	10 40       	sbci	r17, 0x00	; 0
 a56:	01 15       	cp	r16, r1
 a58:	11 05       	cpc	r17, r1
 a5a:	79 f7       	brne	.-34     	; 0xa3a <vfprintf+0x1ac>
 a5c:	ea c0       	rjmp	.+468    	; 0xc32 <vfprintf+0x3a4>
 a5e:	94 36       	cpi	r25, 0x64	; 100
 a60:	11 f0       	breq	.+4      	; 0xa66 <vfprintf+0x1d8>
 a62:	99 36       	cpi	r25, 0x69	; 105
 a64:	69 f5       	brne	.+90     	; 0xac0 <vfprintf+0x232>
 a66:	f7 fe       	sbrs	r15, 7
 a68:	08 c0       	rjmp	.+16     	; 0xa7a <vfprintf+0x1ec>
 a6a:	f5 01       	movw	r30, r10
 a6c:	20 81       	ld	r18, Z
 a6e:	31 81       	ldd	r19, Z+1	; 0x01
 a70:	42 81       	ldd	r20, Z+2	; 0x02
 a72:	53 81       	ldd	r21, Z+3	; 0x03
 a74:	84 e0       	ldi	r24, 0x04	; 4
 a76:	90 e0       	ldi	r25, 0x00	; 0
 a78:	0a c0       	rjmp	.+20     	; 0xa8e <vfprintf+0x200>
 a7a:	f5 01       	movw	r30, r10
 a7c:	80 81       	ld	r24, Z
 a7e:	91 81       	ldd	r25, Z+1	; 0x01
 a80:	9c 01       	movw	r18, r24
 a82:	44 27       	eor	r20, r20
 a84:	37 fd       	sbrc	r19, 7
 a86:	40 95       	com	r20
 a88:	54 2f       	mov	r21, r20
 a8a:	82 e0       	ldi	r24, 0x02	; 2
 a8c:	90 e0       	ldi	r25, 0x00	; 0
 a8e:	a8 0e       	add	r10, r24
 a90:	b9 1e       	adc	r11, r25
 a92:	9f e6       	ldi	r25, 0x6F	; 111
 a94:	f9 22       	and	r15, r25
 a96:	57 ff       	sbrs	r21, 7
 a98:	09 c0       	rjmp	.+18     	; 0xaac <vfprintf+0x21e>
 a9a:	50 95       	com	r21
 a9c:	40 95       	com	r20
 a9e:	30 95       	com	r19
 aa0:	21 95       	neg	r18
 aa2:	3f 4f       	sbci	r19, 0xFF	; 255
 aa4:	4f 4f       	sbci	r20, 0xFF	; 255
 aa6:	5f 4f       	sbci	r21, 0xFF	; 255
 aa8:	e0 e8       	ldi	r30, 0x80	; 128
 aaa:	fe 2a       	or	r15, r30
 aac:	ca 01       	movw	r24, r20
 aae:	b9 01       	movw	r22, r18
 ab0:	a1 01       	movw	r20, r2
 ab2:	2a e0       	ldi	r18, 0x0A	; 10
 ab4:	30 e0       	ldi	r19, 0x00	; 0
 ab6:	0e 94 66 06 	call	0xccc	; 0xccc <__ultoa_invert>
 aba:	d8 2e       	mov	r13, r24
 abc:	d2 18       	sub	r13, r2
 abe:	40 c0       	rjmp	.+128    	; 0xb40 <vfprintf+0x2b2>
 ac0:	95 37       	cpi	r25, 0x75	; 117
 ac2:	29 f4       	brne	.+10     	; 0xace <vfprintf+0x240>
 ac4:	1f 2d       	mov	r17, r15
 ac6:	1f 7e       	andi	r17, 0xEF	; 239
 ac8:	2a e0       	ldi	r18, 0x0A	; 10
 aca:	30 e0       	ldi	r19, 0x00	; 0
 acc:	1d c0       	rjmp	.+58     	; 0xb08 <vfprintf+0x27a>
 ace:	1f 2d       	mov	r17, r15
 ad0:	19 7f       	andi	r17, 0xF9	; 249
 ad2:	9f 36       	cpi	r25, 0x6F	; 111
 ad4:	61 f0       	breq	.+24     	; 0xaee <vfprintf+0x260>
 ad6:	90 37       	cpi	r25, 0x70	; 112
 ad8:	20 f4       	brcc	.+8      	; 0xae2 <vfprintf+0x254>
 ada:	98 35       	cpi	r25, 0x58	; 88
 adc:	09 f0       	breq	.+2      	; 0xae0 <vfprintf+0x252>
 ade:	ac c0       	rjmp	.+344    	; 0xc38 <vfprintf+0x3aa>
 ae0:	0f c0       	rjmp	.+30     	; 0xb00 <vfprintf+0x272>
 ae2:	90 37       	cpi	r25, 0x70	; 112
 ae4:	39 f0       	breq	.+14     	; 0xaf4 <vfprintf+0x266>
 ae6:	98 37       	cpi	r25, 0x78	; 120
 ae8:	09 f0       	breq	.+2      	; 0xaec <vfprintf+0x25e>
 aea:	a6 c0       	rjmp	.+332    	; 0xc38 <vfprintf+0x3aa>
 aec:	04 c0       	rjmp	.+8      	; 0xaf6 <vfprintf+0x268>
 aee:	28 e0       	ldi	r18, 0x08	; 8
 af0:	30 e0       	ldi	r19, 0x00	; 0
 af2:	0a c0       	rjmp	.+20     	; 0xb08 <vfprintf+0x27a>
 af4:	10 61       	ori	r17, 0x10	; 16
 af6:	14 fd       	sbrc	r17, 4
 af8:	14 60       	ori	r17, 0x04	; 4
 afa:	20 e1       	ldi	r18, 0x10	; 16
 afc:	30 e0       	ldi	r19, 0x00	; 0
 afe:	04 c0       	rjmp	.+8      	; 0xb08 <vfprintf+0x27a>
 b00:	14 fd       	sbrc	r17, 4
 b02:	16 60       	ori	r17, 0x06	; 6
 b04:	20 e1       	ldi	r18, 0x10	; 16
 b06:	32 e0       	ldi	r19, 0x02	; 2
 b08:	17 ff       	sbrs	r17, 7
 b0a:	08 c0       	rjmp	.+16     	; 0xb1c <vfprintf+0x28e>
 b0c:	f5 01       	movw	r30, r10
 b0e:	60 81       	ld	r22, Z
 b10:	71 81       	ldd	r23, Z+1	; 0x01
 b12:	82 81       	ldd	r24, Z+2	; 0x02
 b14:	93 81       	ldd	r25, Z+3	; 0x03
 b16:	44 e0       	ldi	r20, 0x04	; 4
 b18:	50 e0       	ldi	r21, 0x00	; 0
 b1a:	08 c0       	rjmp	.+16     	; 0xb2c <vfprintf+0x29e>
 b1c:	f5 01       	movw	r30, r10
 b1e:	80 81       	ld	r24, Z
 b20:	91 81       	ldd	r25, Z+1	; 0x01
 b22:	bc 01       	movw	r22, r24
 b24:	80 e0       	ldi	r24, 0x00	; 0
 b26:	90 e0       	ldi	r25, 0x00	; 0
 b28:	42 e0       	ldi	r20, 0x02	; 2
 b2a:	50 e0       	ldi	r21, 0x00	; 0
 b2c:	a4 0e       	add	r10, r20
 b2e:	b5 1e       	adc	r11, r21
 b30:	a1 01       	movw	r20, r2
 b32:	0e 94 66 06 	call	0xccc	; 0xccc <__ultoa_invert>
 b36:	d8 2e       	mov	r13, r24
 b38:	d2 18       	sub	r13, r2
 b3a:	8f e7       	ldi	r24, 0x7F	; 127
 b3c:	f8 2e       	mov	r15, r24
 b3e:	f1 22       	and	r15, r17
 b40:	f6 fe       	sbrs	r15, 6
 b42:	0b c0       	rjmp	.+22     	; 0xb5a <vfprintf+0x2cc>
 b44:	5e ef       	ldi	r21, 0xFE	; 254
 b46:	f5 22       	and	r15, r21
 b48:	d9 14       	cp	r13, r9
 b4a:	38 f4       	brcc	.+14     	; 0xb5a <vfprintf+0x2cc>
 b4c:	f4 fe       	sbrs	r15, 4
 b4e:	07 c0       	rjmp	.+14     	; 0xb5e <vfprintf+0x2d0>
 b50:	f2 fc       	sbrc	r15, 2
 b52:	05 c0       	rjmp	.+10     	; 0xb5e <vfprintf+0x2d0>
 b54:	8f ee       	ldi	r24, 0xEF	; 239
 b56:	f8 22       	and	r15, r24
 b58:	02 c0       	rjmp	.+4      	; 0xb5e <vfprintf+0x2d0>
 b5a:	1d 2d       	mov	r17, r13
 b5c:	01 c0       	rjmp	.+2      	; 0xb60 <vfprintf+0x2d2>
 b5e:	19 2d       	mov	r17, r9
 b60:	f4 fe       	sbrs	r15, 4
 b62:	0d c0       	rjmp	.+26     	; 0xb7e <vfprintf+0x2f0>
 b64:	fe 01       	movw	r30, r28
 b66:	ed 0d       	add	r30, r13
 b68:	f1 1d       	adc	r31, r1
 b6a:	80 81       	ld	r24, Z
 b6c:	80 33       	cpi	r24, 0x30	; 48
 b6e:	19 f4       	brne	.+6      	; 0xb76 <vfprintf+0x2e8>
 b70:	99 ee       	ldi	r25, 0xE9	; 233
 b72:	f9 22       	and	r15, r25
 b74:	08 c0       	rjmp	.+16     	; 0xb86 <vfprintf+0x2f8>
 b76:	1f 5f       	subi	r17, 0xFF	; 255
 b78:	f2 fe       	sbrs	r15, 2
 b7a:	05 c0       	rjmp	.+10     	; 0xb86 <vfprintf+0x2f8>
 b7c:	03 c0       	rjmp	.+6      	; 0xb84 <vfprintf+0x2f6>
 b7e:	8f 2d       	mov	r24, r15
 b80:	86 78       	andi	r24, 0x86	; 134
 b82:	09 f0       	breq	.+2      	; 0xb86 <vfprintf+0x2f8>
 b84:	1f 5f       	subi	r17, 0xFF	; 255
 b86:	0f 2d       	mov	r16, r15
 b88:	f3 fc       	sbrc	r15, 3
 b8a:	14 c0       	rjmp	.+40     	; 0xbb4 <vfprintf+0x326>
 b8c:	f0 fe       	sbrs	r15, 0
 b8e:	0f c0       	rjmp	.+30     	; 0xbae <vfprintf+0x320>
 b90:	1e 15       	cp	r17, r14
 b92:	10 f0       	brcs	.+4      	; 0xb98 <vfprintf+0x30a>
 b94:	9d 2c       	mov	r9, r13
 b96:	0b c0       	rjmp	.+22     	; 0xbae <vfprintf+0x320>
 b98:	9d 2c       	mov	r9, r13
 b9a:	9e 0c       	add	r9, r14
 b9c:	91 1a       	sub	r9, r17
 b9e:	1e 2d       	mov	r17, r14
 ba0:	06 c0       	rjmp	.+12     	; 0xbae <vfprintf+0x320>
 ba2:	80 e2       	ldi	r24, 0x20	; 32
 ba4:	90 e0       	ldi	r25, 0x00	; 0
 ba6:	b3 01       	movw	r22, r6
 ba8:	0e 94 3a 06 	call	0xc74	; 0xc74 <fputc>
 bac:	1f 5f       	subi	r17, 0xFF	; 255
 bae:	1e 15       	cp	r17, r14
 bb0:	c0 f3       	brcs	.-16     	; 0xba2 <vfprintf+0x314>
 bb2:	04 c0       	rjmp	.+8      	; 0xbbc <vfprintf+0x32e>
 bb4:	1e 15       	cp	r17, r14
 bb6:	10 f4       	brcc	.+4      	; 0xbbc <vfprintf+0x32e>
 bb8:	e1 1a       	sub	r14, r17
 bba:	01 c0       	rjmp	.+2      	; 0xbbe <vfprintf+0x330>
 bbc:	ee 24       	eor	r14, r14
 bbe:	04 ff       	sbrs	r16, 4
 bc0:	0f c0       	rjmp	.+30     	; 0xbe0 <vfprintf+0x352>
 bc2:	80 e3       	ldi	r24, 0x30	; 48
 bc4:	90 e0       	ldi	r25, 0x00	; 0
 bc6:	b3 01       	movw	r22, r6
 bc8:	0e 94 3a 06 	call	0xc74	; 0xc74 <fputc>
 bcc:	02 ff       	sbrs	r16, 2
 bce:	1d c0       	rjmp	.+58     	; 0xc0a <vfprintf+0x37c>
 bd0:	01 fd       	sbrc	r16, 1
 bd2:	03 c0       	rjmp	.+6      	; 0xbda <vfprintf+0x34c>
 bd4:	88 e7       	ldi	r24, 0x78	; 120
 bd6:	90 e0       	ldi	r25, 0x00	; 0
 bd8:	0e c0       	rjmp	.+28     	; 0xbf6 <vfprintf+0x368>
 bda:	88 e5       	ldi	r24, 0x58	; 88
 bdc:	90 e0       	ldi	r25, 0x00	; 0
 bde:	0b c0       	rjmp	.+22     	; 0xbf6 <vfprintf+0x368>
 be0:	80 2f       	mov	r24, r16
 be2:	86 78       	andi	r24, 0x86	; 134
 be4:	91 f0       	breq	.+36     	; 0xc0a <vfprintf+0x37c>
 be6:	01 ff       	sbrs	r16, 1
 be8:	02 c0       	rjmp	.+4      	; 0xbee <vfprintf+0x360>
 bea:	8b e2       	ldi	r24, 0x2B	; 43
 bec:	01 c0       	rjmp	.+2      	; 0xbf0 <vfprintf+0x362>
 bee:	80 e2       	ldi	r24, 0x20	; 32
 bf0:	f7 fc       	sbrc	r15, 7
 bf2:	8d e2       	ldi	r24, 0x2D	; 45
 bf4:	90 e0       	ldi	r25, 0x00	; 0
 bf6:	b3 01       	movw	r22, r6
 bf8:	0e 94 3a 06 	call	0xc74	; 0xc74 <fputc>
 bfc:	06 c0       	rjmp	.+12     	; 0xc0a <vfprintf+0x37c>
 bfe:	80 e3       	ldi	r24, 0x30	; 48
 c00:	90 e0       	ldi	r25, 0x00	; 0
 c02:	b3 01       	movw	r22, r6
 c04:	0e 94 3a 06 	call	0xc74	; 0xc74 <fputc>
 c08:	9a 94       	dec	r9
 c0a:	d9 14       	cp	r13, r9
 c0c:	c0 f3       	brcs	.-16     	; 0xbfe <vfprintf+0x370>
 c0e:	da 94       	dec	r13
 c10:	f1 01       	movw	r30, r2
 c12:	ed 0d       	add	r30, r13
 c14:	f1 1d       	adc	r31, r1
 c16:	80 81       	ld	r24, Z
 c18:	90 e0       	ldi	r25, 0x00	; 0
 c1a:	b3 01       	movw	r22, r6
 c1c:	0e 94 3a 06 	call	0xc74	; 0xc74 <fputc>
 c20:	dd 20       	and	r13, r13
 c22:	a9 f7       	brne	.-22     	; 0xc0e <vfprintf+0x380>
 c24:	06 c0       	rjmp	.+12     	; 0xc32 <vfprintf+0x3a4>
 c26:	80 e2       	ldi	r24, 0x20	; 32
 c28:	90 e0       	ldi	r25, 0x00	; 0
 c2a:	b3 01       	movw	r22, r6
 c2c:	0e 94 3a 06 	call	0xc74	; 0xc74 <fputc>
 c30:	ea 94       	dec	r14
 c32:	ee 20       	and	r14, r14
 c34:	c1 f7       	brne	.-16     	; 0xc26 <vfprintf+0x398>
 c36:	43 ce       	rjmp	.-890    	; 0x8be <vfprintf+0x30>
 c38:	f3 01       	movw	r30, r6
 c3a:	66 81       	ldd	r22, Z+6	; 0x06
 c3c:	77 81       	ldd	r23, Z+7	; 0x07
 c3e:	cb 01       	movw	r24, r22
 c40:	2b 96       	adiw	r28, 0x0b	; 11
 c42:	e2 e1       	ldi	r30, 0x12	; 18
 c44:	0c 94 e0 06 	jmp	0xdc0	; 0xdc0 <__epilogue_restores__>

00000c48 <strnlen_P>:
 c48:	fc 01       	movw	r30, r24
 c4a:	05 90       	lpm	r0, Z+
 c4c:	61 50       	subi	r22, 0x01	; 1
 c4e:	70 40       	sbci	r23, 0x00	; 0
 c50:	01 10       	cpse	r0, r1
 c52:	d8 f7       	brcc	.-10     	; 0xc4a <strnlen_P+0x2>
 c54:	80 95       	com	r24
 c56:	90 95       	com	r25
 c58:	8e 0f       	add	r24, r30
 c5a:	9f 1f       	adc	r25, r31
 c5c:	08 95       	ret

00000c5e <strnlen>:
 c5e:	fc 01       	movw	r30, r24
 c60:	61 50       	subi	r22, 0x01	; 1
 c62:	70 40       	sbci	r23, 0x00	; 0
 c64:	01 90       	ld	r0, Z+
 c66:	01 10       	cpse	r0, r1
 c68:	d8 f7       	brcc	.-10     	; 0xc60 <strnlen+0x2>
 c6a:	80 95       	com	r24
 c6c:	90 95       	com	r25
 c6e:	8e 0f       	add	r24, r30
 c70:	9f 1f       	adc	r25, r31
 c72:	08 95       	ret

00000c74 <fputc>:
 c74:	0f 93       	push	r16
 c76:	1f 93       	push	r17
 c78:	cf 93       	push	r28
 c7a:	df 93       	push	r29
 c7c:	8c 01       	movw	r16, r24
 c7e:	eb 01       	movw	r28, r22
 c80:	8b 81       	ldd	r24, Y+3	; 0x03
 c82:	81 ff       	sbrs	r24, 1
 c84:	1b c0       	rjmp	.+54     	; 0xcbc <fputc+0x48>
 c86:	82 ff       	sbrs	r24, 2
 c88:	0d c0       	rjmp	.+26     	; 0xca4 <fputc+0x30>
 c8a:	2e 81       	ldd	r18, Y+6	; 0x06
 c8c:	3f 81       	ldd	r19, Y+7	; 0x07
 c8e:	8c 81       	ldd	r24, Y+4	; 0x04
 c90:	9d 81       	ldd	r25, Y+5	; 0x05
 c92:	28 17       	cp	r18, r24
 c94:	39 07       	cpc	r19, r25
 c96:	64 f4       	brge	.+24     	; 0xcb0 <fputc+0x3c>
 c98:	e8 81       	ld	r30, Y
 c9a:	f9 81       	ldd	r31, Y+1	; 0x01
 c9c:	01 93       	st	Z+, r16
 c9e:	f9 83       	std	Y+1, r31	; 0x01
 ca0:	e8 83       	st	Y, r30
 ca2:	06 c0       	rjmp	.+12     	; 0xcb0 <fputc+0x3c>
 ca4:	e8 85       	ldd	r30, Y+8	; 0x08
 ca6:	f9 85       	ldd	r31, Y+9	; 0x09
 ca8:	80 2f       	mov	r24, r16
 caa:	09 95       	icall
 cac:	89 2b       	or	r24, r25
 cae:	31 f4       	brne	.+12     	; 0xcbc <fputc+0x48>
 cb0:	8e 81       	ldd	r24, Y+6	; 0x06
 cb2:	9f 81       	ldd	r25, Y+7	; 0x07
 cb4:	01 96       	adiw	r24, 0x01	; 1
 cb6:	9f 83       	std	Y+7, r25	; 0x07
 cb8:	8e 83       	std	Y+6, r24	; 0x06
 cba:	02 c0       	rjmp	.+4      	; 0xcc0 <fputc+0x4c>
 cbc:	0f ef       	ldi	r16, 0xFF	; 255
 cbe:	1f ef       	ldi	r17, 0xFF	; 255
 cc0:	c8 01       	movw	r24, r16
 cc2:	df 91       	pop	r29
 cc4:	cf 91       	pop	r28
 cc6:	1f 91       	pop	r17
 cc8:	0f 91       	pop	r16
 cca:	08 95       	ret

00000ccc <__ultoa_invert>:
 ccc:	fa 01       	movw	r30, r20
 cce:	aa 27       	eor	r26, r26
 cd0:	28 30       	cpi	r18, 0x08	; 8
 cd2:	51 f1       	breq	.+84     	; 0xd28 <__ultoa_invert+0x5c>
 cd4:	20 31       	cpi	r18, 0x10	; 16
 cd6:	81 f1       	breq	.+96     	; 0xd38 <__ultoa_invert+0x6c>
 cd8:	e8 94       	clt
 cda:	6f 93       	push	r22
 cdc:	6e 7f       	andi	r22, 0xFE	; 254
 cde:	6e 5f       	subi	r22, 0xFE	; 254
 ce0:	7f 4f       	sbci	r23, 0xFF	; 255
 ce2:	8f 4f       	sbci	r24, 0xFF	; 255
 ce4:	9f 4f       	sbci	r25, 0xFF	; 255
 ce6:	af 4f       	sbci	r26, 0xFF	; 255
 ce8:	b1 e0       	ldi	r27, 0x01	; 1
 cea:	3e d0       	rcall	.+124    	; 0xd68 <__ultoa_invert+0x9c>
 cec:	b4 e0       	ldi	r27, 0x04	; 4
 cee:	3c d0       	rcall	.+120    	; 0xd68 <__ultoa_invert+0x9c>
 cf0:	67 0f       	add	r22, r23
 cf2:	78 1f       	adc	r23, r24
 cf4:	89 1f       	adc	r24, r25
 cf6:	9a 1f       	adc	r25, r26
 cf8:	a1 1d       	adc	r26, r1
 cfa:	68 0f       	add	r22, r24
 cfc:	79 1f       	adc	r23, r25
 cfe:	8a 1f       	adc	r24, r26
 d00:	91 1d       	adc	r25, r1
 d02:	a1 1d       	adc	r26, r1
 d04:	6a 0f       	add	r22, r26
 d06:	71 1d       	adc	r23, r1
 d08:	81 1d       	adc	r24, r1
 d0a:	91 1d       	adc	r25, r1
 d0c:	a1 1d       	adc	r26, r1
 d0e:	20 d0       	rcall	.+64     	; 0xd50 <__ultoa_invert+0x84>
 d10:	09 f4       	brne	.+2      	; 0xd14 <__ultoa_invert+0x48>
 d12:	68 94       	set
 d14:	3f 91       	pop	r19
 d16:	2a e0       	ldi	r18, 0x0A	; 10
 d18:	26 9f       	mul	r18, r22
 d1a:	11 24       	eor	r1, r1
 d1c:	30 19       	sub	r19, r0
 d1e:	30 5d       	subi	r19, 0xD0	; 208
 d20:	31 93       	st	Z+, r19
 d22:	de f6       	brtc	.-74     	; 0xcda <__ultoa_invert+0xe>
 d24:	cf 01       	movw	r24, r30
 d26:	08 95       	ret
 d28:	46 2f       	mov	r20, r22
 d2a:	47 70       	andi	r20, 0x07	; 7
 d2c:	40 5d       	subi	r20, 0xD0	; 208
 d2e:	41 93       	st	Z+, r20
 d30:	b3 e0       	ldi	r27, 0x03	; 3
 d32:	0f d0       	rcall	.+30     	; 0xd52 <__ultoa_invert+0x86>
 d34:	c9 f7       	brne	.-14     	; 0xd28 <__ultoa_invert+0x5c>
 d36:	f6 cf       	rjmp	.-20     	; 0xd24 <__ultoa_invert+0x58>
 d38:	46 2f       	mov	r20, r22
 d3a:	4f 70       	andi	r20, 0x0F	; 15
 d3c:	40 5d       	subi	r20, 0xD0	; 208
 d3e:	4a 33       	cpi	r20, 0x3A	; 58
 d40:	18 f0       	brcs	.+6      	; 0xd48 <__ultoa_invert+0x7c>
 d42:	49 5d       	subi	r20, 0xD9	; 217
 d44:	31 fd       	sbrc	r19, 1
 d46:	40 52       	subi	r20, 0x20	; 32
 d48:	41 93       	st	Z+, r20
 d4a:	02 d0       	rcall	.+4      	; 0xd50 <__ultoa_invert+0x84>
 d4c:	a9 f7       	brne	.-22     	; 0xd38 <__ultoa_invert+0x6c>
 d4e:	ea cf       	rjmp	.-44     	; 0xd24 <__ultoa_invert+0x58>
 d50:	b4 e0       	ldi	r27, 0x04	; 4
 d52:	a6 95       	lsr	r26
 d54:	97 95       	ror	r25
 d56:	87 95       	ror	r24
 d58:	77 95       	ror	r23
 d5a:	67 95       	ror	r22
 d5c:	ba 95       	dec	r27
 d5e:	c9 f7       	brne	.-14     	; 0xd52 <__ultoa_invert+0x86>
 d60:	00 97       	sbiw	r24, 0x00	; 0
 d62:	61 05       	cpc	r22, r1
 d64:	71 05       	cpc	r23, r1
 d66:	08 95       	ret
 d68:	9b 01       	movw	r18, r22
 d6a:	ac 01       	movw	r20, r24
 d6c:	0a 2e       	mov	r0, r26
 d6e:	06 94       	lsr	r0
 d70:	57 95       	ror	r21
 d72:	47 95       	ror	r20
 d74:	37 95       	ror	r19
 d76:	27 95       	ror	r18
 d78:	ba 95       	dec	r27
 d7a:	c9 f7       	brne	.-14     	; 0xd6e <__ultoa_invert+0xa2>
 d7c:	62 0f       	add	r22, r18
 d7e:	73 1f       	adc	r23, r19
 d80:	84 1f       	adc	r24, r20
 d82:	95 1f       	adc	r25, r21
 d84:	a0 1d       	adc	r26, r0
 d86:	08 95       	ret

00000d88 <__prologue_saves__>:
 d88:	2f 92       	push	r2
 d8a:	3f 92       	push	r3
 d8c:	4f 92       	push	r4
 d8e:	5f 92       	push	r5
 d90:	6f 92       	push	r6
 d92:	7f 92       	push	r7
 d94:	8f 92       	push	r8
 d96:	9f 92       	push	r9
 d98:	af 92       	push	r10
 d9a:	bf 92       	push	r11
 d9c:	cf 92       	push	r12
 d9e:	df 92       	push	r13
 da0:	ef 92       	push	r14
 da2:	ff 92       	push	r15
 da4:	0f 93       	push	r16
 da6:	1f 93       	push	r17
 da8:	cf 93       	push	r28
 daa:	df 93       	push	r29
 dac:	cd b7       	in	r28, 0x3d	; 61
 dae:	de b7       	in	r29, 0x3e	; 62
 db0:	ca 1b       	sub	r28, r26
 db2:	db 0b       	sbc	r29, r27
 db4:	0f b6       	in	r0, 0x3f	; 63
 db6:	f8 94       	cli
 db8:	de bf       	out	0x3e, r29	; 62
 dba:	0f be       	out	0x3f, r0	; 63
 dbc:	cd bf       	out	0x3d, r28	; 61
 dbe:	09 94       	ijmp

00000dc0 <__epilogue_restores__>:
 dc0:	2a 88       	ldd	r2, Y+18	; 0x12
 dc2:	39 88       	ldd	r3, Y+17	; 0x11
 dc4:	48 88       	ldd	r4, Y+16	; 0x10
 dc6:	5f 84       	ldd	r5, Y+15	; 0x0f
 dc8:	6e 84       	ldd	r6, Y+14	; 0x0e
 dca:	7d 84       	ldd	r7, Y+13	; 0x0d
 dcc:	8c 84       	ldd	r8, Y+12	; 0x0c
 dce:	9b 84       	ldd	r9, Y+11	; 0x0b
 dd0:	aa 84       	ldd	r10, Y+10	; 0x0a
 dd2:	b9 84       	ldd	r11, Y+9	; 0x09
 dd4:	c8 84       	ldd	r12, Y+8	; 0x08
 dd6:	df 80       	ldd	r13, Y+7	; 0x07
 dd8:	ee 80       	ldd	r14, Y+6	; 0x06
 dda:	fd 80       	ldd	r15, Y+5	; 0x05
 ddc:	0c 81       	ldd	r16, Y+4	; 0x04
 dde:	1b 81       	ldd	r17, Y+3	; 0x03
 de0:	aa 81       	ldd	r26, Y+2	; 0x02
 de2:	b9 81       	ldd	r27, Y+1	; 0x01
 de4:	ce 0f       	add	r28, r30
 de6:	d1 1d       	adc	r29, r1
 de8:	0f b6       	in	r0, 0x3f	; 63
 dea:	f8 94       	cli
 dec:	de bf       	out	0x3e, r29	; 62
 dee:	0f be       	out	0x3f, r0	; 63
 df0:	cd bf       	out	0x3d, r28	; 61
 df2:	ed 01       	movw	r28, r26
 df4:	08 95       	ret

00000df6 <_exit>:
 df6:	f8 94       	cli

00000df8 <__stop_program>:
 df8:	ff cf       	rjmp	.-2      	; 0xdf8 <__stop_program>
