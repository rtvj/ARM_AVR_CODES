
SPISLAVE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000196  0000020a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000196  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00000750  00000000  00000000  0000021c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000054  00000000  00000000  0000096c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  000009c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000097  00000000  00000000  000009e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000026e  00000000  00000000  00000a77  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000012a  00000000  00000000  00000ce5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000204  00000000  00000000  00000e0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000090  00000000  00000000  00001014  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000f9  00000000  00000000  000010a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000005e  00000000  00000000  0000119d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  000011fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e9       	ldi	r30, 0x96	; 150
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 31       	cpi	r26, 0x10	; 16
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a0 e1       	ldi	r26, 0x10	; 16
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 31       	cpi	r26, 0x10	; 16
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 a3 00 	call	0x146	; 0x146 <main>
  c6:	0c 94 c9 00 	jmp	0x192	; 0x192 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <SPI_SlaveInit>:
	char SPI_SlaveReceive(void);

	void SPI_SlaveInit(void)
	{
	  // Set MISO output, all others input
	  DDR_SPI = (1<<DD_MISO);
  ce:	88 e0       	ldi	r24, 0x08	; 8
  d0:	87 bb       	out	0x17, r24	; 23
	  //Enable SPI
	  SPCR = (1<<SPE);
  d2:	80 e4       	ldi	r24, 0x40	; 64
  d4:	8d b9       	out	0x0d, r24	; 13
	}
  d6:	08 95       	ret

000000d8 <SPI_SlaveReceive>:

	char SPI_SlaveReceive(void)
	{
	  // Wait for reception complete
	  while(!(SPSR & (1<<SPIF)))
  d8:	77 9b       	sbis	0x0e, 7	; 14
  da:	fe cf       	rjmp	.-4      	; 0xd8 <SPI_SlaveReceive>
		;
	  // Return data register
	  return SPDR;
  dc:	8f b1       	in	r24, 0x0f	; 15
	}
  de:	08 95       	ret

000000e0 <Serial_Init>:
		USART_Init ( MYUBRR );	/* SET THE BAUD RATE, ENABLE THE TRANSMISSION AND RECEPTION OF SERIAL, SET THE FRAME FORMAT */
	}

	void USART_Init( unsigned int ubrr )
	{
	  UBRR1H = (unsigned char)(ubrr>>8); /* Set baud rate */
  e0:	10 92 98 00 	sts	0x0098, r1
	  UBRR1L = (unsigned char)ubrr;
  e4:	87 e6       	ldi	r24, 0x67	; 103
  e6:	80 93 99 00 	sts	0x0099, r24

	  UCSR1B = (1<<RXEN)|(1<<TXEN);	/* Enable receiver and transmitter */
  ea:	88 e1       	ldi	r24, 0x18	; 24
  ec:	80 93 9a 00 	sts	0x009A, r24

	  UCSR1C = (1<<USBS)|(3<<UCSZ0);/* Set frame format: 8data, 2stop bit */
  f0:	8e e0       	ldi	r24, 0x0E	; 14
  f2:	80 93 9d 00 	sts	0x009D, r24


	void Serial_Init(void)
	{
		USART_Init ( MYUBRR );	/* SET THE BAUD RATE, ENABLE THE TRANSMISSION AND RECEPTION OF SERIAL, SET THE FRAME FORMAT */
	}
  f6:	08 95       	ret

000000f8 <USART_Init>:

	void USART_Init( unsigned int ubrr )
	{
	  UBRR1H = (unsigned char)(ubrr>>8); /* Set baud rate */
  f8:	90 93 98 00 	sts	0x0098, r25
	  UBRR1L = (unsigned char)ubrr;
  fc:	80 93 99 00 	sts	0x0099, r24

	  UCSR1B = (1<<RXEN)|(1<<TXEN);	/* Enable receiver and transmitter */
 100:	88 e1       	ldi	r24, 0x18	; 24
 102:	80 93 9a 00 	sts	0x009A, r24

	  UCSR1C = (1<<USBS)|(3<<UCSZ0);/* Set frame format: 8data, 2stop bit */
 106:	8e e0       	ldi	r24, 0x0E	; 14
 108:	80 93 9d 00 	sts	0x009D, r24
	}
 10c:	08 95       	ret

0000010e <USART_Receive>:

	unsigned char USART_Receive( void )
	{
	  while (!(UCSR1A & (1<<RXC))); /* Wait for data to be received */
 10e:	80 91 9b 00 	lds	r24, 0x009B
 112:	87 ff       	sbrs	r24, 7
 114:	fc cf       	rjmp	.-8      	; 0x10e <USART_Receive>

	  return UDR1;	/* Get and return received data from buffer */
 116:	80 91 9c 00 	lds	r24, 0x009C
	}
 11a:	08 95       	ret

0000011c <USART_Transmit>:

	void USART_Transmit( unsigned char data )
	{
 11c:	98 2f       	mov	r25, r24
	  while (!(UCSR1A & (1<<UDRE)));	/* Wait for empty transmit buffer */
 11e:	80 91 9b 00 	lds	r24, 0x009B
 122:	85 ff       	sbrs	r24, 5
 124:	fc cf       	rjmp	.-8      	; 0x11e <USART_Transmit+0x2>

	  UDR1 = data;	/* Put data into buffer, sends the data */
 126:	90 93 9c 00 	sts	0x009C, r25
	}
 12a:	08 95       	ret

0000012c <print_string>:

	void print_string(unsigned char *Mystr_ptr)
	{
 12c:	fc 01       	movw	r30, r24
 12e:	07 c0       	rjmp	.+14     	; 0x13e <print_string+0x12>
	  return UDR1;	/* Get and return received data from buffer */
	}

	void USART_Transmit( unsigned char data )
	{
	  while (!(UCSR1A & (1<<UDRE)));	/* Wait for empty transmit buffer */
 130:	80 91 9b 00 	lds	r24, 0x009B
 134:	85 ff       	sbrs	r24, 5
 136:	fc cf       	rjmp	.-8      	; 0x130 <print_string+0x4>
	}

	void print_string(unsigned char *Mystr_ptr)
	{
		while((*Mystr_ptr) != '\0')	/* print char from str pointer and point to next location */
				USART_Transmit((*Mystr_ptr++));
 138:	31 96       	adiw	r30, 0x01	; 1

	void USART_Transmit( unsigned char data )
	{
	  while (!(UCSR1A & (1<<UDRE)));	/* Wait for empty transmit buffer */

	  UDR1 = data;	/* Put data into buffer, sends the data */
 13a:	90 93 9c 00 	sts	0x009C, r25
	}

	void print_string(unsigned char *Mystr_ptr)
	{
		while((*Mystr_ptr) != '\0')	/* print char from str pointer and point to next location */
 13e:	90 81       	ld	r25, Z
 140:	99 23       	and	r25, r25
 142:	b1 f7       	brne	.-20     	; 0x130 <print_string+0x4>
				USART_Transmit((*Mystr_ptr++));
	}
 144:	08 95       	ret

00000146 <main>:
		USART_Init ( MYUBRR );	/* SET THE BAUD RATE, ENABLE THE TRANSMISSION AND RECEPTION OF SERIAL, SET THE FRAME FORMAT */
	}

	void USART_Init( unsigned int ubrr )
	{
	  UBRR1H = (unsigned char)(ubrr>>8); /* Set baud rate */
 146:	10 92 98 00 	sts	0x0098, r1
	  UBRR1L = (unsigned char)ubrr;
 14a:	87 e6       	ldi	r24, 0x67	; 103
 14c:	80 93 99 00 	sts	0x0099, r24

	  UCSR1B = (1<<RXEN)|(1<<TXEN);	/* Enable receiver and transmitter */
 150:	88 e1       	ldi	r24, 0x18	; 24
 152:	80 93 9a 00 	sts	0x009A, r24

	  UCSR1C = (1<<USBS)|(3<<UCSZ0);/* Set frame format: 8data, 2stop bit */
 156:	8e e0       	ldi	r24, 0x0E	; 14
 158:	80 93 9d 00 	sts	0x009D, r24
	char SPI_SlaveReceive(void);

	void SPI_SlaveInit(void)
	{
	  // Set MISO output, all others input
	  DDR_SPI = (1<<DD_MISO);
 15c:	88 e0       	ldi	r24, 0x08	; 8
 15e:	87 bb       	out	0x17, r24	; 23
	  //Enable SPI
	  SPCR = (1<<SPE);
 160:	80 e4       	ldi	r24, 0x40	; 64
 162:	8d b9       	out	0x0d, r24	; 13
 164:	e0 e0       	ldi	r30, 0x00	; 0
 166:	f1 e0       	ldi	r31, 0x01	; 1
 168:	07 c0       	rjmp	.+14     	; 0x178 <main+0x32>
	  return UDR1;	/* Get and return received data from buffer */
	}

	void USART_Transmit( unsigned char data )
	{
	  while (!(UCSR1A & (1<<UDRE)));	/* Wait for empty transmit buffer */
 16a:	80 91 9b 00 	lds	r24, 0x009B
 16e:	85 ff       	sbrs	r24, 5
 170:	fc cf       	rjmp	.-8      	; 0x16a <main+0x24>
	}

	void print_string(unsigned char *Mystr_ptr)
	{
		while((*Mystr_ptr) != '\0')	/* print char from str pointer and point to next location */
				USART_Transmit((*Mystr_ptr++));
 172:	31 96       	adiw	r30, 0x01	; 1

	void USART_Transmit( unsigned char data )
	{
	  while (!(UCSR1A & (1<<UDRE)));	/* Wait for empty transmit buffer */

	  UDR1 = data;	/* Put data into buffer, sends the data */
 174:	90 93 9c 00 	sts	0x009C, r25
	}

	void print_string(unsigned char *Mystr_ptr)
	{
		while((*Mystr_ptr) != '\0')	/* print char from str pointer and point to next location */
 178:	90 81       	ld	r25, Z
 17a:	99 23       	and	r25, r25
 17c:	b1 f7       	brne	.-20     	; 0x16a <main+0x24>
	}

	char SPI_SlaveReceive(void)
	{
	  // Wait for reception complete
	  while(!(SPSR & (1<<SPIF)))
 17e:	77 9b       	sbis	0x0e, 7	; 14
 180:	fe cf       	rjmp	.-4      	; 0x17e <main+0x38>
		;
	  // Return data register
	  return SPDR;
 182:	9f b1       	in	r25, 0x0f	; 15
	  return UDR1;	/* Get and return received data from buffer */
	}

	void USART_Transmit( unsigned char data )
	{
	  while (!(UCSR1A & (1<<UDRE)));	/* Wait for empty transmit buffer */
 184:	80 91 9b 00 	lds	r24, 0x009B
 188:	85 ff       	sbrs	r24, 5
 18a:	fc cf       	rjmp	.-8      	; 0x184 <main+0x3e>

	  UDR1 = data;	/* Put data into buffer, sends the data */
 18c:	90 93 9c 00 	sts	0x009C, r25
 190:	f6 cf       	rjmp	.-20     	; 0x17e <main+0x38>

00000192 <_exit>:
 192:	f8 94       	cli

00000194 <__stop_program>:
 194:	ff cf       	rjmp	.-2      	; 0x194 <__stop_program>
