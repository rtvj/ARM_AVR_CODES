
uart_isr_udrie.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000134  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000049  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000193  00000000  00000000  000001f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000ee  00000000  00000000  00000384  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001f5  00000000  00000000  00000472  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000050  00000000  00000000  00000668  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000ec  00000000  00000000  000006b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000080  00000000  00000000  000007a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  00000824  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  7c:	0c 94 6f 00 	jmp	0xde	; 0xde <__vector_31>
  80:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  84:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  88:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	0e 94 7e 00 	call	0xfc	; 0xfc <main>
  9c:	0c 94 98 00 	jmp	0x130	; 0x130 <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <uart1_init>:
#include<avr/io.h>

void uart1_init(void) // Initialisation function for uart1
{
	UBRR1H = 0;
  a4:	10 92 98 00 	sts	0x0098, r1
	UBRR1L = 103; //0X67; BAUDRATE = 9600
  a8:	87 e6       	ldi	r24, 0x67	; 103
  aa:	80 93 99 00 	sts	0x0099, r24

	UCSR1C |= (1<<UCSZ1) | (1<<UCSZ0);// frame : 8 bit data , no parity ,1 stop bit
  ae:	ed e9       	ldi	r30, 0x9D	; 157
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	86 60       	ori	r24, 0x06	; 6
  b6:	80 83       	st	Z, r24

	//UCSR1B |= (1<<RXEN) | (1<<TXEN) | (1<<RXCIE);// ENABLE RECIEVE INTRRRUPT (while using RXC flag)
	                                               // ENABLE TRANSMITTER & RECEIVE
	UCSR1B |=(1<<RXEN)|(1<<TXEN) |(1<<UDRIE) ;    //while using UDRE flag
  b8:	ea e9       	ldi	r30, 0x9A	; 154
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	88 63       	ori	r24, 0x38	; 56
  c0:	80 83       	st	Z, r24
	
	//UCSR1B|=(1<<RXEN)|(1<<TXEN)|(1<<TXCIE);         //while using TXC flag

}
  c2:	08 95       	ret

000000c4 <uart0_init>:

void uart0_init(void) // Initialisation function for uart0
{
	UBRR0H = 0;
  c4:	10 92 90 00 	sts	0x0090, r1
	UBRR0L = 103; //0X67; BAUDRATE = 9600
  c8:	87 e6       	ldi	r24, 0x67	; 103
  ca:	89 b9       	out	0x09, r24	; 9
	
	UCSR0C |= (1<<UCSZ1) | (1<<UCSZ0);//frame:8 bit data,no parity, 1 stop bit
  cc:	e5 e9       	ldi	r30, 0x95	; 149
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	86 60       	ori	r24, 0x06	; 6
  d4:	80 83       	st	Z, r24

	UCSR0B |= (1<<RXEN) | (1<<TXEN) | (1<<RXCIE);// ENABLE RECIEVE INTRRRUPT, TRANSMITTER & RECEIVER.
  d6:	8a b1       	in	r24, 0x0a	; 10
  d8:	88 69       	ori	r24, 0x98	; 152
  da:	8a b9       	out	0x0a, r24	; 10
}
  dc:	08 95       	ret

000000de <__vector_31>:

A Data Register Empty interrupt will be generated only if the UDRIE bit is written to one, 
Global Interrupt Flag is written to one and the UDRE bit in UCSRnA is set */

ISR(USART1_UDRE_vect) //ISR while using UDRE flag
{
  de:	1f 92       	push	r1
  e0:	0f 92       	push	r0
  e2:	0f b6       	in	r0, 0x3f	; 63
  e4:	0f 92       	push	r0
  e6:	11 24       	eor	r1, r1
  e8:	8f 93       	push	r24
      UDR1='Z';             
  ea:	8a e5       	ldi	r24, 0x5A	; 90
  ec:	80 93 9c 00 	sts	0x009C, r24
      //_delay_ms(500);
}
  f0:	8f 91       	pop	r24
  f2:	0f 90       	pop	r0
  f4:	0f be       	out	0x3f, r0	; 63
  f6:	0f 90       	pop	r0
  f8:	1f 90       	pop	r1
  fa:	18 95       	reti

000000fc <main>:



int main(void)
{
    sei();
  fc:	78 94       	sei
	uart1_init();
  fe:	0e 94 52 00 	call	0xa4	; 0xa4 <uart1_init>
    //uart0_init();
	  
	DDRC = 0XFF;// PORTC AS O/P PORT
 102:	8f ef       	ldi	r24, 0xFF	; 255
 104:	84 bb       	out	0x14, r24	; 20
	PORTC = 0xff;// all leds are off
 106:	85 bb       	out	0x15, r24	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 108:	20 e9       	ldi	r18, 0x90	; 144
 10a:	31 e0       	ldi	r19, 0x01	; 1
	while(1)
	{
	PORTC = 0x00; // all leds are on
	_delay_ms(500);
	
	PORTC = 0xff;// all leds are off
 10c:	4f ef       	ldi	r20, 0xFF	; 255
	DDRC = 0XFF;// PORTC AS O/P PORT
	PORTC = 0xff;// all leds are off
	
	while(1)
	{
	PORTC = 0x00; // all leds are on
 10e:	15 ba       	out	0x15, r1	; 21
 110:	88 e8       	ldi	r24, 0x88	; 136
 112:	93 e1       	ldi	r25, 0x13	; 19
 114:	f9 01       	movw	r30, r18
 116:	31 97       	sbiw	r30, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <main+0x1a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 11a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 11c:	d9 f7       	brne	.-10     	; 0x114 <main+0x18>
	_delay_ms(500);
	
	PORTC = 0xff;// all leds are off
 11e:	45 bb       	out	0x15, r20	; 21
 120:	88 e8       	ldi	r24, 0x88	; 136
 122:	93 e1       	ldi	r25, 0x13	; 19
 124:	f9 01       	movw	r30, r18
 126:	31 97       	sbiw	r30, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <main+0x2a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 12a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 12c:	d9 f7       	brne	.-10     	; 0x124 <main+0x28>
 12e:	ef cf       	rjmp	.-34     	; 0x10e <main+0x12>

00000130 <_exit>:
 130:	f8 94       	cli

00000132 <__stop_program>:
 132:	ff cf       	rjmp	.-2      	; 0x132 <__stop_program>
