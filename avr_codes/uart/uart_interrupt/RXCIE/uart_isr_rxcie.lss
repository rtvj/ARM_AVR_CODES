
uart_isr_rxcie.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000013e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000192  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000049  00000000  00000000  000001b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000193  00000000  00000000  000001fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000ee  00000000  00000000  0000038e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001f5  00000000  00000000  0000047c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000050  00000000  00000000  00000674  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000ec  00000000  00000000  000006c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000080  00000000  00000000  000007b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  00000830  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 6f 00 	jmp	0xde	; 0xde <__vector_30>
  7c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  80:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  84:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  88:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	0e 94 83 00 	call	0x106	; 0x106 <main>
  9c:	0c 94 9d 00 	jmp	0x13a	; 0x13a <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <uart1_init>:
#include<avr/io.h>

void uart1_init(void) // Initialisation function for uart1
{
	UBRR1H = 0;
  a4:	10 92 98 00 	sts	0x0098, r1
	UBRR1L = 103; //0X67; BAUDRATE = 9600
  a8:	87 e6       	ldi	r24, 0x67	; 103
  aa:	80 93 99 00 	sts	0x0099, r24

	UCSR1C |= (1<<UCSZ1) | (1<<UCSZ0);// frame : 8 bit data , no parity ,1 stop bit
  ae:	ed e9       	ldi	r30, 0x9D	; 157
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	86 60       	ori	r24, 0x06	; 6
  b6:	80 83       	st	Z, r24

	UCSR1B |= (1<<RXEN) | (1<<TXEN) | (1<<RXCIE);// ENABLE RECIEVE INTRRRUPT (while using RXC flag)
  b8:	ea e9       	ldi	r30, 0x9A	; 154
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	88 69       	ori	r24, 0x98	; 152
  c0:	80 83       	st	Z, r24
	                                               // ENABLE TRANSMITTER & RECEIVE
	//UCSR1B |=(1<<RXEN)|(1<<TXEN) |(1<<UDRIE) ;    //while using UDRE flag
	
	//UCSR1B|=(1<<RXEN)|(1<<TXEN)|(1<<TXCIE);         //while using TXC flag

}
  c2:	08 95       	ret

000000c4 <uart0_init>:

void uart0_init(void) // Initialisation function for uart0
{
	UBRR0H = 0;
  c4:	10 92 90 00 	sts	0x0090, r1
	UBRR0L = 103; //0X67; BAUDRATE = 9600
  c8:	87 e6       	ldi	r24, 0x67	; 103
  ca:	89 b9       	out	0x09, r24	; 9
	
	UCSR0C |= (1<<UCSZ1) | (1<<UCSZ0);//frame:8 bit data,no parity, 1 stop bit
  cc:	e5 e9       	ldi	r30, 0x95	; 149
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	86 60       	ori	r24, 0x06	; 6
  d4:	80 83       	st	Z, r24

	UCSR0B |= (1<<RXEN) | (1<<TXEN) | (1<<RXCIE);// ENABLE RECIEVE INTRRRUPT, TRANSMITTER & RECEIVER.
  d6:	8a b1       	in	r24, 0x0a	; 10
  d8:	88 69       	ori	r24, 0x98	; 152
  da:	8a b9       	out	0x0a, r24	; 10
}
  dc:	08 95       	ret

000000de <__vector_30>:

A USART Receive Complete interrupt will be generated only if the RXCIE bit is written to one,
Global Interrupt Flag in SREG is written to one and the RXCn bit in UCSRnA is set. */

ISR(USART1_RX_vect) //ISR while using RXC flag  
{
  de:	1f 92       	push	r1
  e0:	0f 92       	push	r0
  e2:	0f b6       	in	r0, 0x3f	; 63
  e4:	0f 92       	push	r0
  e6:	11 24       	eor	r1, r1
  e8:	8f 93       	push	r24
  ea:	ef 93       	push	r30
  ec:	ff 93       	push	r31
      //unsigned char ch;
      UDR1=UDR1;//  directluy instead of using 2 statement ch=UDR1;UDR1=ch;
  ee:	ec e9       	ldi	r30, 0x9C	; 156
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	80 83       	st	Z, r24
      
	  /*ch=UDR1;
      UDR1=ch;  */ 
}            
  f6:	ff 91       	pop	r31
  f8:	ef 91       	pop	r30
  fa:	8f 91       	pop	r24
  fc:	0f 90       	pop	r0
  fe:	0f be       	out	0x3f, r0	; 63
 100:	0f 90       	pop	r0
 102:	1f 90       	pop	r1
 104:	18 95       	reti

00000106 <main>:

int main(void)
{
    sei();
 106:	78 94       	sei
	uart1_init();
 108:	0e 94 52 00 	call	0xa4	; 0xa4 <uart1_init>
    //uart0_init();
	  
	DDRC = 0XFF;// PORTC AS O/P PORT
 10c:	8f ef       	ldi	r24, 0xFF	; 255
 10e:	84 bb       	out	0x14, r24	; 20
	PORTC = 0xff;// all leds are off
 110:	85 bb       	out	0x15, r24	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 112:	20 e9       	ldi	r18, 0x90	; 144
 114:	31 e0       	ldi	r19, 0x01	; 1
	while(1)
	{
	PORTC = 0x00; // all leds are on
	_delay_ms(500);
	
	PORTC = 0xff;// all leds are off
 116:	4f ef       	ldi	r20, 0xFF	; 255
	DDRC = 0XFF;// PORTC AS O/P PORT
	PORTC = 0xff;// all leds are off
	
	while(1)
	{
	PORTC = 0x00; // all leds are on
 118:	15 ba       	out	0x15, r1	; 21
 11a:	88 e8       	ldi	r24, 0x88	; 136
 11c:	93 e1       	ldi	r25, 0x13	; 19
 11e:	f9 01       	movw	r30, r18
 120:	31 97       	sbiw	r30, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <main+0x1a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 124:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 126:	d9 f7       	brne	.-10     	; 0x11e <main+0x18>
	_delay_ms(500);
	
	PORTC = 0xff;// all leds are off
 128:	45 bb       	out	0x15, r20	; 21
 12a:	88 e8       	ldi	r24, 0x88	; 136
 12c:	93 e1       	ldi	r25, 0x13	; 19
 12e:	f9 01       	movw	r30, r18
 130:	31 97       	sbiw	r30, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <main+0x2a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 134:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 136:	d9 f7       	brne	.-10     	; 0x12e <main+0x28>
 138:	ef cf       	rjmp	.-34     	; 0x118 <main+0x12>

0000013a <_exit>:
 13a:	f8 94       	cli

0000013c <__stop_program>:
 13c:	ff cf       	rjmp	.-2      	; 0x13c <__stop_program>
