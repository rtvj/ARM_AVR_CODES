
chat.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000160  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000059  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001ce  00000000  00000000  0000022d  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000123  00000000  00000000  000003fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000021b  00000000  00000000  0000051e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000060  00000000  00000000  0000073c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000f2  00000000  00000000  0000079c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000a6  00000000  00000000  0000088e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  00000934  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 84 00 	jmp	0x108	; 0x108 <__vector_18>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 6f 00 	jmp	0xde	; 0xde <__vector_30>
  7c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  80:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  84:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  88:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	0e 94 93 00 	call	0x126	; 0x126 <main>
  9c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <uart1_init>:
#include<avr/io.h>

void uart1_init(void) // Initialisation function for uart1
{
	UBRR1H = 0;
  a4:	10 92 98 00 	sts	0x0098, r1
	UBRR1L = 103; //0X67; BAUDRATE = 9600
  a8:	87 e6       	ldi	r24, 0x67	; 103
  aa:	80 93 99 00 	sts	0x0099, r24

	UCSR1C |= (1<<UCSZ1) | (1<<UCSZ0);// frame : 8 bit data , no parity ,1 stop bit
  ae:	ed e9       	ldi	r30, 0x9D	; 157
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	86 60       	ori	r24, 0x06	; 6
  b6:	80 83       	st	Z, r24

	UCSR1B |= (1<<RXEN) | (1<<TXEN) | (1<<RXCIE);// ENABLE RECIEVE INTRRRUPT (while using RXC flag)
  b8:	ea e9       	ldi	r30, 0x9A	; 154
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	88 69       	ori	r24, 0x98	; 152
  c0:	80 83       	st	Z, r24
	                                               // ENABLE TRANSMITTER & RECEIVE
	//UCSR1B |=(1<<RXEN)|(1<<TXEN) |(1<<UDRIE) ;    //while using UDRE flag
	
	//UCSR1B|=(1<<RXEN)|(1<<TXEN)|(1<<TXCIE);         //while using TXC flag

}
  c2:	08 95       	ret

000000c4 <uart0_init>:

void uart0_init(void) // Initialisation function for uart0
{
	UBRR0H = 0;
  c4:	10 92 90 00 	sts	0x0090, r1
	UBRR0L = 103; //0X67; BAUDRATE = 9600
  c8:	87 e6       	ldi	r24, 0x67	; 103
  ca:	89 b9       	out	0x09, r24	; 9
	
	UCSR0C |= (1<<UCSZ1) | (1<<UCSZ0);//frame:8 bit data,no parity, 1 stop bit
  cc:	e5 e9       	ldi	r30, 0x95	; 149
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	86 60       	ori	r24, 0x06	; 6
  d4:	80 83       	st	Z, r24

	UCSR0B |= (1<<RXEN) | (1<<TXEN) | (1<<RXCIE);// ENABLE RECIEVE INTRRRUPT, TRANSMITTER & RECEIVER.
  d6:	8a b1       	in	r24, 0x0a	; 10
  d8:	88 69       	ori	r24, 0x98	; 152
  da:	8a b9       	out	0x0a, r24	; 10
}
  dc:	08 95       	ret

000000de <__vector_30>:
#include"uart.h"
#include<util/delay.h>
#include<avr/interrupt.h>
ISR(USART1_RX_vect)
{
  de:	1f 92       	push	r1
  e0:	0f 92       	push	r0
  e2:	0f b6       	in	r0, 0x3f	; 63
  e4:	0f 92       	push	r0
  e6:	11 24       	eor	r1, r1
  e8:	8f 93       	push	r24
  ea:	ef 93       	push	r30
  ec:	ff 93       	push	r31
	
	unsigned char data;
	data = UDR1;
  ee:	ec e9       	ldi	r30, 0x9C	; 156
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
	UDR1 = data;// To display on own terminal
  f4:	80 83       	st	Z, r24
	UDR0 = data;
  f6:	8c b9       	out	0x0c, r24	; 12
}
  f8:	ff 91       	pop	r31
  fa:	ef 91       	pop	r30
  fc:	8f 91       	pop	r24
  fe:	0f 90       	pop	r0
 100:	0f be       	out	0x3f, r0	; 63
 102:	0f 90       	pop	r0
 104:	1f 90       	pop	r1
 106:	18 95       	reti

00000108 <__vector_18>:

ISR(USART0_RX_vect)
{
 108:	1f 92       	push	r1
 10a:	0f 92       	push	r0
 10c:	0f b6       	in	r0, 0x3f	; 63
 10e:	0f 92       	push	r0
 110:	11 24       	eor	r1, r1
 112:	8f 93       	push	r24
	
	unsigned char ch;
	ch = UDR0;
 114:	8c b1       	in	r24, 0x0c	; 12
	UDR1 = ch;
 116:	80 93 9c 00 	sts	0x009C, r24
}
 11a:	8f 91       	pop	r24
 11c:	0f 90       	pop	r0
 11e:	0f be       	out	0x3f, r0	; 63
 120:	0f 90       	pop	r0
 122:	1f 90       	pop	r1
 124:	18 95       	reti

00000126 <main>:

int main(void)
{
	
	sei();
 126:	78 94       	sei
	uart1_init() ;
 128:	0e 94 52 00 	call	0xa4	; 0xa4 <uart1_init>
	uart0_init();
 12c:	0e 94 62 00 	call	0xc4	; 0xc4 <uart0_init>
	DDRC = 0XFF;// PORTC AS O/P PORT
 130:	8f ef       	ldi	r24, 0xFF	; 255
 132:	84 bb       	out	0x14, r24	; 20
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 134:	20 e9       	ldi	r18, 0x90	; 144
 136:	31 e0       	ldi	r19, 0x01	; 1
	{
	
	PORTC = 0x00; // all leds are on
	_delay_ms(1000);

	PORTC = 0xff;// all leds are off
 138:	4f ef       	ldi	r20, 0xFF	; 255
	uart0_init();
	DDRC = 0XFF;// PORTC AS O/P PORT
	while(1)
	{
	
	PORTC = 0x00; // all leds are on
 13a:	15 ba       	out	0x15, r1	; 21
 13c:	80 e1       	ldi	r24, 0x10	; 16
 13e:	97 e2       	ldi	r25, 0x27	; 39
 140:	f9 01       	movw	r30, r18
 142:	31 97       	sbiw	r30, 0x01	; 1
 144:	f1 f7       	brne	.-4      	; 0x142 <main+0x1c>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 146:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 148:	d9 f7       	brne	.-10     	; 0x140 <main+0x1a>
	_delay_ms(1000);

	PORTC = 0xff;// all leds are off
 14a:	45 bb       	out	0x15, r20	; 21
 14c:	80 e1       	ldi	r24, 0x10	; 16
 14e:	97 e2       	ldi	r25, 0x27	; 39
 150:	f9 01       	movw	r30, r18
 152:	31 97       	sbiw	r30, 0x01	; 1
 154:	f1 f7       	brne	.-4      	; 0x152 <main+0x2c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 156:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 158:	d9 f7       	brne	.-10     	; 0x150 <main+0x2a>
 15a:	ef cf       	rjmp	.-34     	; 0x13a <main+0x14>

0000015c <_exit>:
 15c:	f8 94       	cli

0000015e <__stop_program>:
 15e:	ff cf       	rjmp	.-2      	; 0x15e <__stop_program>
