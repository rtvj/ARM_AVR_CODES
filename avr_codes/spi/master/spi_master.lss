
spi_master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  00000268  000002dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000268  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006b4  00000000  00000000  000002fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000054  00000000  00000000  000009b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  00000a04  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000000ad  00000000  00000000  00000a24  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000337  00000000  00000000  00000ad1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001bf  00000000  00000000  00000e08  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002fd  00000000  00000000  00000fc7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b0  00000000  00000000  000012c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000fb  00000000  00000000  00001374  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000af  00000000  00000000  0000146f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  0000151e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
   8:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
   c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  14:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  1c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  24:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  2c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  48:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  54:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  58:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  5c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  60:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  68:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  6c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  70:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  74:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  78:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  7c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  80:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  84:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  88:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e6       	ldi	r30, 0x68	; 104
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <.do_copy_data_start>

000000a4 <.do_copy_data_loop>:
  a4:	05 90       	lpm	r0, Z+
  a6:	0d 92       	st	X+, r0

000000a8 <.do_copy_data_start>:
  a8:	ae 31       	cpi	r26, 0x1E	; 30
  aa:	b1 07       	cpc	r27, r17
  ac:	d9 f7       	brne	.-10     	; 0xa4 <.do_copy_data_loop>

000000ae <__do_clear_bss>:
  ae:	11 e0       	ldi	r17, 0x01	; 1
  b0:	ae e1       	ldi	r26, 0x1E	; 30
  b2:	b1 e0       	ldi	r27, 0x01	; 1
  b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
  b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
  b8:	ae 31       	cpi	r26, 0x1E	; 30
  ba:	b1 07       	cpc	r27, r17
  bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
  be:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <main>
  c2:	0c 94 32 01 	jmp	0x264	; 0x264 <_exit>

000000c6 <__bad_interrupt>:
  c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <uart1_init>:
#include<avr/io.h>

// uart1 initialization
void uart1_init(void) 
{
	UBRR1H = 0;
  ca:	10 92 98 00 	sts	0x0098, r1
	UBRR1L = 103; //0X67; BAUDRATE = 9600
  ce:	87 e6       	ldi	r24, 0x67	; 103
  d0:	80 93 99 00 	sts	0x0099, r24

	UCSR1C |= (1<<UCSZ1) | (1<<UCSZ0); //UCSR1C = 0X06;// frame : 8 bit data , no parity ,1 stop bit
  d4:	ed e9       	ldi	r30, 0x9D	; 157
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	86 60       	ori	r24, 0x06	; 6
  dc:	80 83       	st	Z, r24

	UCSR1B |= (1<<RXEN) | (1<<TXEN);// ENABLE TRANSMITTER & RECEIVER
  de:	ea e9       	ldi	r30, 0x9A	; 154
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	88 61       	ori	r24, 0x18	; 24
  e6:	80 83       	st	Z, r24
}
  e8:	08 95       	ret

000000ea <uart1_tx_char>:

// TRANSMITTING CHAR
void uart1_tx_char(unsigned char data)
{
  ea:	98 2f       	mov	r25, r24
	while(!(UCSR1A &(1<<UDRE)));//poll UDRE flag till UDRE becomes 1
  ec:	80 91 9b 00 	lds	r24, 0x009B
  f0:	85 ff       	sbrs	r24, 5
  f2:	fc cf       	rjmp	.-8      	; 0xec <uart1_tx_char+0x2>
	UDR1 = data;                //load value in data register
  f4:	90 93 9c 00 	sts	0x009C, r25
}
  f8:	08 95       	ret

000000fa <uart1_tx_str>:

//Transmitting string
void uart1_tx_str(unsigned char *ptr) 
{
  fa:	fc 01       	movw	r30, r24
  fc:	07 c0       	rjmp	.+14     	; 0x10c <uart1_tx_str+0x12>
}

// TRANSMITTING CHAR
void uart1_tx_char(unsigned char data)
{
	while(!(UCSR1A &(1<<UDRE)));//poll UDRE flag till UDRE becomes 1
  fe:	80 91 9b 00 	lds	r24, 0x009B
 102:	85 ff       	sbrs	r24, 5
 104:	fc cf       	rjmp	.-8      	; 0xfe <uart1_tx_str+0x4>
	UDR1 = data;                //load value in data register
 106:	90 93 9c 00 	sts	0x009C, r25
void uart1_tx_str(unsigned char *ptr) 
{
    while(*ptr !='\0')
	{
	uart1_tx_char(*ptr);
	ptr ++; // uart1_tx_char(*(ptr++));
 10a:	31 96       	adiw	r30, 0x01	; 1
}

//Transmitting string
void uart1_tx_str(unsigned char *ptr) 
{
    while(*ptr !='\0')
 10c:	90 81       	ld	r25, Z
 10e:	99 23       	and	r25, r25
 110:	b1 f7       	brne	.-20     	; 0xfe <uart1_tx_str+0x4>
	{
	uart1_tx_char(*ptr);
	ptr ++; // uart1_tx_char(*(ptr++));
	}
}
 112:	08 95       	ret

00000114 <uart1_tx_num>:

// Transmitting number
void uart1_tx_num(unsigned int num ) 
{
 114:	df 93       	push	r29
 116:	cf 93       	push	r28
 118:	00 d0       	rcall	.+0      	; 0x11a <uart1_tx_num+0x6>
 11a:	00 d0       	rcall	.+0      	; 0x11c <uart1_tx_num+0x8>
 11c:	0f 92       	push	r0
 11e:	cd b7       	in	r28, 0x3d	; 61
 120:	de b7       	in	r29, 0x3e	; 62
	unsigned char i,count[5];	
	
	for(i=1;i<=1;i++)
	{
	count[i] = num % 10;
 122:	6a e0       	ldi	r22, 0x0A	; 10
 124:	70 e0       	ldi	r23, 0x00	; 0
 126:	0e 94 1e 01 	call	0x23c	; 0x23c <__udivmodhi4>
 12a:	8a 83       	std	Y+2, r24	; 0x02
 12c:	fe 01       	movw	r30, r28
 12e:	32 96       	adiw	r30, 0x02	; 2
	num = num / 10 ;
	}
	i--;// At the time of exit from the 'for loop',its value is greater than 1 of max value,
		// in this case it is 6 which is greater than 5;hence to decrease by 1 i--. 
	while(i!=0)
 130:	9e 01       	movw	r18, r28
 132:	2f 5f       	subi	r18, 0xFF	; 255
 134:	3f 4f       	sbci	r19, 0xFF	; 255
	{
	uart1_tx_char(count[i] + 0x30);
 136:	90 81       	ld	r25, Z
}

// TRANSMITTING CHAR
void uart1_tx_char(unsigned char data)
{
	while(!(UCSR1A &(1<<UDRE)));//poll UDRE flag till UDRE becomes 1
 138:	80 91 9b 00 	lds	r24, 0x009B
 13c:	85 ff       	sbrs	r24, 5
 13e:	fc cf       	rjmp	.-8      	; 0x138 <uart1_tx_num+0x24>
	}
	i--;// At the time of exit from the 'for loop',its value is greater than 1 of max value,
		// in this case it is 6 which is greater than 5;hence to decrease by 1 i--. 
	while(i!=0)
	{
	uart1_tx_char(count[i] + 0x30);
 140:	90 5d       	subi	r25, 0xD0	; 208

// TRANSMITTING CHAR
void uart1_tx_char(unsigned char data)
{
	while(!(UCSR1A &(1<<UDRE)));//poll UDRE flag till UDRE becomes 1
	UDR1 = data;                //load value in data register
 142:	90 93 9c 00 	sts	0x009C, r25
 146:	31 97       	sbiw	r30, 0x01	; 1
	count[i] = num % 10;
	num = num / 10 ;
	}
	i--;// At the time of exit from the 'for loop',its value is greater than 1 of max value,
		// in this case it is 6 which is greater than 5;hence to decrease by 1 i--. 
	while(i!=0)
 148:	2e 17       	cp	r18, r30
 14a:	3f 07       	cpc	r19, r31
 14c:	a1 f7       	brne	.-24     	; 0x136 <uart1_tx_num+0x22>
	{
	uart1_tx_char(count[i] + 0x30);
	i--;
	}
}
 14e:	0f 90       	pop	r0
 150:	0f 90       	pop	r0
 152:	0f 90       	pop	r0
 154:	0f 90       	pop	r0
 156:	0f 90       	pop	r0
 158:	cf 91       	pop	r28
 15a:	df 91       	pop	r29
 15c:	08 95       	ret

0000015e <uart1_rx_char>:

// Recieving char
unsigned char uart1_rx_char(void) 
{
	while(!(UCSR1A &(1<<RXC))); //poll Rxc flag wait till RXC becomes 1
 15e:	80 91 9b 00 	lds	r24, 0x009B
 162:	87 ff       	sbrs	r24, 7
 164:	fc cf       	rjmp	.-8      	; 0x15e <uart1_rx_char>
	return UDR1;
 166:	80 91 9c 00 	lds	r24, 0x009C
}
 16a:	08 95       	ret

0000016c <uart1_rx_str>:

// Recieving string
void uart1_rx_str(unsigned char *ptr)
{     unsigned int i;
 16c:	fc 01       	movw	r30, r24
 16e:	20 e0       	ldi	r18, 0x00	; 0
 170:	30 e0       	ldi	r19, 0x00	; 0
}

// Recieving char
unsigned char uart1_rx_char(void) 
{
	while(!(UCSR1A &(1<<RXC))); //poll Rxc flag wait till RXC becomes 1
 172:	80 91 9b 00 	lds	r24, 0x009B
 176:	87 ff       	sbrs	r24, 7
 178:	fc cf       	rjmp	.-8      	; 0x172 <uart1_rx_str+0x6>
	return UDR1;
 17a:	80 91 9c 00 	lds	r24, 0x009C
// Recieving string
void uart1_rx_str(unsigned char *ptr)
{     unsigned int i;
      for(i=0;i<100;i++)
      {
       *(ptr+i)=uart1_rx_char();
 17e:	80 83       	st	Z, r24
        if(*(ptr+i)=='\r')
 180:	8d 30       	cpi	r24, 0x0D	; 13
 182:	11 f4       	brne	.+4      	; 0x188 <uart1_rx_str+0x1c>
        {
        *(ptr+i)='\0';
 184:	10 82       	st	Z, r1
 186:	08 95       	ret
}

// Recieving string
void uart1_rx_str(unsigned char *ptr)
{     unsigned int i;
      for(i=0;i<100;i++)
 188:	2f 5f       	subi	r18, 0xFF	; 255
 18a:	3f 4f       	sbci	r19, 0xFF	; 255
 18c:	31 96       	adiw	r30, 0x01	; 1
 18e:	24 36       	cpi	r18, 0x64	; 100
 190:	31 05       	cpc	r19, r1
 192:	79 f7       	brne	.-34     	; 0x172 <uart1_rx_str+0x6>
 194:	08 95       	ret

00000196 <uart1_rx_num>:
}

// Recieving char
unsigned char uart1_rx_char(void) 
{
	while(!(UCSR1A &(1<<RXC))); //poll Rxc flag wait till RXC becomes 1
 196:	80 91 9b 00 	lds	r24, 0x009B
 19a:	87 ff       	sbrs	r24, 7
 19c:	fc cf       	rjmp	.-8      	; 0x196 <uart1_rx_num>
	return UDR1;
 19e:	80 91 9c 00 	lds	r24, 0x009C
	
	/*num = uart1_rx_char();
	num = ((num1 * 10 ) + (num - 0x30));*/
	return num;
	}
}
 1a2:	80 53       	subi	r24, 0x30	; 48
 1a4:	08 95       	ret

000001a6 <spi_init>:
#include<util/delay.h>
void spi_init()
{
	DDRB|=(1<<0)|(1<<1)|(1<<2);
 1a6:	87 b3       	in	r24, 0x17	; 23
 1a8:	87 60       	ori	r24, 0x07	; 7
 1aa:	87 bb       	out	0x17, r24	; 23
	DDRB&=~(1<<3);//MOSI,SCLK,SS as o/p MISO as i/p
 1ac:	bb 98       	cbi	0x17, 3	; 23
	PORTB|=(1<<3);// enable pull-up for MISO
 1ae:	c3 9a       	sbi	0x18, 3	; 24
	SPCR = 0X73;// master,lsb,first,fosc/128,cpol=cpha=0
 1b0:	83 e7       	ldi	r24, 0x73	; 115
 1b2:	8d b9       	out	0x0d, r24	; 13
	PORTB|=(1<<0); // SS=1........SLAVE Reset
 1b4:	c0 9a       	sbi	0x18, 0	; 24
}
 1b6:	08 95       	ret

000001b8 <master_tx>:

void master_tx(unsigned char data)
{
		
	PORTB&=~(1<<0);// ss=0.......slave select 
 1b8:	c0 98       	cbi	0x18, 0	; 24
	SPDR = data;	
 1ba:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR&(1<<SPIF)));
 1bc:	77 9b       	sbis	0x0e, 7	; 14
 1be:	fe cf       	rjmp	.-4      	; 0x1bc <master_tx+0x4>
	//_delay_ms(10);
	uart1_tx_char(SPDR);
 1c0:	9f b1       	in	r25, 0x0f	; 15
}

// TRANSMITTING CHAR
void uart1_tx_char(unsigned char data)
{
	while(!(UCSR1A &(1<<UDRE)));//poll UDRE flag till UDRE becomes 1
 1c2:	80 91 9b 00 	lds	r24, 0x009B
 1c6:	85 ff       	sbrs	r24, 5
 1c8:	fc cf       	rjmp	.-8      	; 0x1c2 <master_tx+0xa>
	UDR1 = data;                //load value in data register
 1ca:	90 93 9c 00 	sts	0x009C, r25
	//_delay_ms(10);
	
}
 1ce:	08 95       	ret

000001d0 <main>:
#include<avr/io.h>

// uart1 initialization
void uart1_init(void) 
{
	UBRR1H = 0;
 1d0:	10 92 98 00 	sts	0x0098, r1
	UBRR1L = 103; //0X67; BAUDRATE = 9600
 1d4:	87 e6       	ldi	r24, 0x67	; 103
 1d6:	80 93 99 00 	sts	0x0099, r24

	UCSR1C |= (1<<UCSZ1) | (1<<UCSZ0); //UCSR1C = 0X06;// frame : 8 bit data , no parity ,1 stop bit
 1da:	80 91 9d 00 	lds	r24, 0x009D
 1de:	86 60       	ori	r24, 0x06	; 6
 1e0:	80 93 9d 00 	sts	0x009D, r24

	UCSR1B |= (1<<RXEN) | (1<<TXEN);// ENABLE TRANSMITTER & RECEIVER
 1e4:	80 91 9a 00 	lds	r24, 0x009A
 1e8:	88 61       	ori	r24, 0x18	; 24
 1ea:	80 93 9a 00 	sts	0x009A, r24
 1ee:	e0 e0       	ldi	r30, 0x00	; 0
 1f0:	f1 e0       	ldi	r31, 0x01	; 1
 1f2:	07 c0       	rjmp	.+14     	; 0x202 <main+0x32>
}

// TRANSMITTING CHAR
void uart1_tx_char(unsigned char data)
{
	while(!(UCSR1A &(1<<UDRE)));//poll UDRE flag till UDRE becomes 1
 1f4:	80 91 9b 00 	lds	r24, 0x009B
 1f8:	85 ff       	sbrs	r24, 5
 1fa:	fc cf       	rjmp	.-8      	; 0x1f4 <main+0x24>
	UDR1 = data;                //load value in data register
 1fc:	90 93 9c 00 	sts	0x009C, r25
void uart1_tx_str(unsigned char *ptr) 
{
    while(*ptr !='\0')
	{
	uart1_tx_char(*ptr);
	ptr ++; // uart1_tx_char(*(ptr++));
 200:	31 96       	adiw	r30, 0x01	; 1
}

//Transmitting string
void uart1_tx_str(unsigned char *ptr) 
{
    while(*ptr !='\0')
 202:	90 81       	ld	r25, Z
 204:	99 23       	and	r25, r25
 206:	b1 f7       	brne	.-20     	; 0x1f4 <main+0x24>
#include<util/delay.h>
void spi_init()
{
	DDRB|=(1<<0)|(1<<1)|(1<<2);
 208:	87 b3       	in	r24, 0x17	; 23
 20a:	87 60       	ori	r24, 0x07	; 7
 20c:	87 bb       	out	0x17, r24	; 23
	DDRB&=~(1<<3);//MOSI,SCLK,SS as o/p MISO as i/p
 20e:	bb 98       	cbi	0x17, 3	; 23
	PORTB|=(1<<3);// enable pull-up for MISO
 210:	c3 9a       	sbi	0x18, 3	; 24
	SPCR = 0X73;// master,lsb,first,fosc/128,cpol=cpha=0
 212:	83 e7       	ldi	r24, 0x73	; 115
 214:	8d b9       	out	0x0d, r24	; 13
	PORTB|=(1<<0); // SS=1........SLAVE Reset
 216:	c0 9a       	sbi	0x18, 0	; 24
}

// Recieving char
unsigned char uart1_rx_char(void) 
{
	while(!(UCSR1A &(1<<RXC))); //poll Rxc flag wait till RXC becomes 1
 218:	80 91 9b 00 	lds	r24, 0x009B
 21c:	87 ff       	sbrs	r24, 7
 21e:	fc cf       	rjmp	.-8      	; 0x218 <main+0x48>
	return UDR1;
 220:	80 91 9c 00 	lds	r24, 0x009C
}

void master_tx(unsigned char data)
{
		
	PORTB&=~(1<<0);// ss=0.......slave select 
 224:	c0 98       	cbi	0x18, 0	; 24
	SPDR = data;	
 226:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR&(1<<SPIF)));
 228:	77 9b       	sbis	0x0e, 7	; 14
 22a:	fe cf       	rjmp	.-4      	; 0x228 <main+0x58>
	//_delay_ms(10);
	uart1_tx_char(SPDR);
 22c:	9f b1       	in	r25, 0x0f	; 15
}

// TRANSMITTING CHAR
void uart1_tx_char(unsigned char data)
{
	while(!(UCSR1A &(1<<UDRE)));//poll UDRE flag till UDRE becomes 1
 22e:	80 91 9b 00 	lds	r24, 0x009B
 232:	85 ff       	sbrs	r24, 5
 234:	fc cf       	rjmp	.-8      	; 0x22e <main+0x5e>
	UDR1 = data;                //load value in data register
 236:	90 93 9c 00 	sts	0x009C, r25
 23a:	ee cf       	rjmp	.-36     	; 0x218 <main+0x48>

0000023c <__udivmodhi4>:
 23c:	aa 1b       	sub	r26, r26
 23e:	bb 1b       	sub	r27, r27
 240:	51 e1       	ldi	r21, 0x11	; 17
 242:	07 c0       	rjmp	.+14     	; 0x252 <__udivmodhi4_ep>

00000244 <__udivmodhi4_loop>:
 244:	aa 1f       	adc	r26, r26
 246:	bb 1f       	adc	r27, r27
 248:	a6 17       	cp	r26, r22
 24a:	b7 07       	cpc	r27, r23
 24c:	10 f0       	brcs	.+4      	; 0x252 <__udivmodhi4_ep>
 24e:	a6 1b       	sub	r26, r22
 250:	b7 0b       	sbc	r27, r23

00000252 <__udivmodhi4_ep>:
 252:	88 1f       	adc	r24, r24
 254:	99 1f       	adc	r25, r25
 256:	5a 95       	dec	r21
 258:	a9 f7       	brne	.-22     	; 0x244 <__udivmodhi4_loop>
 25a:	80 95       	com	r24
 25c:	90 95       	com	r25
 25e:	bc 01       	movw	r22, r24
 260:	cd 01       	movw	r24, r26
 262:	08 95       	ret

00000264 <_exit>:
 264:	f8 94       	cli

00000266 <__stop_program>:
 266:	ff cf       	rjmp	.-2      	; 0x266 <__stop_program>
