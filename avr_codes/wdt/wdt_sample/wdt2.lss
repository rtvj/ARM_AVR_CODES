
wdt2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004a  00800100  0000020a  0000027e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000020a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 00000020  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000009d  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000002d2  00000000  00000000  00000385  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001d3  00000000  00000000  00000657  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002bf  00000000  00000000  0000082a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000a0  00000000  00000000  00000aec  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000011b  00000000  00000000  00000b8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000d9  00000000  00000000  00000ca7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000060  00000000  00000000  00000d80  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  7c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  80:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  84:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  88:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e0       	ldi	r30, 0x0A	; 10
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <.do_copy_data_start>

000000a4 <.do_copy_data_loop>:
  a4:	05 90       	lpm	r0, Z+
  a6:	0d 92       	st	X+, r0

000000a8 <.do_copy_data_start>:
  a8:	aa 34       	cpi	r26, 0x4A	; 74
  aa:	b1 07       	cpc	r27, r17
  ac:	d9 f7       	brne	.-10     	; 0xa4 <.do_copy_data_loop>
  ae:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <main>
  b2:	0c 94 03 01 	jmp	0x206	; 0x206 <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <uart1_init>:
#include<avr/io.h>

// uart1 initialization
void uart1_init(void) 
{
	UBRR1H = 0;
  ba:	10 92 98 00 	sts	0x0098, r1
	UBRR1L = 103; //0X67; BAUDRATE = 9600
  be:	87 e6       	ldi	r24, 0x67	; 103
  c0:	80 93 99 00 	sts	0x0099, r24

	UCSR1C |= (1<<UCSZ1) | (1<<UCSZ0); //UCSR1C = 0X06;// frame : 8 bit data , no parity ,1 stop bit
  c4:	ed e9       	ldi	r30, 0x9D	; 157
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	86 60       	ori	r24, 0x06	; 6
  cc:	80 83       	st	Z, r24

	UCSR1B |= (1<<RXEN) | (1<<TXEN);// ENABLE TRANSMITTER & RECEIVER
  ce:	ea e9       	ldi	r30, 0x9A	; 154
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	88 61       	ori	r24, 0x18	; 24
  d6:	80 83       	st	Z, r24
}
  d8:	08 95       	ret

000000da <uart1_tx_char>:

// TRANSMITTING CHAR
void uart1_tx_char(unsigned char data)
{
  da:	98 2f       	mov	r25, r24
	while(!(UCSR1A &(1<<UDRE)));//poll UDRE flag till UDRE becomes 1
  dc:	80 91 9b 00 	lds	r24, 0x009B
  e0:	85 ff       	sbrs	r24, 5
  e2:	fc cf       	rjmp	.-8      	; 0xdc <uart1_tx_char+0x2>
	UDR1 = data;                //load value in data register
  e4:	90 93 9c 00 	sts	0x009C, r25
}
  e8:	08 95       	ret

000000ea <uart1_tx_str>:

//Transmitting string
void uart1_tx_str(unsigned char *ptr) 
{
  ea:	fc 01       	movw	r30, r24
  ec:	07 c0       	rjmp	.+14     	; 0xfc <uart1_tx_str+0x12>
}

// TRANSMITTING CHAR
void uart1_tx_char(unsigned char data)
{
	while(!(UCSR1A &(1<<UDRE)));//poll UDRE flag till UDRE becomes 1
  ee:	80 91 9b 00 	lds	r24, 0x009B
  f2:	85 ff       	sbrs	r24, 5
  f4:	fc cf       	rjmp	.-8      	; 0xee <uart1_tx_str+0x4>
	UDR1 = data;                //load value in data register
  f6:	90 93 9c 00 	sts	0x009C, r25
void uart1_tx_str(unsigned char *ptr) 
{
    while(*ptr !='\0')
	{
	uart1_tx_char(*ptr);
	ptr ++; // uart1_tx_char(*(ptr++));
  fa:	31 96       	adiw	r30, 0x01	; 1
}

//Transmitting string
void uart1_tx_str(unsigned char *ptr) 
{
    while(*ptr !='\0')
  fc:	90 81       	ld	r25, Z
  fe:	99 23       	and	r25, r25
 100:	b1 f7       	brne	.-20     	; 0xee <uart1_tx_str+0x4>
	{
	uart1_tx_char(*ptr);
	ptr ++; // uart1_tx_char(*(ptr++));
	}
}
 102:	08 95       	ret

00000104 <uart1_tx_num>:

// Transmitting number
void uart1_tx_num(unsigned int num ) 
{
 104:	df 93       	push	r29
 106:	cf 93       	push	r28
 108:	00 d0       	rcall	.+0      	; 0x10a <uart1_tx_num+0x6>
 10a:	00 d0       	rcall	.+0      	; 0x10c <uart1_tx_num+0x8>
 10c:	0f 92       	push	r0
 10e:	cd b7       	in	r28, 0x3d	; 61
 110:	de b7       	in	r29, 0x3e	; 62
	unsigned char i,count[5];	
	
	for(i=1;i<=1;i++)
	{
	count[i] = num % 10;
 112:	6a e0       	ldi	r22, 0x0A	; 10
 114:	70 e0       	ldi	r23, 0x00	; 0
 116:	0e 94 ef 00 	call	0x1de	; 0x1de <__udivmodhi4>
 11a:	8a 83       	std	Y+2, r24	; 0x02
 11c:	fe 01       	movw	r30, r28
 11e:	32 96       	adiw	r30, 0x02	; 2
	num = num / 10 ;
	}
	i--;// At the time of exit from the 'for loop',its value is greater than 1 of max value,
		// in this case it is 6 which is greater than 5;hence to decrease by 1 i--. 
	while(i!=0)
 120:	9e 01       	movw	r18, r28
 122:	2f 5f       	subi	r18, 0xFF	; 255
 124:	3f 4f       	sbci	r19, 0xFF	; 255
	{
	uart1_tx_char(count[i] + 0x30);
 126:	90 81       	ld	r25, Z
}

// TRANSMITTING CHAR
void uart1_tx_char(unsigned char data)
{
	while(!(UCSR1A &(1<<UDRE)));//poll UDRE flag till UDRE becomes 1
 128:	80 91 9b 00 	lds	r24, 0x009B
 12c:	85 ff       	sbrs	r24, 5
 12e:	fc cf       	rjmp	.-8      	; 0x128 <uart1_tx_num+0x24>
	}
	i--;// At the time of exit from the 'for loop',its value is greater than 1 of max value,
		// in this case it is 6 which is greater than 5;hence to decrease by 1 i--. 
	while(i!=0)
	{
	uart1_tx_char(count[i] + 0x30);
 130:	90 5d       	subi	r25, 0xD0	; 208

// TRANSMITTING CHAR
void uart1_tx_char(unsigned char data)
{
	while(!(UCSR1A &(1<<UDRE)));//poll UDRE flag till UDRE becomes 1
	UDR1 = data;                //load value in data register
 132:	90 93 9c 00 	sts	0x009C, r25
 136:	31 97       	sbiw	r30, 0x01	; 1
	count[i] = num % 10;
	num = num / 10 ;
	}
	i--;// At the time of exit from the 'for loop',its value is greater than 1 of max value,
		// in this case it is 6 which is greater than 5;hence to decrease by 1 i--. 
	while(i!=0)
 138:	2e 17       	cp	r18, r30
 13a:	3f 07       	cpc	r19, r31
 13c:	a1 f7       	brne	.-24     	; 0x126 <uart1_tx_num+0x22>
	{
	uart1_tx_char(count[i] + 0x30);
	i--;
	}
}
 13e:	0f 90       	pop	r0
 140:	0f 90       	pop	r0
 142:	0f 90       	pop	r0
 144:	0f 90       	pop	r0
 146:	0f 90       	pop	r0
 148:	cf 91       	pop	r28
 14a:	df 91       	pop	r29
 14c:	08 95       	ret

0000014e <uart1_rx_char>:

// Recieving char
unsigned char uart1_rx_char(void) 
{
	while(!(UCSR1A &(1<<RXC))); //poll Rxc flag wait till RXC becomes 1
 14e:	80 91 9b 00 	lds	r24, 0x009B
 152:	87 ff       	sbrs	r24, 7
 154:	fc cf       	rjmp	.-8      	; 0x14e <uart1_rx_char>
	return UDR1;
 156:	80 91 9c 00 	lds	r24, 0x009C
}
 15a:	08 95       	ret

0000015c <uart1_rx_str>:

// Recieving string
void uart1_rx_str(unsigned char *ptr)
{     unsigned int i;
 15c:	fc 01       	movw	r30, r24
 15e:	20 e0       	ldi	r18, 0x00	; 0
 160:	30 e0       	ldi	r19, 0x00	; 0
}

// Recieving char
unsigned char uart1_rx_char(void) 
{
	while(!(UCSR1A &(1<<RXC))); //poll Rxc flag wait till RXC becomes 1
 162:	80 91 9b 00 	lds	r24, 0x009B
 166:	87 ff       	sbrs	r24, 7
 168:	fc cf       	rjmp	.-8      	; 0x162 <uart1_rx_str+0x6>
	return UDR1;
 16a:	80 91 9c 00 	lds	r24, 0x009C
// Recieving string
void uart1_rx_str(unsigned char *ptr)
{     unsigned int i;
      for(i=0;i<100;i++)
      {
       *(ptr+i)=uart1_rx_char();
 16e:	80 83       	st	Z, r24
        if(*(ptr+i)=='\r')
 170:	8d 30       	cpi	r24, 0x0D	; 13
 172:	11 f4       	brne	.+4      	; 0x178 <uart1_rx_str+0x1c>
        {
        *(ptr+i)='\0';
 174:	10 82       	st	Z, r1
 176:	08 95       	ret
}

// Recieving string
void uart1_rx_str(unsigned char *ptr)
{     unsigned int i;
      for(i=0;i<100;i++)
 178:	2f 5f       	subi	r18, 0xFF	; 255
 17a:	3f 4f       	sbci	r19, 0xFF	; 255
 17c:	31 96       	adiw	r30, 0x01	; 1
 17e:	24 36       	cpi	r18, 0x64	; 100
 180:	31 05       	cpc	r19, r1
 182:	79 f7       	brne	.-34     	; 0x162 <uart1_rx_str+0x6>
 184:	08 95       	ret

00000186 <uart1_rx_num>:
}

// Recieving char
unsigned char uart1_rx_char(void) 
{
	while(!(UCSR1A &(1<<RXC))); //poll Rxc flag wait till RXC becomes 1
 186:	80 91 9b 00 	lds	r24, 0x009B
 18a:	87 ff       	sbrs	r24, 7
 18c:	fc cf       	rjmp	.-8      	; 0x186 <uart1_rx_num>
	return UDR1;
 18e:	80 91 9c 00 	lds	r24, 0x009C
	
	/*num = uart1_rx_char();
	num = ((num1 * 10 ) + (num - 0x30));*/
	return num;
	}
}
 192:	80 53       	subi	r24, 0x30	; 48
 194:	08 95       	ret

00000196 <enable>:

void enable() // To enable Watchdog Timer
{
// follow safety level 2(Watchdog Timer is always enabled)...WDTON=programmed,M103C=unprogrammed
// Refer Datasheet pg 57 safety level 2
	WDTCR|=(1<<WDCE)|(1<<WDE);
 196:	81 b5       	in	r24, 0x21	; 33
 198:	88 61       	ori	r24, 0x18	; 24
 19a:	81 bd       	out	0x21, r24	; 33
	WDTCR|=(1<<WDP2)|(1<<WDP1)|(1<<WDP0)&(~(1<<WDCE));// WDP= To determine time-out period
 19c:	81 b5       	in	r24, 0x21	; 33
 19e:	87 60       	ori	r24, 0x07	; 7
 1a0:	81 bd       	out	0x21, r24	; 33
                                                         //in this case 2.1ms 
}
 1a2:	08 95       	ret

000001a4 <main>:
int main(void)
{
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29
	uart1_init();
 1a8:	0e 94 5d 00 	call	0xba	; 0xba <uart1_init>
	
	uart1_tx_str("\ncontroller is reset..main program starts..\n");
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	91 e0       	ldi	r25, 0x01	; 1
 1b0:	0e 94 75 00 	call	0xea	; 0xea <uart1_tx_str>

void enable() // To enable Watchdog Timer
{
// follow safety level 2(Watchdog Timer is always enabled)...WDTON=programmed,M103C=unprogrammed
// Refer Datasheet pg 57 safety level 2
	WDTCR|=(1<<WDCE)|(1<<WDE);
 1b4:	81 b5       	in	r24, 0x21	; 33
 1b6:	88 61       	ori	r24, 0x18	; 24
 1b8:	81 bd       	out	0x21, r24	; 33
	WDTCR|=(1<<WDP2)|(1<<WDP1)|(1<<WDP0)&(~(1<<WDCE));// WDP= To determine time-out period
 1ba:	81 b5       	in	r24, 0x21	; 33
 1bc:	87 60       	ori	r24, 0x07	; 7
 1be:	81 bd       	out	0x21, r24	; 33
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1c0:	c0 e9       	ldi	r28, 0x90	; 144
 1c2:	d1 e0       	ldi	r29, 0x01	; 1
		In this case, for delay_ms < 2.1 ms, Watchdog does not time out 
	i.e. program remains in while loop only.
		For delay_ms > 2.1 ms, Watchdog  times out i.e. program starts from main program.
	*/
		
		uart1_tx_str("\nwdt reset....in while loop");
 1c4:	8d e2       	ldi	r24, 0x2D	; 45
 1c6:	91 e0       	ldi	r25, 0x01	; 1
 1c8:	0e 94 75 00 	call	0xea	; 0xea <uart1_tx_str>
 1cc:	80 ef       	ldi	r24, 0xF0	; 240
 1ce:	95 e5       	ldi	r25, 0x55	; 85
 1d0:	fe 01       	movw	r30, r28
 1d2:	31 97       	sbiw	r30, 0x01	; 1
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <main+0x2e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1d6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1d8:	d9 f7       	brne	.-10     	; 0x1d0 <main+0x2c>
		_delay_ms(2200);
		
		//wdt_reset(); // watchdog timer reset using wdt.h
		__asm__ __volatile__ ("wdr");// watchdog timer reset 
 1da:	a8 95       	wdr
 1dc:	f3 cf       	rjmp	.-26     	; 0x1c4 <main+0x20>

000001de <__udivmodhi4>:
 1de:	aa 1b       	sub	r26, r26
 1e0:	bb 1b       	sub	r27, r27
 1e2:	51 e1       	ldi	r21, 0x11	; 17
 1e4:	07 c0       	rjmp	.+14     	; 0x1f4 <__udivmodhi4_ep>

000001e6 <__udivmodhi4_loop>:
 1e6:	aa 1f       	adc	r26, r26
 1e8:	bb 1f       	adc	r27, r27
 1ea:	a6 17       	cp	r26, r22
 1ec:	b7 07       	cpc	r27, r23
 1ee:	10 f0       	brcs	.+4      	; 0x1f4 <__udivmodhi4_ep>
 1f0:	a6 1b       	sub	r26, r22
 1f2:	b7 0b       	sbc	r27, r23

000001f4 <__udivmodhi4_ep>:
 1f4:	88 1f       	adc	r24, r24
 1f6:	99 1f       	adc	r25, r25
 1f8:	5a 95       	dec	r21
 1fa:	a9 f7       	brne	.-22     	; 0x1e6 <__udivmodhi4_loop>
 1fc:	80 95       	com	r24
 1fe:	90 95       	com	r25
 200:	bc 01       	movw	r22, r24
 202:	cd 01       	movw	r24, r26
 204:	08 95       	ret

00000206 <_exit>:
 206:	f8 94       	cli

00000208 <__stop_program>:
 208:	ff cf       	rjmp	.-2      	; 0x208 <__stop_program>
