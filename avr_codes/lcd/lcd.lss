
lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000386  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000003  00800100  00800100  000003fa  2**0
                  ALLOC
  2 .stab         000006b4  00000000  00000000  000003fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000054  00000000  00000000  00000ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  00000b04  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000000d7  00000000  00000000  00000b24  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000365  00000000  00000000  00000bfb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000015f  00000000  00000000  00000f60  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000331  00000000  00000000  000010bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e0  00000000  00000000  000013f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000f2  00000000  00000000  000014d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000019a  00000000  00000000  000015c2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
   8:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
   c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  14:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  1c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  24:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  2c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  48:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  54:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  58:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  5c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  60:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  68:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  6c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  70:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  74:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  78:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  7c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  80:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  84:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  88:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e8       	ldi	r30, 0x86	; 134
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <.do_copy_data_start>

000000a4 <.do_copy_data_loop>:
  a4:	05 90       	lpm	r0, Z+
  a6:	0d 92       	st	X+, r0

000000a8 <.do_copy_data_start>:
  a8:	a0 30       	cpi	r26, 0x00	; 0
  aa:	b1 07       	cpc	r27, r17
  ac:	d9 f7       	brne	.-10     	; 0xa4 <.do_copy_data_loop>

000000ae <__do_clear_bss>:
  ae:	11 e0       	ldi	r17, 0x01	; 1
  b0:	a0 e0       	ldi	r26, 0x00	; 0
  b2:	b1 e0       	ldi	r27, 0x01	; 1
  b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
  b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
  b8:	a3 30       	cpi	r26, 0x03	; 3
  ba:	b1 07       	cpc	r27, r17
  bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
  be:	0e 94 71 01 	call	0x2e2	; 0x2e2 <main>
  c2:	0c 94 c1 01 	jmp	0x382	; 0x382 <_exit>

000000c6 <__bad_interrupt>:
  c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <toggleE>:
		
}

void toggleE(void)
{
SETBIT(PORTUSED,BIT(2));
  ca:	da 9a       	sbi	0x1b, 2	; 27
  cc:	90 91 00 01 	lds	r25, 0x0100
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <toggleE+0xe>
  d4:	8f 5f       	subi	r24, 0xFF	; 255
  d6:	9a e0       	ldi	r25, 0x0A	; 10
CLEARBIT(PORTUSED,BIT(2));
}

void dely_ns(unsigned char tim)
{
	for(j=0;j<tim;j++)
  d8:	8a 3f       	cpi	r24, 0xFA	; 250
  da:	e0 f3       	brcs	.-8      	; 0xd4 <toggleE+0xa>
  dc:	90 93 00 01 	sts	0x0100, r25
  e0:	80 93 01 01 	sts	0x0101, r24

void toggleE(void)
{
SETBIT(PORTUSED,BIT(2));
dely_ns(250);
CLEARBIT(PORTUSED,BIT(2));
  e4:	da 98       	cbi	0x1b, 2	; 27
}
  e6:	08 95       	ret

000000e8 <dely_ns>:

void dely_ns(unsigned char tim)
{
  e8:	20 91 00 01 	lds	r18, 0x0100
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <dely_ns+0xc>
	for(j=0;j<tim;j++)
  f0:	9f 5f       	subi	r25, 0xFF	; 255
  f2:	2a e0       	ldi	r18, 0x0A	; 10
  f4:	98 17       	cp	r25, r24
  f6:	e0 f3       	brcs	.-8      	; 0xf0 <dely_ns+0x8>
  f8:	20 93 00 01 	sts	0x0100, r18
  fc:	90 93 01 01 	sts	0x0101, r25
	{
		for(k=0;k<10;k++)
		{};
	}
}
 100:	08 95       	ret

00000102 <lcd_cmd>:

void lcd_cmd(unsigned char cmd)
{
 102:	0f 93       	push	r16
 104:	1f 93       	push	r17
 106:	08 2f       	mov	r16, r24
	CLEARBIT(PORTUSED,BIT(0)+BIT(1)+BIT(2));
 108:	8b b3       	in	r24, 0x1b	; 27
 10a:	84 70       	andi	r24, 0x04	; 4
 10c:	8b bb       	out	0x1b, r24	; 27
	PORTUSED=((cmd&0xF0));			
 10e:	80 2f       	mov	r24, r16
 110:	80 7f       	andi	r24, 0xF0	; 240
 112:	8b bb       	out	0x1b, r24	; 27
	toggleE();
 114:	0e 94 65 00 	call	0xca	; 0xca <toggleE>
	PORTUSED=(((cmd&(0x0F))*16));	
 118:	10 e0       	ldi	r17, 0x00	; 0
 11a:	0f 70       	andi	r16, 0x0F	; 15
 11c:	10 70       	andi	r17, 0x00	; 0
 11e:	84 e0       	ldi	r24, 0x04	; 4
 120:	00 0f       	add	r16, r16
 122:	11 1f       	adc	r17, r17
 124:	8a 95       	dec	r24
 126:	e1 f7       	brne	.-8      	; 0x120 <lcd_cmd+0x1e>
 128:	0b bb       	out	0x1b, r16	; 27
	toggleE();
 12a:	0e 94 65 00 	call	0xca	; 0xca <toggleE>
}
 12e:	1f 91       	pop	r17
 130:	0f 91       	pop	r16
 132:	08 95       	ret

00000134 <lcd_init>:
void WaitMs(unsigned int ms);


void lcd_init(void)	//init the lcd
{	
	save=PORTUSED;
 134:	8b b3       	in	r24, 0x1b	; 27
 136:	80 93 02 01 	sts	0x0102, r24
	DDRUSED=0xFF;
 13a:	8f ef       	ldi	r24, 0xFF	; 255
 13c:	8a bb       	out	0x1a, r24	; 26
 13e:	2f e0       	ldi	r18, 0x0F	; 15
 140:	30 e0       	ldi	r19, 0x00	; 0
 142:	08 c0       	rjmp	.+16     	; 0x154 <lcd_init+0x20>
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	90 e0       	ldi	r25, 0x00	; 0
	while (ms-- > 0)
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
			asm("nop");
 148:	00 00       	nop

	while (ms-- > 0)
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
 14a:	01 96       	adiw	r24, 0x01	; 1
 14c:	4c e0       	ldi	r20, 0x0C	; 12
 14e:	8c 3c       	cpi	r24, 0xCC	; 204
 150:	94 07       	cpc	r25, r20
 152:	d1 f7       	brne	.-12     	; 0x148 <lcd_init+0x14>
/* waits (pauses) for ms milliseconds (assumes clock at 16MHz) */
void WaitMs(unsigned int ms)
{
	int i;

	while (ms-- > 0)
 154:	21 50       	subi	r18, 0x01	; 1
 156:	30 40       	sbci	r19, 0x00	; 0
 158:	8f ef       	ldi	r24, 0xFF	; 255
 15a:	2f 3f       	cpi	r18, 0xFF	; 255
 15c:	38 07       	cpc	r19, r24
 15e:	91 f7       	brne	.-28     	; 0x144 <lcd_init+0x10>
{	
	save=PORTUSED;
	DDRUSED=0xFF;
	//DDRB=0xFF;
	WaitMs(15);
	CLEARBIT(PORTUSED,BIT(0)+BIT(1)+BIT(2));
 160:	8b b3       	in	r24, 0x1b	; 27
 162:	84 70       	andi	r24, 0x04	; 4
 164:	8b bb       	out	0x1b, r24	; 27
	PORTUSED=0x20;
 166:	80 e2       	ldi	r24, 0x20	; 32
 168:	8b bb       	out	0x1b, r24	; 27
	lcd_cmd(0x01);
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	0e 94 81 00 	call	0x102	; 0x102 <lcd_cmd>
	lcd_cmd(0x0F);
 170:	8f e0       	ldi	r24, 0x0F	; 15
 172:	0e 94 81 00 	call	0x102	; 0x102 <lcd_cmd>
	lcd_cmd(0x02);
 176:	82 e0       	ldi	r24, 0x02	; 2
 178:	0e 94 81 00 	call	0x102	; 0x102 <lcd_cmd>
	lcd_cmd(LINE1);
 17c:	80 e8       	ldi	r24, 0x80	; 128
 17e:	0e 94 81 00 	call	0x102	; 0x102 <lcd_cmd>
 182:	2f e0       	ldi	r18, 0x0F	; 15
 184:	30 e0       	ldi	r19, 0x00	; 0
 186:	08 c0       	rjmp	.+16     	; 0x198 <lcd_init+0x64>
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	90 e0       	ldi	r25, 0x00	; 0
	while (ms-- > 0)
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
			asm("nop");
 18c:	00 00       	nop

	while (ms-- > 0)
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
 18e:	01 96       	adiw	r24, 0x01	; 1
 190:	4c e0       	ldi	r20, 0x0C	; 12
 192:	8c 3c       	cpi	r24, 0xCC	; 204
 194:	94 07       	cpc	r25, r20
 196:	d1 f7       	brne	.-12     	; 0x18c <lcd_init+0x58>
/* waits (pauses) for ms milliseconds (assumes clock at 16MHz) */
void WaitMs(unsigned int ms)
{
	int i;

	while (ms-- > 0)
 198:	21 50       	subi	r18, 0x01	; 1
 19a:	30 40       	sbci	r19, 0x00	; 0
 19c:	8f ef       	ldi	r24, 0xFF	; 255
 19e:	2f 3f       	cpi	r18, 0xFF	; 255
 1a0:	38 07       	cpc	r19, r24
 1a2:	91 f7       	brne	.-28     	; 0x188 <lcd_init+0x54>
	lcd_cmd(0x0F);
	lcd_cmd(0x02);
	lcd_cmd(LINE1);
	WaitMs(15);
		
}
 1a4:	08 95       	ret

000001a6 <lcd_putchar>:
	PORTUSED=(((cmd&(0x0F))*16));	
	toggleE();
}

void lcd_putchar(unsigned char sig)
{
 1a6:	1f 93       	push	r17
 1a8:	18 2f       	mov	r17, r24
		PORTUSED=0x01;
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	8b bb       	out	0x1b, r24	; 27
		CLEARBIT(PORTUSED,BIT(0)+BIT(2));
 1ae:	8b b3       	in	r24, 0x1b	; 27
 1b0:	82 70       	andi	r24, 0x02	; 2
 1b2:	8b bb       	out	0x1b, r24	; 27
		PORTUSED=(sig&0xF0)|0x01;						
 1b4:	81 2f       	mov	r24, r17
 1b6:	80 7f       	andi	r24, 0xF0	; 240
 1b8:	81 60       	ori	r24, 0x01	; 1
 1ba:	8b bb       	out	0x1b, r24	; 27
		toggleE();
 1bc:	0e 94 65 00 	call	0xca	; 0xca <toggleE>
		PORTUSED=((sig&(0x0F))*16)|0x01;
 1c0:	12 95       	swap	r17
 1c2:	10 7f       	andi	r17, 0xF0	; 240
 1c4:	11 60       	ori	r17, 0x01	; 1
 1c6:	1b bb       	out	0x1b, r17	; 27
		toggleE();
 1c8:	0e 94 65 00 	call	0xca	; 0xca <toggleE>
}
 1cc:	1f 91       	pop	r17
 1ce:	08 95       	ret

000001d0 <lcd_string>:
		lcd_putchar(single);
	}
}

void lcd_string(unsigned char str[32])
{
 1d0:	ef 92       	push	r14
 1d2:	ff 92       	push	r15
 1d4:	1f 93       	push	r17
 1d6:	cf 93       	push	r28
 1d8:	df 93       	push	r29
 1da:	7c 01       	movw	r14, r24
	unsigned char k=0;
	PORTUSED=0x01;
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	8b bb       	out	0x1b, r24	; 27
	CLEARBIT(PORTUSED,BIT(0)+BIT(2));
 1e0:	8b b3       	in	r24, 0x1b	; 27
 1e2:	82 70       	andi	r24, 0x02	; 2
 1e4:	8b bb       	out	0x1b, r24	; 27
 1e6:	10 e0       	ldi	r17, 0x00	; 0
 1e8:	13 c0       	rjmp	.+38     	; 0x210 <lcd_string+0x40>
	while(str[k]!='\0')	//Till null character is encountered
		{
			if(k==16)
 1ea:	10 31       	cpi	r17, 0x10	; 16
 1ec:	19 f4       	brne	.+6      	; 0x1f4 <lcd_string+0x24>
				lcd_cmd(LINE2);
 1ee:	80 ec       	ldi	r24, 0xC0	; 192
 1f0:	0e 94 81 00 	call	0x102	; 0x102 <lcd_cmd>
			PORTUSED=((str[k])&0xF0)|0x01;
 1f4:	88 81       	ld	r24, Y
 1f6:	80 7f       	andi	r24, 0xF0	; 240
 1f8:	81 60       	ori	r24, 0x01	; 1
 1fa:	8b bb       	out	0x1b, r24	; 27
			toggleE();
 1fc:	0e 94 65 00 	call	0xca	; 0xca <toggleE>
			PORTUSED=((str[k]&(0x0F))*16)|0x01;
 200:	88 81       	ld	r24, Y
 202:	82 95       	swap	r24
 204:	80 7f       	andi	r24, 0xF0	; 240
 206:	81 60       	ori	r24, 0x01	; 1
 208:	8b bb       	out	0x1b, r24	; 27
			toggleE();
 20a:	0e 94 65 00 	call	0xca	; 0xca <toggleE>
			k++;
 20e:	1f 5f       	subi	r17, 0xFF	; 255
void lcd_string(unsigned char str[32])
{
	unsigned char k=0;
	PORTUSED=0x01;
	CLEARBIT(PORTUSED,BIT(0)+BIT(2));
	while(str[k]!='\0')	//Till null character is encountered
 210:	e7 01       	movw	r28, r14
 212:	c1 0f       	add	r28, r17
 214:	d1 1d       	adc	r29, r1
 216:	88 81       	ld	r24, Y
 218:	88 23       	and	r24, r24
 21a:	39 f7       	brne	.-50     	; 0x1ea <lcd_string+0x1a>
			toggleE();
			PORTUSED=((str[k]&(0x0F))*16)|0x01;
			toggleE();
			k++;
		}
}
 21c:	df 91       	pop	r29
 21e:	cf 91       	pop	r28
 220:	1f 91       	pop	r17
 222:	ff 90       	pop	r15
 224:	ef 90       	pop	r14
 226:	08 95       	ret

00000228 <lcd_gotoxy1>:
	lcd_char(O+48);
}

void lcd_gotoxy1(unsigned char pos)
{
	lcd_cmd(LINE1+pos);
 228:	80 58       	subi	r24, 0x80	; 128
 22a:	0e 94 81 00 	call	0x102	; 0x102 <lcd_cmd>
}
 22e:	08 95       	ret

00000230 <lcd_gotoxy2>:

void lcd_gotoxy2(unsigned char pos)
{
	lcd_cmd(LINE2+pos);
 230:	80 54       	subi	r24, 0x40	; 64
 232:	0e 94 81 00 	call	0x102	; 0x102 <lcd_cmd>
}
 236:	08 95       	ret

00000238 <lcd_char>:
}

void lcd_char(unsigned char single)
{
	int i;
	if(single =='\t')
 238:	89 30       	cpi	r24, 0x09	; 9
 23a:	21 f4       	brne	.+8      	; 0x244 <lcd_char+0xc>
	{
		for(i =0 ; i<2 ; i++)
		{	
		lcd_putchar(single);
 23c:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <lcd_putchar>
 240:	89 e0       	ldi	r24, 0x09	; 9
 242:	06 c0       	rjmp	.+12     	; 0x250 <lcd_char+0x18>
		}
	}
	else if(single=='\n')
 244:	8a 30       	cpi	r24, 0x0A	; 10
 246:	21 f4       	brne	.+8      	; 0x250 <lcd_char+0x18>
	{
		lcd_gotoxy2(0);	
 248:	80 e0       	ldi	r24, 0x00	; 0
 24a:	0e 94 18 01 	call	0x230	; 0x230 <lcd_gotoxy2>
 24e:	08 95       	ret
	}
	else 
	{
		lcd_putchar(single);
 250:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <lcd_putchar>
 254:	08 95       	ret

00000256 <lcd_showvalue>:
		}
}


void lcd_showvalue(unsigned char num)	//prints the decimal 3digit value of num
{
 256:	ef 92       	push	r14
 258:	ff 92       	push	r15
 25a:	0f 93       	push	r16
 25c:	1f 93       	push	r17
 25e:	18 2f       	mov	r17, r24
	unsigned char H=0,T=0,O=0;
	H=num/100;
 260:	64 e6       	ldi	r22, 0x64	; 100
 262:	0e 94 8e 01 	call	0x31c	; 0x31c <__udivmodqi4>
 266:	48 2f       	mov	r20, r24
	T=(num - (H*100))/10;
 268:	28 2f       	mov	r18, r24
 26a:	30 e0       	ldi	r19, 0x00	; 0
 26c:	8c e9       	ldi	r24, 0x9C	; 156
 26e:	9f ef       	ldi	r25, 0xFF	; 255
 270:	28 9f       	mul	r18, r24
 272:	70 01       	movw	r14, r0
 274:	29 9f       	mul	r18, r25
 276:	f0 0c       	add	r15, r0
 278:	38 9f       	mul	r19, r24
 27a:	f0 0c       	add	r15, r0
 27c:	11 24       	eor	r1, r1
 27e:	c7 01       	movw	r24, r14
 280:	81 0f       	add	r24, r17
 282:	91 1d       	adc	r25, r1
 284:	6a e0       	ldi	r22, 0x0A	; 10
 286:	70 e0       	ldi	r23, 0x00	; 0
 288:	0e 94 9a 01 	call	0x334	; 0x334 <__divmodhi4>
 28c:	06 2f       	mov	r16, r22
	O=(num - (H*100) - (T*10));
	
	lcd_char(H+48);
 28e:	84 2f       	mov	r24, r20
 290:	80 5d       	subi	r24, 0xD0	; 208
 292:	0e 94 1c 01 	call	0x238	; 0x238 <lcd_char>
	lcd_char(T+48);
 296:	80 2f       	mov	r24, r16
 298:	80 5d       	subi	r24, 0xD0	; 208
 29a:	0e 94 1c 01 	call	0x238	; 0x238 <lcd_char>
	lcd_char(O+48);
 29e:	10 5d       	subi	r17, 0xD0	; 208
 2a0:	1e 0d       	add	r17, r14
 2a2:	86 ef       	ldi	r24, 0xF6	; 246
 2a4:	9f ef       	ldi	r25, 0xFF	; 255
 2a6:	08 9f       	mul	r16, r24
 2a8:	00 2d       	mov	r16, r0
 2aa:	11 24       	eor	r1, r1
 2ac:	80 2f       	mov	r24, r16
 2ae:	81 0f       	add	r24, r17
 2b0:	0e 94 1c 01 	call	0x238	; 0x238 <lcd_char>
}
 2b4:	1f 91       	pop	r17
 2b6:	0f 91       	pop	r16
 2b8:	ff 90       	pop	r15
 2ba:	ef 90       	pop	r14
 2bc:	08 95       	ret

000002be <lcd_exit>:
}
		

void lcd_exit(void)
{
	PORTUSED=save;
 2be:	80 91 02 01 	lds	r24, 0x0102
 2c2:	8b bb       	out	0x1b, r24	; 27
}
 2c4:	08 95       	ret

000002c6 <WaitMs>:

/* waits (pauses) for ms milliseconds (assumes clock at 16MHz) */
void WaitMs(unsigned int ms)
{
 2c6:	0a c0       	rjmp	.+20     	; 0x2dc <WaitMs+0x16>
	int i;

	while (ms-- > 0)
 2c8:	20 e0       	ldi	r18, 0x00	; 0
 2ca:	30 e0       	ldi	r19, 0x00	; 0
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
			asm("nop");
 2cc:	00 00       	nop

	while (ms-- > 0)
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
 2ce:	2f 5f       	subi	r18, 0xFF	; 255
 2d0:	3f 4f       	sbci	r19, 0xFF	; 255
 2d2:	4c e0       	ldi	r20, 0x0C	; 12
 2d4:	2c 3c       	cpi	r18, 0xCC	; 204
 2d6:	34 07       	cpc	r19, r20
 2d8:	c9 f7       	brne	.-14     	; 0x2cc <WaitMs+0x6>
 2da:	01 97       	sbiw	r24, 0x01	; 1
/* waits (pauses) for ms milliseconds (assumes clock at 16MHz) */
void WaitMs(unsigned int ms)
{
	int i;

	while (ms-- > 0)
 2dc:	00 97       	sbiw	r24, 0x00	; 0
 2de:	a1 f7       	brne	.-24     	; 0x2c8 <WaitMs+0x2>
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
			asm("nop");
	}
}
 2e0:	08 95       	ret

000002e2 <main>:
#include<avr/io.h>
#include<util/delay.h>
#include"LCD_mega128.h"
int main(void)
{
	lcd_init();
 2e2:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_init>
	while(1)
	{	
	lcd_char('A');	
 2e6:	81 e4       	ldi	r24, 0x41	; 65
 2e8:	0e 94 1c 01 	call	0x238	; 0x238 <lcd_char>
 2ec:	28 ee       	ldi	r18, 0xE8	; 232
 2ee:	33 e0       	ldi	r19, 0x03	; 3
 2f0:	08 c0       	rjmp	.+16     	; 0x302 <main+0x20>
 2f2:	80 e0       	ldi	r24, 0x00	; 0
 2f4:	90 e0       	ldi	r25, 0x00	; 0
	while (ms-- > 0)
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
			asm("nop");
 2f6:	00 00       	nop

	while (ms-- > 0)
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
 2f8:	01 96       	adiw	r24, 0x01	; 1
 2fa:	4c e0       	ldi	r20, 0x0C	; 12
 2fc:	8c 3c       	cpi	r24, 0xCC	; 204
 2fe:	94 07       	cpc	r25, r20
 300:	d1 f7       	brne	.-12     	; 0x2f6 <main+0x14>
/* waits (pauses) for ms milliseconds (assumes clock at 16MHz) */
void WaitMs(unsigned int ms)
{
	int i;

	while (ms-- > 0)
 302:	21 50       	subi	r18, 0x01	; 1
 304:	30 40       	sbci	r19, 0x00	; 0
 306:	8f ef       	ldi	r24, 0xFF	; 255
 308:	2f 3f       	cpi	r18, 0xFF	; 255
 30a:	38 07       	cpc	r19, r24
 30c:	91 f7       	brne	.-28     	; 0x2f2 <main+0x10>
	WaitMs(1000);
	lcd_cmd(0x01);
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	0e 94 81 00 	call	0x102	; 0x102 <lcd_cmd>
	lcd_char('A');
 314:	81 e4       	ldi	r24, 0x41	; 65
 316:	0e 94 1c 01 	call	0x238	; 0x238 <lcd_char>
 31a:	e5 cf       	rjmp	.-54     	; 0x2e6 <main+0x4>

0000031c <__udivmodqi4>:
 31c:	99 1b       	sub	r25, r25
 31e:	79 e0       	ldi	r23, 0x09	; 9
 320:	04 c0       	rjmp	.+8      	; 0x32a <__udivmodqi4_ep>

00000322 <__udivmodqi4_loop>:
 322:	99 1f       	adc	r25, r25
 324:	96 17       	cp	r25, r22
 326:	08 f0       	brcs	.+2      	; 0x32a <__udivmodqi4_ep>
 328:	96 1b       	sub	r25, r22

0000032a <__udivmodqi4_ep>:
 32a:	88 1f       	adc	r24, r24
 32c:	7a 95       	dec	r23
 32e:	c9 f7       	brne	.-14     	; 0x322 <__udivmodqi4_loop>
 330:	80 95       	com	r24
 332:	08 95       	ret

00000334 <__divmodhi4>:
 334:	97 fb       	bst	r25, 7
 336:	09 2e       	mov	r0, r25
 338:	07 26       	eor	r0, r23
 33a:	0a d0       	rcall	.+20     	; 0x350 <__divmodhi4_neg1>
 33c:	77 fd       	sbrc	r23, 7
 33e:	04 d0       	rcall	.+8      	; 0x348 <__divmodhi4_neg2>
 340:	0c d0       	rcall	.+24     	; 0x35a <__udivmodhi4>
 342:	06 d0       	rcall	.+12     	; 0x350 <__divmodhi4_neg1>
 344:	00 20       	and	r0, r0
 346:	1a f4       	brpl	.+6      	; 0x34e <__divmodhi4_exit>

00000348 <__divmodhi4_neg2>:
 348:	70 95       	com	r23
 34a:	61 95       	neg	r22
 34c:	7f 4f       	sbci	r23, 0xFF	; 255

0000034e <__divmodhi4_exit>:
 34e:	08 95       	ret

00000350 <__divmodhi4_neg1>:
 350:	f6 f7       	brtc	.-4      	; 0x34e <__divmodhi4_exit>
 352:	90 95       	com	r25
 354:	81 95       	neg	r24
 356:	9f 4f       	sbci	r25, 0xFF	; 255
 358:	08 95       	ret

0000035a <__udivmodhi4>:
 35a:	aa 1b       	sub	r26, r26
 35c:	bb 1b       	sub	r27, r27
 35e:	51 e1       	ldi	r21, 0x11	; 17
 360:	07 c0       	rjmp	.+14     	; 0x370 <__udivmodhi4_ep>

00000362 <__udivmodhi4_loop>:
 362:	aa 1f       	adc	r26, r26
 364:	bb 1f       	adc	r27, r27
 366:	a6 17       	cp	r26, r22
 368:	b7 07       	cpc	r27, r23
 36a:	10 f0       	brcs	.+4      	; 0x370 <__udivmodhi4_ep>
 36c:	a6 1b       	sub	r26, r22
 36e:	b7 0b       	sbc	r27, r23

00000370 <__udivmodhi4_ep>:
 370:	88 1f       	adc	r24, r24
 372:	99 1f       	adc	r25, r25
 374:	5a 95       	dec	r21
 376:	a9 f7       	brne	.-22     	; 0x362 <__udivmodhi4_loop>
 378:	80 95       	com	r24
 37a:	90 95       	com	r25
 37c:	bc 01       	movw	r22, r24
 37e:	cd 01       	movw	r24, r26
 380:	08 95       	ret

00000382 <_exit>:
 382:	f8 94       	cli

00000384 <__stop_program>:
 384:	ff cf       	rjmp	.-2      	; 0x384 <__stop_program>
