
lcd2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00000404  00000498  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000404  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800118  00800118  000004b0  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000004b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000054  00000000  00000000  00000b7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  00000bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000000d7  00000000  00000000  00000bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000425  00000000  00000000  00000cc7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000001c1  00000000  00000000  000010ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000043d  00000000  00000000  000012ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000e0  00000000  00000000  000016ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000164  00000000  00000000  000017cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000205  00000000  00000000  00001930  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000038  00000000  00000000  00001b35  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
   8:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
   c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  14:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  1c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  24:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  2c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  48:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  54:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  58:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  5c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  60:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  68:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  6c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  70:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  74:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  78:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  7c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  80:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  84:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  88:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e0       	ldi	r30, 0x04	; 4
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <__do_copy_data+0x10>
  a4:	05 90       	lpm	r0, Z+
  a6:	0d 92       	st	X+, r0
  a8:	a8 31       	cpi	r26, 0x18	; 24
  aa:	b1 07       	cpc	r27, r17
  ac:	d9 f7       	brne	.-10     	; 0xa4 <__do_copy_data+0xc>

000000ae <__do_clear_bss>:
  ae:	11 e0       	ldi	r17, 0x01	; 1
  b0:	a8 e1       	ldi	r26, 0x18	; 24
  b2:	b1 e0       	ldi	r27, 0x01	; 1
  b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
  b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
  b8:	ab 31       	cpi	r26, 0x1B	; 27
  ba:	b1 07       	cpc	r27, r17
  bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
  be:	0e 94 52 01 	call	0x2a4	; 0x2a4 <main>
  c2:	0c 94 00 02 	jmp	0x400	; 0x400 <_exit>

000000c6 <__bad_interrupt>:
  c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <dely_ns>:
CLEARBIT(PORTUSED,BIT(2));
}

void dely_ns(unsigned char tim)
{
	for(j=0;j<tim;j++)
  ca:	20 91 18 01 	lds	r18, 0x0118
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <dely_ns+0xc>
  d2:	9f 5f       	subi	r25, 0xFF	; 255
  d4:	2a e0       	ldi	r18, 0x0A	; 10
  d6:	98 17       	cp	r25, r24
  d8:	e0 f3       	brcs	.-8      	; 0xd2 <dely_ns+0x8>
  da:	20 93 18 01 	sts	0x0118, r18
  de:	90 93 19 01 	sts	0x0119, r25
	{
		for(k=0;k<10;k++)
		{};
	}
}
  e2:	08 95       	ret

000000e4 <toggleE>:
		
}

void toggleE(void)
{
SETBIT(PORTUSED,BIT(2));
  e4:	da 9a       	sbi	0x1b, 2	; 27
dely_ns(250);
  e6:	8a ef       	ldi	r24, 0xFA	; 250
  e8:	0e 94 65 00 	call	0xca	; 0xca <dely_ns>
CLEARBIT(PORTUSED,BIT(2));
  ec:	da 98       	cbi	0x1b, 2	; 27
}
  ee:	08 95       	ret

000000f0 <lcd_cmd>:
		{};
	}
}

void lcd_cmd(unsigned char cmd)
{
  f0:	df 93       	push	r29
  f2:	cf 93       	push	r28
  f4:	0f 92       	push	r0
  f6:	cd b7       	in	r28, 0x3d	; 61
  f8:	de b7       	in	r29, 0x3e	; 62
	CLEARBIT(PORTUSED,BIT(0)+BIT(1)+BIT(2));
  fa:	9b b3       	in	r25, 0x1b	; 27
  fc:	94 70       	andi	r25, 0x04	; 4
  fe:	9b bb       	out	0x1b, r25	; 27
	PORTUSED=((cmd&0xF0));			//send the higher bits of the command
 100:	98 2f       	mov	r25, r24
 102:	90 7f       	andi	r25, 0xF0	; 240
 104:	9b bb       	out	0x1b, r25	; 27
	toggleE();	
 106:	89 83       	std	Y+1, r24	; 0x01
 108:	0e 94 72 00 	call	0xe4	; 0xe4 <toggleE>
	PORTUSED=(((cmd&(0x0F))*16));		//send the lower bits of the command
 10c:	89 81       	ldd	r24, Y+1	; 0x01
 10e:	82 95       	swap	r24
 110:	80 7f       	andi	r24, 0xF0	; 240
 112:	8b bb       	out	0x1b, r24	; 27
	toggleE();
 114:	0e 94 72 00 	call	0xe4	; 0xe4 <toggleE>
}
 118:	0f 90       	pop	r0
 11a:	cf 91       	pop	r28
 11c:	df 91       	pop	r29
 11e:	08 95       	ret

00000120 <lcd_putchar>:

void lcd_putchar(unsigned char sig)
{
 120:	df 93       	push	r29
 122:	cf 93       	push	r28
 124:	0f 92       	push	r0
 126:	cd b7       	in	r28, 0x3d	; 61
 128:	de b7       	in	r29, 0x3e	; 62
		PORTUSED=0x01;
 12a:	91 e0       	ldi	r25, 0x01	; 1
 12c:	9b bb       	out	0x1b, r25	; 27
		CLEARBIT(PORTUSED,BIT(0)+BIT(2));
 12e:	9b b3       	in	r25, 0x1b	; 27
 130:	92 70       	andi	r25, 0x02	; 2
 132:	9b bb       	out	0x1b, r25	; 27
		PORTUSED=(sig&0xF0)|0x01;						
 134:	98 2f       	mov	r25, r24
 136:	90 7f       	andi	r25, 0xF0	; 240
 138:	91 60       	ori	r25, 0x01	; 1
 13a:	9b bb       	out	0x1b, r25	; 27
		toggleE();
 13c:	89 83       	std	Y+1, r24	; 0x01
 13e:	0e 94 72 00 	call	0xe4	; 0xe4 <toggleE>
		PORTUSED=((sig&(0x0F))*16)|0x01;
 142:	89 81       	ldd	r24, Y+1	; 0x01
 144:	82 95       	swap	r24
 146:	80 7f       	andi	r24, 0xF0	; 240
 148:	81 60       	ori	r24, 0x01	; 1
 14a:	8b bb       	out	0x1b, r24	; 27
		toggleE();
 14c:	0e 94 72 00 	call	0xe4	; 0xe4 <toggleE>
}
 150:	0f 90       	pop	r0
 152:	cf 91       	pop	r28
 154:	df 91       	pop	r29
 156:	08 95       	ret

00000158 <lcd_string>:
		lcd_putchar(single);
	}
}

void lcd_string(unsigned char str[32])
{
 158:	ff 92       	push	r15
 15a:	0f 93       	push	r16
 15c:	1f 93       	push	r17
 15e:	cf 93       	push	r28
 160:	df 93       	push	r29
 162:	8c 01       	movw	r16, r24
	unsigned char k=0;
	PORTUSED=0x01;
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	8b bb       	out	0x1b, r24	; 27
	CLEARBIT(PORTUSED,BIT(0)+BIT(2));
 168:	8b b3       	in	r24, 0x1b	; 27
 16a:	82 70       	andi	r24, 0x02	; 2
 16c:	8b bb       	out	0x1b, r24	; 27
	}
}

void lcd_string(unsigned char str[32])
{
	unsigned char k=0;
 16e:	ff 24       	eor	r15, r15
	PORTUSED=0x01;
	CLEARBIT(PORTUSED,BIT(0)+BIT(2));
	while(str[k]!='\0')	//Till null character is encountered
 170:	14 c0       	rjmp	.+40     	; 0x19a <lcd_string+0x42>
		{
			if(k==16)
 172:	8f 2d       	mov	r24, r15
 174:	80 31       	cpi	r24, 0x10	; 16
 176:	19 f4       	brne	.+6      	; 0x17e <lcd_string+0x26>
				lcd_cmd(LINE2);
 178:	80 ec       	ldi	r24, 0xC0	; 192
 17a:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_cmd>
			PORTUSED=((str[k])&0xF0)|0x01;
 17e:	88 81       	ld	r24, Y
 180:	80 7f       	andi	r24, 0xF0	; 240
 182:	81 60       	ori	r24, 0x01	; 1
 184:	8b bb       	out	0x1b, r24	; 27
			toggleE();
 186:	0e 94 72 00 	call	0xe4	; 0xe4 <toggleE>
			PORTUSED=((str[k]&(0x0F))*16)|0x01;
 18a:	88 81       	ld	r24, Y
 18c:	82 95       	swap	r24
 18e:	80 7f       	andi	r24, 0xF0	; 240
 190:	81 60       	ori	r24, 0x01	; 1
 192:	8b bb       	out	0x1b, r24	; 27
			toggleE();
 194:	0e 94 72 00 	call	0xe4	; 0xe4 <toggleE>
			k++;
 198:	f3 94       	inc	r15
void lcd_string(unsigned char str[32])
{
	unsigned char k=0;
	PORTUSED=0x01;
	CLEARBIT(PORTUSED,BIT(0)+BIT(2));
	while(str[k]!='\0')	//Till null character is encountered
 19a:	e8 01       	movw	r28, r16
 19c:	cf 0d       	add	r28, r15
 19e:	d1 1d       	adc	r29, r1
 1a0:	88 81       	ld	r24, Y
 1a2:	88 23       	and	r24, r24
 1a4:	31 f7       	brne	.-52     	; 0x172 <lcd_string+0x1a>
			toggleE();
			PORTUSED=((str[k]&(0x0F))*16)|0x01;
			toggleE();
			k++;
		}
}
 1a6:	df 91       	pop	r29
 1a8:	cf 91       	pop	r28
 1aa:	1f 91       	pop	r17
 1ac:	0f 91       	pop	r16
 1ae:	ff 90       	pop	r15
 1b0:	08 95       	ret

000001b2 <lcd_gotoxy1>:
	lcd_char(O+48);
}

void lcd_gotoxy1(unsigned char pos)
{
	lcd_cmd(LINE1+pos);
 1b2:	80 58       	subi	r24, 0x80	; 128
 1b4:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_cmd>
}
 1b8:	08 95       	ret

000001ba <lcd_gotoxy2>:

void lcd_gotoxy2(unsigned char pos)
{
	lcd_cmd(LINE2+pos);
 1ba:	80 54       	subi	r24, 0x40	; 64
 1bc:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_cmd>
}
 1c0:	08 95       	ret

000001c2 <lcd_char>:
}

void lcd_char(unsigned char single)
{
	int i;
	if(single =='\t')
 1c2:	89 30       	cpi	r24, 0x09	; 9
 1c4:	21 f4       	brne	.+8      	; 0x1ce <lcd_char+0xc>
	{
		for(i =0 ; i<2 ; i++)
		{	
		lcd_putchar(single);
 1c6:	0e 94 90 00 	call	0x120	; 0x120 <lcd_putchar>
 1ca:	89 e0       	ldi	r24, 0x09	; 9
 1cc:	06 c0       	rjmp	.+12     	; 0x1da <lcd_char+0x18>
		}
	}
	else if(single=='\n')
 1ce:	8a 30       	cpi	r24, 0x0A	; 10
 1d0:	21 f4       	brne	.+8      	; 0x1da <lcd_char+0x18>
	{
		lcd_gotoxy2(0);	
 1d2:	80 e0       	ldi	r24, 0x00	; 0
 1d4:	0e 94 dd 00 	call	0x1ba	; 0x1ba <lcd_gotoxy2>
 1d8:	08 95       	ret
	}
	else 
	{
		lcd_putchar(single);
 1da:	0e 94 90 00 	call	0x120	; 0x120 <lcd_putchar>
 1de:	08 95       	ret

000001e0 <lcd_showvalue>:
		}
}


void lcd_showvalue(unsigned char num)	//prints the decimal 3digit value of num
{
 1e0:	ff 92       	push	r15
 1e2:	0f 93       	push	r16
 1e4:	1f 93       	push	r17
 1e6:	08 2f       	mov	r16, r24
	unsigned char H=0,T=0,O=0;
	H=num/100;
 1e8:	64 e6       	ldi	r22, 0x64	; 100
 1ea:	0e 94 cd 01 	call	0x39a	; 0x39a <__udivmodqi4>
 1ee:	18 2f       	mov	r17, r24
	T=(num - (H*100))/10;
 1f0:	68 2f       	mov	r22, r24
 1f2:	70 e0       	ldi	r23, 0x00	; 0
 1f4:	4c e9       	ldi	r20, 0x9C	; 156
 1f6:	5f ef       	ldi	r21, 0xFF	; 255
 1f8:	64 9f       	mul	r22, r20
 1fa:	90 01       	movw	r18, r0
 1fc:	65 9f       	mul	r22, r21
 1fe:	30 0d       	add	r19, r0
 200:	74 9f       	mul	r23, r20
 202:	30 0d       	add	r19, r0
 204:	11 24       	eor	r1, r1
 206:	20 0f       	add	r18, r16
 208:	31 1d       	adc	r19, r1
 20a:	c9 01       	movw	r24, r18
 20c:	6a e0       	ldi	r22, 0x0A	; 10
 20e:	70 e0       	ldi	r23, 0x00	; 0
 210:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <__divmodhi4>
 214:	f6 2e       	mov	r15, r22
	O=(num - (H*100) - (T*10));
	
	lcd_char(H+48);
 216:	81 2f       	mov	r24, r17
 218:	80 5d       	subi	r24, 0xD0	; 208
 21a:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_char>
	lcd_char(T+48);
 21e:	8f 2d       	mov	r24, r15
 220:	80 5d       	subi	r24, 0xD0	; 208
 222:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_char>
void lcd_showvalue(unsigned char num)	//prints the decimal 3digit value of num
{
	unsigned char H=0,T=0,O=0;
	H=num/100;
	T=(num - (H*100))/10;
	O=(num - (H*100) - (T*10));
 226:	00 5d       	subi	r16, 0xD0	; 208
 228:	8c e9       	ldi	r24, 0x9C	; 156
 22a:	18 9f       	mul	r17, r24
 22c:	10 2d       	mov	r17, r0
 22e:	11 24       	eor	r1, r1
 230:	01 0f       	add	r16, r17
 232:	86 ef       	ldi	r24, 0xF6	; 246
 234:	f8 9e       	mul	r15, r24
 236:	80 2d       	mov	r24, r0
 238:	11 24       	eor	r1, r1
	
	lcd_char(H+48);
	lcd_char(T+48);
	lcd_char(O+48);
 23a:	80 0f       	add	r24, r16
 23c:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_char>
}
 240:	1f 91       	pop	r17
 242:	0f 91       	pop	r16
 244:	ff 90       	pop	r15
 246:	08 95       	ret

00000248 <lcd_exit>:
}
		

void lcd_exit(void)
{
	PORTUSED=save;
 248:	80 91 1a 01 	lds	r24, 0x011A
 24c:	8b bb       	out	0x1b, r24	; 27
}
 24e:	08 95       	ret

00000250 <WaitMs>:
/* waits (pauses) for ms milliseconds (assumes clock at 16MHz) */
void WaitMs(unsigned int ms)
{
	int i;

	while (ms-- > 0)
 250:	07 c0       	rjmp	.+14     	; 0x260 <WaitMs+0x10>
 252:	2c ec       	ldi	r18, 0xCC	; 204
 254:	3c e0       	ldi	r19, 0x0C	; 12
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
			asm("nop");
 256:	00 00       	nop
 258:	21 50       	subi	r18, 0x01	; 1
 25a:	30 40       	sbci	r19, 0x00	; 0

	while (ms-- > 0)
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
 25c:	e1 f7       	brne	.-8      	; 0x256 <WaitMs+0x6>
 25e:	01 97       	sbiw	r24, 0x01	; 1
/* waits (pauses) for ms milliseconds (assumes clock at 16MHz) */
void WaitMs(unsigned int ms)
{
	int i;

	while (ms-- > 0)
 260:	00 97       	sbiw	r24, 0x00	; 0
 262:	b9 f7       	brne	.-18     	; 0x252 <WaitMs+0x2>
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
			asm("nop");
	}
}
 264:	08 95       	ret

00000266 <lcd_init>:
void WaitMs(unsigned int ms);


void lcd_init(void)	//init the lcd
{	
	save=PORTUSED;
 266:	8b b3       	in	r24, 0x1b	; 27
 268:	80 93 1a 01 	sts	0x011A, r24
	DDRUSED=0xFF;
 26c:	8f ef       	ldi	r24, 0xFF	; 255
 26e:	8a bb       	out	0x1a, r24	; 26
	//DDRB=0xFF;
	WaitMs(15);
 270:	8f e0       	ldi	r24, 0x0F	; 15
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	0e 94 28 01 	call	0x250	; 0x250 <WaitMs>
	CLEARBIT(PORTUSED,BIT(0)+BIT(1)+BIT(2));
 278:	8b b3       	in	r24, 0x1b	; 27
 27a:	84 70       	andi	r24, 0x04	; 4
 27c:	8b bb       	out	0x1b, r24	; 27
	PORTUSED=0x20;			//not necessary
 27e:	80 e2       	ldi	r24, 0x20	; 32
 280:	8b bb       	out	0x1b, r24	; 27
	lcd_cmd(0x01);			//clear
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_cmd>
	lcd_cmd(0x0F);			//turn on blinking block cursor
 288:	8f e0       	ldi	r24, 0x0F	; 15
 28a:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_cmd>
	lcd_cmd(0x02);			//4 bit interface with MPU
 28e:	82 e0       	ldi	r24, 0x02	; 2
 290:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_cmd>
	lcd_cmd(LINE1);			//go to ddram address 0x80
 294:	80 e8       	ldi	r24, 0x80	; 128
 296:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_cmd>
	WaitMs(15);
 29a:	8f e0       	ldi	r24, 0x0F	; 15
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	0e 94 28 01 	call	0x250	; 0x250 <WaitMs>
		
}
 2a2:	08 95       	ret

000002a4 <main>:
#include<avr/io.h>
#include<util/delay.h>
#include"LCD_mega128.h"
int main(void)
{	int i;
 2a4:	ef 92       	push	r14
 2a6:	ff 92       	push	r15
 2a8:	0f 93       	push	r16
 2aa:	1f 93       	push	r17
 2ac:	df 93       	push	r29
 2ae:	cf 93       	push	r28
 2b0:	cd b7       	in	r28, 0x3d	; 61
 2b2:	de b7       	in	r29, 0x3e	; 62
 2b4:	28 97       	sbiw	r28, 0x08	; 8
 2b6:	0f b6       	in	r0, 0x3f	; 63
 2b8:	f8 94       	cli
 2ba:	de bf       	out	0x3e, r29	; 62
 2bc:	0f be       	out	0x3f, r0	; 63
 2be:	cd bf       	out	0x3d, r28	; 61
	unsigned char a[8]={0x00,0x0A,0X00,0X04,0X00,0X0A,0X04,0X00};	
 2c0:	de 01       	movw	r26, r28
 2c2:	11 96       	adiw	r26, 0x01	; 1
 2c4:	ef e0       	ldi	r30, 0x0F	; 15
 2c6:	f1 e0       	ldi	r31, 0x01	; 1
 2c8:	88 e0       	ldi	r24, 0x08	; 8
 2ca:	01 90       	ld	r0, Z+
 2cc:	0d 92       	st	X+, r0
 2ce:	81 50       	subi	r24, 0x01	; 1
 2d0:	e1 f7       	brne	.-8      	; 0x2ca <main+0x26>
	lcd_init();
 2d2:	0e 94 33 01 	call	0x266	; 0x266 <lcd_init>
	//lcd_cmd(0x48);		//set the address of the CGRAM
	/*for(i=0;i<8;i++)
	{
	lcd_putchar(a[i]);		//put the user generated pattern into the CGRAM
	}*/
	lcd_cmd(0x01);
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_cmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2dc:	8f ef       	ldi	r24, 0xFF	; 255
 2de:	99 e6       	ldi	r25, 0x69	; 105
 2e0:	a8 e1       	ldi	r26, 0x18	; 24
 2e2:	81 50       	subi	r24, 0x01	; 1
 2e4:	90 40       	sbci	r25, 0x00	; 0
 2e6:	a0 40       	sbci	r26, 0x00	; 0
 2e8:	e1 f7       	brne	.-8      	; 0x2e2 <main+0x3e>
 2ea:	00 c0       	rjmp	.+0      	; 0x2ec <main+0x48>
 2ec:	00 00       	nop
	_delay_ms(500);
	lcd_cmd(LINE1);
 2ee:	80 e8       	ldi	r24, 0x80	; 128
 2f0:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_cmd>
	lcd_putchar(1);			// puts the generated character on the display
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	0e 94 90 00 	call	0x120	; 0x120 <lcd_putchar>
	lcd_cmd(0x0c);
 2fa:	8c e0       	ldi	r24, 0x0C	; 12
 2fc:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_cmd>
 300:	8f ef       	ldi	r24, 0xFF	; 255
 302:	99 e6       	ldi	r25, 0x69	; 105
 304:	a8 e1       	ldi	r26, 0x18	; 24
 306:	81 50       	subi	r24, 0x01	; 1
 308:	90 40       	sbci	r25, 0x00	; 0
 30a:	a0 40       	sbci	r26, 0x00	; 0
 30c:	e1 f7       	brne	.-8      	; 0x306 <main+0x62>
 30e:	00 c0       	rjmp	.+0      	; 0x310 <main+0x6c>
 310:	00 00       	nop
	_delay_ms(500);
	lcd_cmd(0x50);
 312:	80 e5       	ldi	r24, 0x50	; 80
 314:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_cmd>
 318:	8e 01       	movw	r16, r28
 31a:	0f 5f       	subi	r16, 0xFF	; 255
 31c:	1f 4f       	sbci	r17, 0xFF	; 255
#include<avr/io.h>
#include<util/delay.h>
#include"LCD_mega128.h"
int main(void)
 31e:	89 e0       	ldi	r24, 0x09	; 9
 320:	e8 2e       	mov	r14, r24
 322:	f1 2c       	mov	r15, r1
 324:	ec 0e       	add	r14, r28
 326:	fd 1e       	adc	r15, r29
	lcd_cmd(0x0c);
	_delay_ms(500);
	lcd_cmd(0x50);
	for(i=0;i<8;i++)
	{
	lcd_putchar(a[i]);
 328:	d8 01       	movw	r26, r16
 32a:	8d 91       	ld	r24, X+
 32c:	8d 01       	movw	r16, r26
 32e:	0e 94 90 00 	call	0x120	; 0x120 <lcd_putchar>
	lcd_cmd(LINE1);
	lcd_putchar(1);			// puts the generated character on the display
	lcd_cmd(0x0c);
	_delay_ms(500);
	lcd_cmd(0x50);
	for(i=0;i<8;i++)
 332:	0e 15       	cp	r16, r14
 334:	1f 05       	cpc	r17, r15
 336:	c1 f7       	brne	.-16     	; 0x328 <main+0x84>
 338:	8f ef       	ldi	r24, 0xFF	; 255
 33a:	99 e6       	ldi	r25, 0x69	; 105
 33c:	a8 e1       	ldi	r26, 0x18	; 24
 33e:	81 50       	subi	r24, 0x01	; 1
 340:	90 40       	sbci	r25, 0x00	; 0
 342:	a0 40       	sbci	r26, 0x00	; 0
 344:	e1 f7       	brne	.-8      	; 0x33e <main+0x9a>
 346:	00 c0       	rjmp	.+0      	; 0x348 <main+0xa4>
 348:	00 00       	nop
	{
	lcd_putchar(a[i]);
	}
	//lcd_cmd(0x01);
	_delay_ms(500);
	lcd_cmd(LINE2);
 34a:	80 ec       	ldi	r24, 0xC0	; 192
 34c:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_cmd>
	//lcd_cmd(0x40);
	lcd_putchar(48);//
 350:	80 e3       	ldi	r24, 0x30	; 48
 352:	0e 94 90 00 	call	0x120	; 0x120 <lcd_putchar>
	lcd_putchar(0);
 356:	80 e0       	ldi	r24, 0x00	; 0
 358:	0e 94 90 00 	call	0x120	; 0x120 <lcd_putchar>
	lcd_putchar(1);
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	0e 94 90 00 	call	0x120	; 0x120 <lcd_putchar>
	lcd_putchar(2);
 362:	82 e0       	ldi	r24, 0x02	; 2
 364:	0e 94 90 00 	call	0x120	; 0x120 <lcd_putchar>
	lcd_cmd(0x01);
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_cmd>
	lcd_putchar('A');
 36e:	81 e4       	ldi	r24, 0x41	; 65
 370:	0e 94 90 00 	call	0x120	; 0x120 <lcd_putchar>
	lcd_string("This is a test");
 374:	80 e0       	ldi	r24, 0x00	; 0
 376:	91 e0       	ldi	r25, 0x01	; 1
 378:	0e 94 ac 00 	call	0x158	; 0x158 <lcd_string>

}
 37c:	80 e0       	ldi	r24, 0x00	; 0
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	28 96       	adiw	r28, 0x08	; 8
 382:	0f b6       	in	r0, 0x3f	; 63
 384:	f8 94       	cli
 386:	de bf       	out	0x3e, r29	; 62
 388:	0f be       	out	0x3f, r0	; 63
 38a:	cd bf       	out	0x3d, r28	; 61
 38c:	cf 91       	pop	r28
 38e:	df 91       	pop	r29
 390:	1f 91       	pop	r17
 392:	0f 91       	pop	r16
 394:	ff 90       	pop	r15
 396:	ef 90       	pop	r14
 398:	08 95       	ret

0000039a <__udivmodqi4>:
 39a:	99 1b       	sub	r25, r25
 39c:	79 e0       	ldi	r23, 0x09	; 9
 39e:	04 c0       	rjmp	.+8      	; 0x3a8 <__udivmodqi4_ep>

000003a0 <__udivmodqi4_loop>:
 3a0:	99 1f       	adc	r25, r25
 3a2:	96 17       	cp	r25, r22
 3a4:	08 f0       	brcs	.+2      	; 0x3a8 <__udivmodqi4_ep>
 3a6:	96 1b       	sub	r25, r22

000003a8 <__udivmodqi4_ep>:
 3a8:	88 1f       	adc	r24, r24
 3aa:	7a 95       	dec	r23
 3ac:	c9 f7       	brne	.-14     	; 0x3a0 <__udivmodqi4_loop>
 3ae:	80 95       	com	r24
 3b0:	08 95       	ret

000003b2 <__divmodhi4>:
 3b2:	97 fb       	bst	r25, 7
 3b4:	09 2e       	mov	r0, r25
 3b6:	07 26       	eor	r0, r23
 3b8:	0a d0       	rcall	.+20     	; 0x3ce <__divmodhi4_neg1>
 3ba:	77 fd       	sbrc	r23, 7
 3bc:	04 d0       	rcall	.+8      	; 0x3c6 <__divmodhi4_neg2>
 3be:	0c d0       	rcall	.+24     	; 0x3d8 <__udivmodhi4>
 3c0:	06 d0       	rcall	.+12     	; 0x3ce <__divmodhi4_neg1>
 3c2:	00 20       	and	r0, r0
 3c4:	1a f4       	brpl	.+6      	; 0x3cc <__divmodhi4_exit>

000003c6 <__divmodhi4_neg2>:
 3c6:	70 95       	com	r23
 3c8:	61 95       	neg	r22
 3ca:	7f 4f       	sbci	r23, 0xFF	; 255

000003cc <__divmodhi4_exit>:
 3cc:	08 95       	ret

000003ce <__divmodhi4_neg1>:
 3ce:	f6 f7       	brtc	.-4      	; 0x3cc <__divmodhi4_exit>
 3d0:	90 95       	com	r25
 3d2:	81 95       	neg	r24
 3d4:	9f 4f       	sbci	r25, 0xFF	; 255
 3d6:	08 95       	ret

000003d8 <__udivmodhi4>:
 3d8:	aa 1b       	sub	r26, r26
 3da:	bb 1b       	sub	r27, r27
 3dc:	51 e1       	ldi	r21, 0x11	; 17
 3de:	07 c0       	rjmp	.+14     	; 0x3ee <__udivmodhi4_ep>

000003e0 <__udivmodhi4_loop>:
 3e0:	aa 1f       	adc	r26, r26
 3e2:	bb 1f       	adc	r27, r27
 3e4:	a6 17       	cp	r26, r22
 3e6:	b7 07       	cpc	r27, r23
 3e8:	10 f0       	brcs	.+4      	; 0x3ee <__udivmodhi4_ep>
 3ea:	a6 1b       	sub	r26, r22
 3ec:	b7 0b       	sbc	r27, r23

000003ee <__udivmodhi4_ep>:
 3ee:	88 1f       	adc	r24, r24
 3f0:	99 1f       	adc	r25, r25
 3f2:	5a 95       	dec	r21
 3f4:	a9 f7       	brne	.-22     	; 0x3e0 <__udivmodhi4_loop>
 3f6:	80 95       	com	r24
 3f8:	90 95       	com	r25
 3fa:	bc 01       	movw	r22, r24
 3fc:	cd 01       	movw	r24, r26
 3fe:	08 95       	ret

00000400 <_exit>:
 400:	f8 94       	cli

00000402 <__stop_program>:
 402:	ff cf       	rjmp	.-2      	; 0x402 <__stop_program>
